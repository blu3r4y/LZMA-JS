{"version":3,"file":"lzma-d.js","sources":["lzma-algo.mjs","lzma-d.mjs"],"sourcesContent":["/// Â© 2015 Nathan Rugg <nmrugg@gmail.com> | MIT\r\n/// See LICENSE for more details.\r\n\r\n/* jshint noarg:true, boss:true, unused:strict, strict:true, undef:true, noarg: true, forin:true, evil:true, newcap:false, -W041, -W021, worker:true, browser:true, node:true */\r\n\r\n/* global setImmediate, setTimeout, window, onmessage */\r\n\r\n/** xs */\r\n///NOTE: This is the master file that is used to generate lzma-c.js and lzma-d.js.\r\n///      Comments are used to determine which parts are to be removed.\r\n///\r\n/// cs-ce (compression start-end)\r\n/// ds-de (decompression start-end)\r\n/// xs-xe (only in this file start-end)\r\n/// co    (compression only)\r\n/// do    (decompression only)\r\n/** xe */\r\n\r\nexport var action_compress = 1;\r\nexport var action_decompress = 2;\r\nexport var action_progress = 3;\r\n\r\nvar wait = typeof setImmediate == \"function\" ? setImmediate : setTimeout,\r\n    __4294967296 = 4294967296,\r\n    N1_longLit = [4294967295, -__4294967296],\r\n    /** cs */\r\n    MIN_VALUE = [0, -9223372036854775808],\r\n    /** ce */\r\n    P0_longLit = [0, 0],\r\n    P1_longLit = [1, 0];\r\n\r\nfunction update_progress(percent, cbn) {\r\n    postMessage({\r\n        \"action\": action_progress,\r\n        \"cbn\": cbn,\r\n        \"result\": percent\r\n    });\r\n}\r\n\r\nfunction initDim(len) {\r\n    ///NOTE: This is MUCH faster than \"new Array(len)\" in newer versions of v8 (starting with Node.js 0.11.15, which uses v8 3.28.73).\r\n    var a = [];\r\n    a[len - 1] = undefined;\r\n    return a;\r\n}\r\n\r\nfunction add(a, b) {\r\n    return create(a[0] + b[0], a[1] + b[1]);\r\n}\r\n\r\n/** cs */\r\nfunction and(a, b) {\r\n    return makeFromBits(~~Math.max(Math.min(a[1] / __4294967296, 2147483647), -2147483648) & ~~Math.max(Math.min(b[1] / __4294967296, 2147483647), -2147483648), lowBits_0(a) & lowBits_0(b));\r\n}\r\n/** ce */\r\n\r\nfunction compare(a, b) {\r\n    var nega, negb;\r\n    if (a[0] == b[0] && a[1] == b[1]) {\r\n        return 0;\r\n    }\r\n    nega = a[1] < 0;\r\n    negb = b[1] < 0;\r\n    if (nega && !negb) {\r\n        return -1;\r\n    }\r\n    if (!nega && negb) {\r\n        return 1;\r\n    }\r\n    if (sub(a, b)[1] < 0) {\r\n        return -1;\r\n    }\r\n    return 1;\r\n}\r\n\r\nfunction create(valueLow, valueHigh) {\r\n    var diffHigh, diffLow;\r\n    valueHigh %= 1.8446744073709552E19;\r\n    valueLow %= 1.8446744073709552E19;\r\n    diffHigh = valueHigh % __4294967296;\r\n    diffLow = Math.floor(valueLow / __4294967296) * __4294967296;\r\n    valueHigh = valueHigh - diffHigh + diffLow;\r\n    valueLow = valueLow - diffLow + diffHigh;\r\n    while (valueLow < 0) {\r\n        valueLow += __4294967296;\r\n        valueHigh -= __4294967296;\r\n    }\r\n    while (valueLow > 4294967295) {\r\n        valueLow -= __4294967296;\r\n        valueHigh += __4294967296;\r\n    }\r\n    valueHigh = valueHigh % 1.8446744073709552E19;\r\n    while (valueHigh > 9223372032559808512) {\r\n        valueHigh -= 1.8446744073709552E19;\r\n    }\r\n    while (valueHigh < -9223372036854775808) {\r\n        valueHigh += 1.8446744073709552E19;\r\n    }\r\n    return [valueLow, valueHigh];\r\n}\r\n\r\n/** cs */\r\nfunction eq(a, b) {\r\n    return a[0] == b[0] && a[1] == b[1];\r\n}\r\n/** ce */\r\nfunction fromInt(value) {\r\n    if (value >= 0) {\r\n        return [value, 0];\r\n    } else {\r\n        return [value + __4294967296, -__4294967296];\r\n    }\r\n}\r\n\r\nfunction lowBits_0(a) {\r\n    if (a[0] >= 2147483648) {\r\n        return ~~Math.max(Math.min(a[0] - __4294967296, 2147483647), -2147483648);\r\n    } else {\r\n        return ~~Math.max(Math.min(a[0], 2147483647), -2147483648);\r\n    }\r\n}\r\n/** cs */\r\nfunction makeFromBits(highBits, lowBits) {\r\n    var high, low;\r\n    high = highBits * __4294967296;\r\n    low = lowBits;\r\n    if (lowBits < 0) {\r\n        low += __4294967296;\r\n    }\r\n    return [low, high];\r\n}\r\n\r\nfunction pwrAsDouble(n) {\r\n    if (n <= 30) {\r\n        return 1 << n;\r\n    } else {\r\n        return pwrAsDouble(30) * pwrAsDouble(n - 30);\r\n    }\r\n}\r\n\r\nfunction shl(a, n) {\r\n    var diff, newHigh, newLow, twoToN;\r\n    n &= 63;\r\n    if (eq(a, MIN_VALUE)) {\r\n        if (!n) {\r\n            return a;\r\n        }\r\n        return P0_longLit;\r\n    }\r\n    if (a[1] < 0) {\r\n        throw new Error(\"Neg\");\r\n    }\r\n    twoToN = pwrAsDouble(n);\r\n    newHigh = a[1] * twoToN % 1.8446744073709552E19;\r\n    newLow = a[0] * twoToN;\r\n    diff = newLow - newLow % __4294967296;\r\n    newHigh += diff;\r\n    newLow -= diff;\r\n    if (newHigh >= 9223372036854775807) {\r\n        newHigh -= 1.8446744073709552E19;\r\n    }\r\n    return [newLow, newHigh];\r\n}\r\n\r\nfunction shr(a, n) {\r\n    var shiftFact;\r\n    n &= 63;\r\n    shiftFact = pwrAsDouble(n);\r\n    return create(Math.floor(a[0] / shiftFact), a[1] / shiftFact);\r\n}\r\n\r\nfunction shru(a, n) {\r\n    var sr;\r\n    n &= 63;\r\n    sr = shr(a, n);\r\n    if (a[1] < 0) {\r\n        sr = add(sr, shl([2, 0], 63 - n));\r\n    }\r\n    return sr;\r\n}\r\n\r\n/** ce */\r\n\r\nfunction sub(a, b) {\r\n    return create(a[0] - b[0], a[1] - b[1]);\r\n}\r\n\r\nfunction $ByteArrayInputStream(this$static, buf) {\r\n    this$static.buf = buf;\r\n    this$static.pos = 0;\r\n    this$static.count = buf.length;\r\n    return this$static;\r\n}\r\n\r\n/** ds */\r\nfunction $read(this$static) {\r\n    if (this$static.pos >= this$static.count)\r\n        return -1;\r\n    return this$static.buf[this$static.pos++] & 255;\r\n}\r\n/** de */\r\n/** cs */\r\nfunction $read_0(this$static, buf, off, len) {\r\n    if (this$static.pos >= this$static.count)\r\n        return -1;\r\n    len = Math.min(len, this$static.count - this$static.pos);\r\n    arraycopy(this$static.buf, this$static.pos, buf, off, len);\r\n    this$static.pos += len;\r\n    return len;\r\n}\r\n/** ce */\r\n\r\nfunction $ByteArrayOutputStream(this$static) {\r\n    this$static.buf = initDim(32);\r\n    this$static.count = 0;\r\n    return this$static;\r\n}\r\n\r\nfunction $toByteArray(this$static) {\r\n    var data = this$static.buf;\r\n    data.length = this$static.count;\r\n    return data;\r\n}\r\n\r\n/** cs */\r\nfunction $write(this$static, b) {\r\n    this$static.buf[this$static.count++] = b << 24 >> 24;\r\n}\r\n/** ce */\r\n\r\nfunction $write_0(this$static, buf, off, len) {\r\n    arraycopy(buf, off, this$static.buf, this$static.count, len);\r\n    this$static.count += len;\r\n}\r\n\r\n/** cs */\r\nfunction $getChars(this$static, srcBegin, srcEnd, dst, dstBegin) {\r\n    var srcIdx;\r\n    for (srcIdx = srcBegin; srcIdx < srcEnd; ++srcIdx) {\r\n        dst[dstBegin++] = this$static.charCodeAt(srcIdx);\r\n    }\r\n}\r\n/** ce */\r\n\r\nfunction arraycopy(src, srcOfs, dest, destOfs, len) {\r\n    for (var i = 0; i < len; ++i) {\r\n        dest[destOfs + i] = src[srcOfs + i];\r\n    }\r\n}\r\n\r\n/** cs */\r\nfunction $configure(this$static, encoder) {\r\n    $SetDictionarySize_0(encoder, 1 << this$static.s);\r\n    encoder._numFastBytes = this$static.f;\r\n    $SetMatchFinder(encoder, this$static.m);\r\n    \r\n    /// lc is always 3\r\n    /// lp is always 0\r\n    /// pb is always 2\r\n    encoder._numLiteralPosStateBits = 0;\r\n    encoder._numLiteralContextBits = 3;\r\n    encoder._posStateBits = 2;\r\n    ///this$static._posStateMask = (1 << pb) - 1;\r\n    encoder._posStateMask = 3;\r\n}\r\n\r\nfunction $init(this$static, input, output, length_0, mode) {\r\n    var encoder, i;\r\n    if (compare(length_0, N1_longLit) < 0)\r\n        throw new Error(\"invalid length \" + length_0);\r\n    this$static.length_0 = length_0;\r\n    encoder = $Encoder({});\r\n    $configure(mode, encoder);\r\n    //encoder._writeEndMark = typeof LZMA.disableEndMark == \"undefined\";\r\n    $WriteCoderProperties(encoder, output);\r\n    for (i = 0; i < 64; i += 8)\r\n        $write(output, lowBits_0(shr(length_0, i)) & 255);\r\n    this$static.chunker = (encoder._needReleaseMFStream = 0 , (encoder._inStream = input , encoder._finished = 0 , $Create_2(encoder) , encoder._rangeEncoder.Stream = output , $Init_4(encoder) , $FillDistancesPrices(encoder) , $FillAlignPrices(encoder) , encoder._lenEncoder._tableSize = encoder._numFastBytes + 1 - 2 , $UpdateTables(encoder._lenEncoder, 1 << encoder._posStateBits) , encoder._repMatchLenEncoder._tableSize = encoder._numFastBytes + 1 - 2 , $UpdateTables(encoder._repMatchLenEncoder, 1 << encoder._posStateBits) , encoder.nowPos64 = P0_longLit , undefined) , $Chunker_0({}, encoder));\r\n}\r\n\r\nfunction $LZMAByteArrayCompressor(this$static, data, mode) {\r\n    this$static.output = $ByteArrayOutputStream({});\r\n    $init(this$static, $ByteArrayInputStream({}, data), this$static.output, fromInt(data.length), mode);\r\n    return this$static;\r\n}\r\n/** ce */\r\n\r\n/** ds */\r\nfunction $init_0(this$static, input, output) {\r\n    var decoder,\r\n        hex_length = \"\",\r\n        i,\r\n        properties = [],\r\n        r,\r\n        tmp_length;\r\n    \r\n    for (i = 0; i < 5; ++i) {\r\n        r = $read(input);\r\n        if (r == -1)\r\n            throw new Error(\"truncated input\");\r\n        properties[i] = r << 24 >> 24;\r\n    }\r\n    \r\n    decoder = $Decoder({});\r\n    if (!$SetDecoderProperties(decoder, properties)) {\r\n        throw new Error(\"corrupted input\");\r\n    }\r\n    for (i = 0; i < 64; i += 8) {\r\n        r = $read(input);\r\n        if (r == -1)\r\n            throw new Error(\"truncated input\");\r\n        r = r.toString(16);\r\n        if (r.length == 1) r = \"0\" + r;\r\n        hex_length = r + \"\" + hex_length;\r\n    }\r\n    \r\n    /// Was the length set in the header (if it was compressed from a stream, the length is all f\"s).\r\n    if (/^0+$|^f+$/i.test(hex_length)) {\r\n        /// The length is unknown, so set to -1.\r\n        this$static.length_0 = N1_longLit;\r\n    } else {\r\n        ///NOTE: If there is a problem with the decoder because of the length, you can always set the length to -1 (N1_longLit) which means unknown.\r\n        tmp_length = parseInt(hex_length, 16);\r\n        /// If the length is too long to handle, just set it to unknown.\r\n        if (tmp_length > 4294967295) {\r\n            this$static.length_0 = N1_longLit;\r\n        } else {\r\n            this$static.length_0 = fromInt(tmp_length);\r\n        }\r\n    }\r\n    \r\n    this$static.chunker = $CodeInChunks(decoder, input, output, this$static.length_0);\r\n}\r\n\r\nfunction $LZMAByteArrayDecompressor(this$static, data) {\r\n    this$static.output = $ByteArrayOutputStream({});\r\n    $init_0(this$static, $ByteArrayInputStream({}, data), this$static.output);\r\n    return this$static;\r\n}\r\n/** de */\r\n/** cs */\r\nfunction $Create_4(this$static, keepSizeBefore, keepSizeAfter, keepSizeReserv) {\r\n    var blockSize;\r\n    this$static._keepSizeBefore = keepSizeBefore;\r\n    this$static._keepSizeAfter = keepSizeAfter;\r\n    blockSize = keepSizeBefore + keepSizeAfter + keepSizeReserv;\r\n    if (this$static._bufferBase == null || this$static._blockSize != blockSize) {\r\n        this$static._bufferBase = null;\r\n        this$static._blockSize = blockSize;\r\n        this$static._bufferBase = initDim(this$static._blockSize);\r\n    }\r\n    this$static._pointerToLastSafePosition = this$static._blockSize - keepSizeAfter;\r\n}\r\n\r\nfunction $GetIndexByte(this$static, index) {\r\n    return this$static._bufferBase[this$static._bufferOffset + this$static._pos + index];\r\n}\r\n\r\nfunction $GetMatchLen(this$static, index, distance, limit) {\r\n    var i, pby;\r\n    if (this$static._streamEndWasReached) {\r\n        if (this$static._pos + index + limit > this$static._streamPos) {\r\n            limit = this$static._streamPos - (this$static._pos + index);\r\n        }\r\n    }\r\n    ++distance;\r\n    pby = this$static._bufferOffset + this$static._pos + index;\r\n    for (i = 0; i < limit && this$static._bufferBase[pby + i] == this$static._bufferBase[pby + i - distance]; ++i) {\r\n    }\r\n    return i;\r\n}\r\n\r\nfunction $GetNumAvailableBytes(this$static) {\r\n    return this$static._streamPos - this$static._pos;\r\n}\r\n\r\nfunction $MoveBlock(this$static) {\r\n    var i, numBytes, offset;\r\n    offset = this$static._bufferOffset + this$static._pos - this$static._keepSizeBefore;\r\n    if (offset > 0) {\r\n        --offset;\r\n    }\r\n    numBytes = this$static._bufferOffset + this$static._streamPos - offset;\r\n    for (i = 0; i < numBytes; ++i) {\r\n        this$static._bufferBase[i] = this$static._bufferBase[offset + i];\r\n    }\r\n    this$static._bufferOffset -= offset;\r\n}\r\n\r\nfunction $MovePos_1(this$static) {\r\n    var pointerToPostion;\r\n    this$static._pos += 1;\r\n    if (this$static._pos > this$static._posLimit) {\r\n        pointerToPostion = this$static._bufferOffset + this$static._pos;\r\n        if (pointerToPostion > this$static._pointerToLastSafePosition) {\r\n            $MoveBlock(this$static);\r\n        }\r\n        $ReadBlock(this$static);\r\n    }\r\n}\r\n\r\nfunction $ReadBlock(this$static) {\r\n    var numReadBytes, pointerToPostion, size;\r\n    if (this$static._streamEndWasReached)\r\n        return;\r\n    while (1) {\r\n        size = -this$static._bufferOffset + this$static._blockSize - this$static._streamPos;\r\n        if (!size)\r\n            return;\r\n        numReadBytes = $read_0(this$static._stream, this$static._bufferBase, this$static._bufferOffset + this$static._streamPos, size);\r\n        if (numReadBytes == -1) {\r\n            this$static._posLimit = this$static._streamPos;\r\n            pointerToPostion = this$static._bufferOffset + this$static._posLimit;\r\n            if (pointerToPostion > this$static._pointerToLastSafePosition) {\r\n                this$static._posLimit = this$static._pointerToLastSafePosition - this$static._bufferOffset;\r\n            }\r\n            this$static._streamEndWasReached = 1;\r\n            return;\r\n        }\r\n        this$static._streamPos += numReadBytes;\r\n        if (this$static._streamPos >= this$static._pos + this$static._keepSizeAfter) {\r\n            this$static._posLimit = this$static._streamPos - this$static._keepSizeAfter;\r\n        }\r\n    }\r\n}\r\n\r\nfunction $ReduceOffsets(this$static, subValue) {\r\n    this$static._bufferOffset += subValue;\r\n    this$static._posLimit -= subValue;\r\n    this$static._pos -= subValue;\r\n    this$static._streamPos -= subValue;\r\n}\r\n\r\nvar CrcTable = (function () {\r\n    var i, j, r, CrcTable = [];\r\n    for (i = 0; i < 256; ++i) {\r\n        r = i;\r\n        for (j = 0; j < 8; ++j)\r\n        if ((r & 1) != 0) {\r\n            r >>>= 1;\r\n            r ^= -306674912;\r\n        } else {\r\n            r >>>= 1;\r\n        }\r\n        CrcTable[i] = r;\r\n    }\r\n    return CrcTable;\r\n}());\r\n\r\nfunction $Create_3(this$static, historySize, keepAddBufferBefore, matchMaxLen, keepAddBufferAfter) {\r\n    var cyclicBufferSize, hs, windowReservSize;\r\n    if (historySize < 1073741567) {\r\n        this$static._cutValue = 16 + (matchMaxLen >> 1);\r\n        windowReservSize = ~~((historySize + keepAddBufferBefore + matchMaxLen + keepAddBufferAfter) / 2) + 256;\r\n        $Create_4(this$static, historySize + keepAddBufferBefore, matchMaxLen + keepAddBufferAfter, windowReservSize);\r\n        this$static._matchMaxLen = matchMaxLen;\r\n        cyclicBufferSize = historySize + 1;\r\n        if (this$static._cyclicBufferSize != cyclicBufferSize) {\r\n            this$static._son = initDim((this$static._cyclicBufferSize = cyclicBufferSize) * 2);\r\n        }\r\n\r\n        hs = 65536;\r\n        if (this$static.HASH_ARRAY) {\r\n            hs = historySize - 1;\r\n            hs |= hs >> 1;\r\n            hs |= hs >> 2;\r\n            hs |= hs >> 4;\r\n            hs |= hs >> 8;\r\n            hs >>= 1;\r\n            hs |= 65535;\r\n            if (hs > 16777216)\r\n            hs >>= 1;\r\n            this$static._hashMask = hs;\r\n            hs += 1;\r\n            hs += this$static.kFixHashSize;\r\n        }\r\n        \r\n        if (hs != this$static._hashSizeSum) {\r\n            this$static._hash = initDim(this$static._hashSizeSum = hs);\r\n        }\r\n    }\r\n}\r\n\r\nfunction $GetMatches(this$static, distances) {\r\n    var count, cur, curMatch, curMatch2, curMatch3, cyclicPos, delta, hash2Value, hash3Value, hashValue, len, len0, len1, lenLimit, matchMinPos, maxLen, offset, pby1, ptr0, ptr1, temp;\r\n    if (this$static._pos + this$static._matchMaxLen <= this$static._streamPos) {\r\n        lenLimit = this$static._matchMaxLen;\r\n    } else {\r\n        lenLimit = this$static._streamPos - this$static._pos;\r\n        if (lenLimit < this$static.kMinMatchCheck) {\r\n            $MovePos_0(this$static);\r\n            return 0;\r\n        }\r\n    }\r\n    offset = 0;\r\n    matchMinPos = this$static._pos > this$static._cyclicBufferSize?this$static._pos - this$static._cyclicBufferSize:0;\r\n    cur = this$static._bufferOffset + this$static._pos;\r\n    maxLen = 1;\r\n    hash2Value = 0;\r\n    hash3Value = 0;\r\n    if (this$static.HASH_ARRAY) {\r\n        temp = CrcTable[this$static._bufferBase[cur] & 255] ^ this$static._bufferBase[cur + 1] & 255;\r\n        hash2Value = temp & 1023;\r\n        temp ^= (this$static._bufferBase[cur + 2] & 255) << 8;\r\n        hash3Value = temp & 65535;\r\n        hashValue = (temp ^ CrcTable[this$static._bufferBase[cur + 3] & 255] << 5) & this$static._hashMask;\r\n    } else {\r\n        hashValue = this$static._bufferBase[cur] & 255 ^ (this$static._bufferBase[cur + 1] & 255) << 8;\r\n    }\r\n\r\n    curMatch = this$static._hash[this$static.kFixHashSize + hashValue] || 0;\r\n    if (this$static.HASH_ARRAY) {\r\n        curMatch2 = this$static._hash[hash2Value] || 0;\r\n        curMatch3 = this$static._hash[1024 + hash3Value] || 0;\r\n        this$static._hash[hash2Value] = this$static._pos;\r\n        this$static._hash[1024 + hash3Value] = this$static._pos;\r\n        if (curMatch2 > matchMinPos) {\r\n            if (this$static._bufferBase[this$static._bufferOffset + curMatch2] == this$static._bufferBase[cur]) {\r\n                distances[offset++] = maxLen = 2;\r\n                distances[offset++] = this$static._pos - curMatch2 - 1;\r\n            }\r\n        }\r\n        if (curMatch3 > matchMinPos) {\r\n            if (this$static._bufferBase[this$static._bufferOffset + curMatch3] == this$static._bufferBase[cur]) {\r\n                if (curMatch3 == curMatch2) {\r\n                    offset -= 2;\r\n                }\r\n                distances[offset++] = maxLen = 3;\r\n                distances[offset++] = this$static._pos - curMatch3 - 1;\r\n                curMatch2 = curMatch3;\r\n            }\r\n        }\r\n        if (offset != 0 && curMatch2 == curMatch) {\r\n            offset -= 2;\r\n            maxLen = 1;\r\n        }\r\n    }\r\n    this$static._hash[this$static.kFixHashSize + hashValue] = this$static._pos;\r\n    ptr0 = (this$static._cyclicBufferPos << 1) + 1;\r\n    ptr1 = this$static._cyclicBufferPos << 1;\r\n    len0 = len1 = this$static.kNumHashDirectBytes;\r\n    if (this$static.kNumHashDirectBytes != 0) {\r\n        if (curMatch > matchMinPos) {\r\n            if (this$static._bufferBase[this$static._bufferOffset + curMatch + this$static.kNumHashDirectBytes] != this$static._bufferBase[cur + this$static.kNumHashDirectBytes]) {\r\n                distances[offset++] = maxLen = this$static.kNumHashDirectBytes;\r\n                distances[offset++] = this$static._pos - curMatch - 1;\r\n            }\r\n        }\r\n    }\r\n    count = this$static._cutValue;\r\n    while (1) {\r\n        if (curMatch <= matchMinPos || count == 0) {\r\n            count -= 1;\r\n            this$static._son[ptr0] = this$static._son[ptr1] = 0;\r\n            break;\r\n        }\r\n        delta = this$static._pos - curMatch;\r\n        cyclicPos = (delta <= this$static._cyclicBufferPos?this$static._cyclicBufferPos - delta:this$static._cyclicBufferPos - delta + this$static._cyclicBufferSize) << 1;\r\n        pby1 = this$static._bufferOffset + curMatch;\r\n        len = len0 < len1?len0:len1;\r\n        if (this$static._bufferBase[pby1 + len] == this$static._bufferBase[cur + len]) {\r\n            while ((len += 1) != lenLimit) {\r\n                if (this$static._bufferBase[pby1 + len] != this$static._bufferBase[cur + len]) {\r\n                    break;\r\n                }\r\n            }\r\n            if (maxLen < len) {\r\n                distances[offset++] = maxLen = len;\r\n                distances[offset++] = delta - 1;\r\n                if (len == lenLimit) {\r\n                this$static._son[ptr1] = this$static._son[cyclicPos];\r\n                this$static._son[ptr0] = this$static._son[cyclicPos + 1];\r\n                break;\r\n                }\r\n            }\r\n        }\r\n        if ((this$static._bufferBase[pby1 + len] & 255) < (this$static._bufferBase[cur + len] & 255)) {\r\n            this$static._son[ptr1] = curMatch;\r\n            ptr1 = cyclicPos + 1;\r\n            curMatch = this$static._son[ptr1];\r\n            len1 = len;\r\n        } else {\r\n            this$static._son[ptr0] = curMatch;\r\n            ptr0 = cyclicPos;\r\n            curMatch = this$static._son[ptr0];\r\n            len0 = len;\r\n        }\r\n    }\r\n    $MovePos_0(this$static);\r\n    return offset;\r\n}\r\n\r\nfunction $Init_5(this$static) {\r\n    this$static._bufferOffset = 0;\r\n    this$static._pos = 0;\r\n    this$static._streamPos = 0;\r\n    this$static._streamEndWasReached = 0;\r\n    $ReadBlock(this$static);\r\n    this$static._cyclicBufferPos = 0;\r\n    $ReduceOffsets(this$static, -1);\r\n}\r\n\r\nfunction $MovePos_0(this$static) {\r\n    var subValue;\r\n    if ((this$static._cyclicBufferPos += 1) >= this$static._cyclicBufferSize) {\r\n        this$static._cyclicBufferPos = 0;\r\n    }\r\n    $MovePos_1(this$static);\r\n    if (this$static._pos == 1073741823) {\r\n        subValue = this$static._pos - this$static._cyclicBufferSize;\r\n        $NormalizeLinks(this$static._son, this$static._cyclicBufferSize * 2, subValue);\r\n        $NormalizeLinks(this$static._hash, this$static._hashSizeSum, subValue);\r\n        $ReduceOffsets(this$static, subValue);\r\n    }\r\n}\r\n\r\n///NOTE: This is only called after reading one whole gigabyte.\r\nfunction $NormalizeLinks(items, numItems, subValue) {\r\n    var i, value;\r\n    for (i = 0; i < numItems; ++i) {\r\n        value = items[i] || 0;\r\n        if (value <= subValue) {\r\n            value = 0;\r\n        } else {\r\n            value -= subValue;\r\n        }\r\n        items[i] = value;\r\n    }\r\n}\r\n\r\nfunction $SetType(this$static, numHashBytes) {\r\n    this$static.HASH_ARRAY = numHashBytes > 2;\r\n    if (this$static.HASH_ARRAY) {\r\n        this$static.kNumHashDirectBytes = 0;\r\n        this$static.kMinMatchCheck = 4;\r\n        this$static.kFixHashSize = 66560;\r\n    } else {\r\n        this$static.kNumHashDirectBytes = 2;\r\n        this$static.kMinMatchCheck = 3;\r\n        this$static.kFixHashSize = 0;\r\n    }\r\n}\r\n\r\nfunction $Skip(this$static, num) {\r\n    var count, cur, curMatch, cyclicPos, delta, hash2Value, hash3Value, hashValue, len, len0, len1, lenLimit, matchMinPos, pby1, ptr0, ptr1, temp;\r\n    do {\r\n        if (this$static._pos + this$static._matchMaxLen <= this$static._streamPos) {\r\n            lenLimit = this$static._matchMaxLen;\r\n        } else {\r\n            lenLimit = this$static._streamPos - this$static._pos;\r\n            if (lenLimit < this$static.kMinMatchCheck) {\r\n                $MovePos_0(this$static);\r\n                continue;\r\n            }\r\n        }\r\n        matchMinPos = this$static._pos > this$static._cyclicBufferSize?this$static._pos - this$static._cyclicBufferSize:0;\r\n        cur = this$static._bufferOffset + this$static._pos;\r\n        if (this$static.HASH_ARRAY) {\r\n            temp = CrcTable[this$static._bufferBase[cur] & 255] ^ this$static._bufferBase[cur + 1] & 255;\r\n            hash2Value = temp & 1023;\r\n            this$static._hash[hash2Value] = this$static._pos;\r\n            temp ^= (this$static._bufferBase[cur + 2] & 255) << 8;\r\n            hash3Value = temp & 65535;\r\n            this$static._hash[1024 + hash3Value] = this$static._pos;\r\n            hashValue = (temp ^ CrcTable[this$static._bufferBase[cur + 3] & 255] << 5) & this$static._hashMask;\r\n        } else {\r\n            hashValue = this$static._bufferBase[cur] & 255 ^ (this$static._bufferBase[cur + 1] & 255) << 8;\r\n        }\r\n        curMatch = this$static._hash[this$static.kFixHashSize + hashValue];\r\n        this$static._hash[this$static.kFixHashSize + hashValue] = this$static._pos;\r\n        ptr0 = (this$static._cyclicBufferPos << 1) + 1;\r\n        ptr1 = this$static._cyclicBufferPos << 1;\r\n        len0 = len1 = this$static.kNumHashDirectBytes;\r\n        count = this$static._cutValue;\r\n        while (1) {\r\n            if (curMatch <= matchMinPos || count == 0) {\r\n                count -= 1;\r\n                this$static._son[ptr0] = this$static._son[ptr1] = 0;\r\n                break;\r\n            }\r\n            delta = this$static._pos - curMatch;\r\n            cyclicPos = (delta <= this$static._cyclicBufferPos?this$static._cyclicBufferPos - delta:this$static._cyclicBufferPos - delta + this$static._cyclicBufferSize) << 1;\r\n            pby1 = this$static._bufferOffset + curMatch;\r\n            len = len0 < len1?len0:len1;\r\n            if (this$static._bufferBase[pby1 + len] == this$static._bufferBase[cur + len]) {\r\n                while ((len += 1) != lenLimit) {\r\n                    if (this$static._bufferBase[pby1 + len] != this$static._bufferBase[cur + len]) {\r\n                        break;\r\n                    }\r\n                }\r\n                if (len == lenLimit) {\r\n                    this$static._son[ptr1] = this$static._son[cyclicPos];\r\n                    this$static._son[ptr0] = this$static._son[cyclicPos + 1];\r\n                    break;\r\n                }\r\n            }\r\n            if ((this$static._bufferBase[pby1 + len] & 255) < (this$static._bufferBase[cur + len] & 255)) {\r\n                this$static._son[ptr1] = curMatch;\r\n                ptr1 = cyclicPos + 1;\r\n                curMatch = this$static._son[ptr1];\r\n                len1 = len;\r\n            } else {\r\n                this$static._son[ptr0] = curMatch;\r\n                ptr0 = cyclicPos;\r\n                curMatch = this$static._son[ptr0];\r\n                len0 = len;\r\n            }\r\n        }\r\n        $MovePos_0(this$static);\r\n    }\r\n    while ((num -= 1) != 0);\r\n}\r\n\r\n/** ce */\r\n/** ds */\r\nfunction $CopyBlock(this$static, distance, len) {\r\n    var pos = this$static._pos - distance - 1;\r\n    if (pos < 0) {\r\n        pos += this$static._windowSize;\r\n    }\r\n    for (; len != 0; len -= 1) {\r\n        if (pos >= this$static._windowSize) {\r\n            pos = 0;\r\n        }\r\n        this$static._buffer[this$static._pos] = this$static._buffer[pos];\r\n        this$static._pos += 1;\r\n        pos += 1;\r\n        if (this$static._pos >= this$static._windowSize) {\r\n            $Flush_0(this$static);\r\n        }\r\n    }\r\n}\r\n\r\nfunction $Create_5(this$static, windowSize) {\r\n    if (this$static._buffer == null || this$static._windowSize != windowSize) {\r\n        this$static._buffer = initDim(windowSize);\r\n    }\r\n    this$static._windowSize = windowSize;\r\n    this$static._pos = 0;\r\n    this$static._streamPos = 0;\r\n}\r\n\r\nfunction $Flush_0(this$static) {\r\n    var size = this$static._pos - this$static._streamPos;\r\n    if (!size) {\r\n        return;\r\n    }\r\n    $write_0(this$static._stream, this$static._buffer, this$static._streamPos, size);\r\n    if (this$static._pos >= this$static._windowSize) {\r\n        this$static._pos = 0;\r\n    }\r\n    this$static._streamPos = this$static._pos;\r\n}\r\n\r\nfunction $GetByte(this$static, distance) {\r\n    var pos = this$static._pos - distance - 1;\r\n    if (pos < 0) {\r\n        pos += this$static._windowSize;\r\n    }\r\n    return this$static._buffer[pos];\r\n}\r\n\r\nfunction $PutByte(this$static, b) {\r\n    this$static._buffer[this$static._pos] = b;\r\n    this$static._pos += 1;\r\n    if (this$static._pos >= this$static._windowSize) {\r\n        $Flush_0(this$static);\r\n    }\r\n}\r\n\r\nfunction $ReleaseStream(this$static) {\r\n    $Flush_0(this$static);\r\n    this$static._stream = null;\r\n}\r\n/** de */\r\n\r\nfunction GetLenToPosState(len) {\r\n    len -= 2;\r\n    if (len < 4) {\r\n        return len;\r\n    }\r\n    return 3;\r\n}\r\n\r\nfunction StateUpdateChar(index) {\r\n    if (index < 4) {\r\n        return 0;\r\n    }\r\n    if (index < 10) {\r\n        return index - 3;\r\n    }\r\n    return index - 6;\r\n}\r\n\r\n/** cs */\r\nfunction $Chunker_0(this$static, encoder) {\r\n    this$static.encoder = encoder;\r\n    this$static.decoder = null;\r\n    this$static.alive = 1;\r\n    return this$static;\r\n}\r\n/** ce */\r\n/** ds */\r\nfunction $Chunker(this$static, decoder) {\r\n    this$static.decoder = decoder;\r\n    this$static.encoder = null;\r\n    this$static.alive = 1;\r\n    return this$static;\r\n}\r\n/** de */\r\n\r\n/** ds */\r\nfunction $processChunkDecode(this$static) {\r\n    if (!this$static.alive) {\r\n        throw new Error(\"bad state\");\r\n    }\r\n    \r\n    if (this$static.encoder) {\r\n        throw new Error(\"No encoding\");\r\n    } else {\r\n        $processDecoderChunk(this$static);\r\n    }\r\n    return this$static.alive;\r\n}\r\n\r\nfunction $processDecoderChunk(this$static) {\r\n    var result = $CodeOneChunk(this$static.decoder);\r\n    if (result == -1) {\r\n        throw new Error(\"corrupted input\");\r\n    }\r\n    this$static.inBytesProcessed = N1_longLit;\r\n    this$static.outBytesProcessed = this$static.decoder.nowPos64;\r\n    if (result || compare(this$static.decoder.outSize, P0_longLit) >= 0 && compare(this$static.decoder.nowPos64, this$static.decoder.outSize) >= 0) {\r\n        $Flush_0(this$static.decoder.m_OutWindow);\r\n        $ReleaseStream(this$static.decoder.m_OutWindow);\r\n        this$static.decoder.m_RangeDecoder.Stream = null;\r\n        this$static.alive = 0;\r\n    }\r\n}\r\n/** de */\r\n/** cs */\r\nfunction $processChunkEncode(this$static) {\r\n    if (!this$static.alive) {\r\n        throw new Error(\"bad state\");\r\n    }\r\n    \r\n    if (this$static.encoder) {\r\n        $processEncoderChunk(this$static);\r\n    } else {\r\n        throw new Error(\"No decoding\");\r\n    }\r\n    return this$static.alive;\r\n}\r\n\r\nfunction $processEncoderChunk(this$static) {\r\n    $CodeOneBlock(this$static.encoder, this$static.encoder.processedInSize, this$static.encoder.processedOutSize, this$static.encoder.finished);\r\n    this$static.inBytesProcessed = this$static.encoder.processedInSize[0];\r\n    if (this$static.encoder.finished[0]) {\r\n        $ReleaseStreams(this$static.encoder);\r\n        this$static.alive = 0;\r\n    }\r\n}\r\n/** ce */\r\n\r\n/** ds */\r\nfunction $CodeInChunks(this$static, inStream, outStream, outSize) {\r\n    this$static.m_RangeDecoder.Stream = inStream;\r\n    $ReleaseStream(this$static.m_OutWindow);\r\n    this$static.m_OutWindow._stream = outStream;\r\n    $Init_1(this$static);\r\n    this$static.state = 0;\r\n    this$static.rep0 = 0;\r\n    this$static.rep1 = 0;\r\n    this$static.rep2 = 0;\r\n    this$static.rep3 = 0;\r\n    this$static.outSize = outSize;\r\n    this$static.nowPos64 = P0_longLit;\r\n    this$static.prevByte = 0;\r\n    return $Chunker({}, this$static);\r\n}\r\n\r\nfunction $CodeOneChunk(this$static) {\r\n    var decoder2, distance, len, numDirectBits, posSlot, posState;\r\n    posState = lowBits_0(this$static.nowPos64) & this$static.m_PosStateMask;\r\n    if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsMatchDecoders, (this$static.state << 4) + posState)) {\r\n        decoder2 = $GetDecoder(this$static.m_LiteralDecoder, lowBits_0(this$static.nowPos64), this$static.prevByte);\r\n        if (this$static.state < 7) {\r\n            this$static.prevByte = $DecodeNormal(decoder2, this$static.m_RangeDecoder);\r\n        } else {\r\n            this$static.prevByte = $DecodeWithMatchByte(decoder2, this$static.m_RangeDecoder, $GetByte(this$static.m_OutWindow, this$static.rep0));\r\n        }\r\n        $PutByte(this$static.m_OutWindow, this$static.prevByte);\r\n        this$static.state = StateUpdateChar(this$static.state);\r\n        this$static.nowPos64 = add(this$static.nowPos64, P1_longLit);\r\n    } else {\r\n        if ($DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRepDecoders, this$static.state)) {\r\n            len = 0;\r\n            if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRepG0Decoders, this$static.state)) {\r\n                if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRep0LongDecoders, (this$static.state << 4) + posState)) {\r\n                    this$static.state = this$static.state < 7?9:11;\r\n                    len = 1;\r\n                }\r\n            } else {\r\n                if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRepG1Decoders, this$static.state)) {\r\n                    distance = this$static.rep1;\r\n                } else {\r\n                    if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRepG2Decoders, this$static.state)) {\r\n                        distance = this$static.rep2;\r\n                    } else {\r\n                        distance = this$static.rep3;\r\n                        this$static.rep3 = this$static.rep2;\r\n                    }\r\n                    this$static.rep2 = this$static.rep1;\r\n                }\r\n                this$static.rep1 = this$static.rep0;\r\n                this$static.rep0 = distance;\r\n            }\r\n            if (!len) {\r\n                len = $Decode(this$static.m_RepLenDecoder, this$static.m_RangeDecoder, posState) + 2;\r\n                this$static.state = this$static.state < 7?8:11;\r\n            }\r\n        } else {\r\n            this$static.rep3 = this$static.rep2;\r\n            this$static.rep2 = this$static.rep1;\r\n            this$static.rep1 = this$static.rep0;\r\n            len = 2 + $Decode(this$static.m_LenDecoder, this$static.m_RangeDecoder, posState);\r\n            this$static.state = this$static.state < 7?7:10;\r\n            posSlot = $Decode_0(this$static.m_PosSlotDecoder[GetLenToPosState(len)], this$static.m_RangeDecoder);\r\n            if (posSlot >= 4) {\r\n                numDirectBits = (posSlot >> 1) - 1;\r\n                this$static.rep0 = (2 | posSlot & 1) << numDirectBits;\r\n                if (posSlot < 14) {\r\n                    this$static.rep0 += ReverseDecode(this$static.m_PosDecoders, this$static.rep0 - posSlot - 1, this$static.m_RangeDecoder, numDirectBits);\r\n                } else {\r\n                    this$static.rep0 += $DecodeDirectBits(this$static.m_RangeDecoder, numDirectBits - 4) << 4;\r\n                    this$static.rep0 += $ReverseDecode(this$static.m_PosAlignDecoder, this$static.m_RangeDecoder);\r\n                    if (this$static.rep0 < 0) {\r\n                        if (this$static.rep0 == -1) {\r\n                            return 1;\r\n                        }\r\n                        return -1;\r\n                    }\r\n                }\r\n            } else \r\n                this$static.rep0 = posSlot;\r\n        }\r\n        if (compare(fromInt(this$static.rep0), this$static.nowPos64) >= 0 || this$static.rep0 >= this$static.m_DictionarySizeCheck) {\r\n            return -1;\r\n        }\r\n        $CopyBlock(this$static.m_OutWindow, this$static.rep0, len);\r\n        this$static.nowPos64 = add(this$static.nowPos64, fromInt(len));\r\n        this$static.prevByte = $GetByte(this$static.m_OutWindow, 0);\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction $Decoder(this$static) {\r\n    this$static.m_OutWindow = {};\r\n    this$static.m_RangeDecoder = {};\r\n    this$static.m_IsMatchDecoders = initDim(192);\r\n    this$static.m_IsRepDecoders = initDim(12);\r\n    this$static.m_IsRepG0Decoders = initDim(12);\r\n    this$static.m_IsRepG1Decoders = initDim(12);\r\n    this$static.m_IsRepG2Decoders = initDim(12);\r\n    this$static.m_IsRep0LongDecoders = initDim(192);\r\n    this$static.m_PosSlotDecoder = initDim(4);\r\n    this$static.m_PosDecoders = initDim(114);\r\n    this$static.m_PosAlignDecoder = $BitTreeDecoder({}, 4);\r\n    this$static.m_LenDecoder = $Decoder$LenDecoder({});\r\n    this$static.m_RepLenDecoder = $Decoder$LenDecoder({});\r\n    this$static.m_LiteralDecoder = {};\r\n    for (var i = 0; i < 4; ++i) {\r\n        this$static.m_PosSlotDecoder[i] = $BitTreeDecoder({}, 6);\r\n    }\r\n    return this$static;\r\n}\r\n\r\nfunction $Init_1(this$static) {\r\n    this$static.m_OutWindow._streamPos = 0;\r\n    this$static.m_OutWindow._pos = 0;\r\n    InitBitModels(this$static.m_IsMatchDecoders);\r\n    InitBitModels(this$static.m_IsRep0LongDecoders);\r\n    InitBitModels(this$static.m_IsRepDecoders);\r\n    InitBitModels(this$static.m_IsRepG0Decoders);\r\n    InitBitModels(this$static.m_IsRepG1Decoders);\r\n    InitBitModels(this$static.m_IsRepG2Decoders);\r\n    InitBitModels(this$static.m_PosDecoders);\r\n    $Init_0(this$static.m_LiteralDecoder);\r\n    for (var i = 0; i < 4; ++i) {\r\n        InitBitModels(this$static.m_PosSlotDecoder[i].Models);\r\n    }\r\n    $Init(this$static.m_LenDecoder);\r\n    $Init(this$static.m_RepLenDecoder);\r\n    InitBitModels(this$static.m_PosAlignDecoder.Models);\r\n    $Init_8(this$static.m_RangeDecoder);\r\n}\r\n\r\nfunction $SetDecoderProperties(this$static, properties) {\r\n    var dictionarySize, i, lc, lp, pb, remainder, val;\r\n    if (properties.length < 5)\r\n        return 0;\r\n    val = properties[0] & 255;\r\n    lc = val % 9;\r\n    remainder = ~~(val / 9);\r\n    lp = remainder % 5;\r\n    pb = ~~(remainder / 5);\r\n    dictionarySize = 0;\r\n    for (i = 0; i < 4; ++i) {\r\n        dictionarySize += (properties[1 + i] & 255) << i * 8;\r\n    }\r\n    ///NOTE: If the input is bad, it might call for an insanely large dictionary size, which would crash the script.\r\n    if (dictionarySize > 99999999 || !$SetLcLpPb(this$static, lc, lp, pb)) {\r\n        return 0;\r\n    }\r\n    return $SetDictionarySize(this$static, dictionarySize);\r\n}\r\n\r\nfunction $SetDictionarySize(this$static, dictionarySize) {\r\n    if (dictionarySize < 0) {\r\n        return 0;\r\n    }\r\n    if (this$static.m_DictionarySize != dictionarySize) {\r\n        this$static.m_DictionarySize = dictionarySize;\r\n        this$static.m_DictionarySizeCheck = Math.max(this$static.m_DictionarySize, 1);\r\n        $Create_5(this$static.m_OutWindow, Math.max(this$static.m_DictionarySizeCheck, 4096));\r\n    }\r\n    return 1;\r\n}\r\n\r\nfunction $SetLcLpPb(this$static, lc, lp, pb) {\r\n    if (lc > 8 || lp > 4 || pb > 4) {\r\n        return 0;\r\n    }\r\n    $Create_0(this$static.m_LiteralDecoder, lp, lc);\r\n    var numPosStates = 1 << pb;\r\n    $Create(this$static.m_LenDecoder, numPosStates);\r\n    $Create(this$static.m_RepLenDecoder, numPosStates);\r\n    this$static.m_PosStateMask = numPosStates - 1;\r\n    return 1;\r\n}\r\n\r\nfunction $Create(this$static, numPosStates) {\r\n    for (; this$static.m_NumPosStates < numPosStates; this$static.m_NumPosStates += 1) {\r\n        this$static.m_LowCoder[this$static.m_NumPosStates] = $BitTreeDecoder({}, 3);\r\n        this$static.m_MidCoder[this$static.m_NumPosStates] = $BitTreeDecoder({}, 3);\r\n    }\r\n}\r\n\r\nfunction $Decode(this$static, rangeDecoder, posState) {\r\n    if (!$DecodeBit(rangeDecoder, this$static.m_Choice, 0)) {\r\n        return $Decode_0(this$static.m_LowCoder[posState], rangeDecoder);\r\n    }\r\n    var symbol = 8;\r\n    if (!$DecodeBit(rangeDecoder, this$static.m_Choice, 1)) {\r\n        symbol += $Decode_0(this$static.m_MidCoder[posState], rangeDecoder);\r\n    } else {\r\n        symbol += 8 + $Decode_0(this$static.m_HighCoder, rangeDecoder);\r\n    }\r\n    return symbol;\r\n}\r\n\r\nfunction $Decoder$LenDecoder(this$static) {\r\n    this$static.m_Choice = initDim(2);\r\n    this$static.m_LowCoder = initDim(16);\r\n    this$static.m_MidCoder = initDim(16);\r\n    this$static.m_HighCoder = $BitTreeDecoder({}, 8);\r\n    this$static.m_NumPosStates = 0;\r\n    return this$static;\r\n}\r\n\r\nfunction $Init(this$static) {\r\n    InitBitModels(this$static.m_Choice);\r\n    for (var posState = 0; posState < this$static.m_NumPosStates; ++posState) {\r\n        InitBitModels(this$static.m_LowCoder[posState].Models);\r\n        InitBitModels(this$static.m_MidCoder[posState].Models);\r\n    }\r\n    InitBitModels(this$static.m_HighCoder.Models);\r\n}\r\n\r\n\r\nfunction $Create_0(this$static, numPosBits, numPrevBits) {\r\n    var i, numStates;\r\n    if (this$static.m_Coders != null && this$static.m_NumPrevBits == numPrevBits && this$static.m_NumPosBits == numPosBits)\r\n        return;\r\n    this$static.m_NumPosBits = numPosBits;\r\n    this$static.m_PosMask = (1 << numPosBits) - 1;\r\n    this$static.m_NumPrevBits = numPrevBits;\r\n    numStates = 1 << this$static.m_NumPrevBits + this$static.m_NumPosBits;\r\n    this$static.m_Coders = initDim(numStates);\r\n    for (i = 0; i < numStates; ++i)\r\n        this$static.m_Coders[i] = $Decoder$LiteralDecoder$Decoder2({});\r\n}\r\n\r\nfunction $GetDecoder(this$static, pos, prevByte) {\r\n    return this$static.m_Coders[((pos & this$static.m_PosMask) << this$static.m_NumPrevBits) + ((prevByte & 255) >>> 8 - this$static.m_NumPrevBits)];\r\n}\r\n\r\nfunction $Init_0(this$static) {\r\n    var i, numStates;\r\n    numStates = 1 << this$static.m_NumPrevBits + this$static.m_NumPosBits;\r\n    for (i = 0; i < numStates; ++i) {\r\n        InitBitModels(this$static.m_Coders[i].m_Decoders);\r\n    }\r\n}\r\n\r\n\r\nfunction $DecodeNormal(this$static, rangeDecoder) {\r\n    var symbol = 1;\r\n    do {\r\n        symbol = symbol << 1 | $DecodeBit(rangeDecoder, this$static.m_Decoders, symbol);\r\n    } while (symbol < 256);\r\n    return symbol << 24 >> 24;\r\n}\r\n\r\nfunction $DecodeWithMatchByte(this$static, rangeDecoder, matchByte) {\r\n    var bit, matchBit, symbol = 1;\r\n    do {\r\n        matchBit = matchByte >> 7 & 1;\r\n        matchByte <<= 1;\r\n        bit = $DecodeBit(rangeDecoder, this$static.m_Decoders, (1 + matchBit << 8) + symbol);\r\n        symbol = symbol << 1 | bit;\r\n        if (matchBit != bit) {\r\n            while (symbol < 256) {\r\n                symbol = symbol << 1 | $DecodeBit(rangeDecoder, this$static.m_Decoders, symbol);\r\n            }\r\n        break;\r\n        }\r\n    } while (symbol < 256);\r\n    return symbol << 24 >> 24;\r\n}\r\n\r\nfunction $Decoder$LiteralDecoder$Decoder2(this$static) {\r\n    this$static.m_Decoders = initDim(768);\r\n    return this$static;\r\n}\r\n\r\n/** de */\r\n/** cs */\r\nvar g_FastPos = (function () {\r\n    var j, k, slotFast, c = 2, g_FastPos = [0, 1];\r\n    for (slotFast = 2; slotFast < 22; ++slotFast) {\r\n        //k = 1 << (slotFast >> 1) - 1;\r\n        var s = slotFast;\r\n        s >>= 1;\r\n        s -= 1;\r\n        k = 1;\r\n        k <<= s;\r\n        for (j = 0; j < k; ++j , ++c)\r\n            g_FastPos[c] = slotFast << 24 >> 24;\r\n    }\r\n    return g_FastPos;\r\n}());\r\n\r\nfunction $Backward(this$static, cur) {\r\n    var backCur, backMem, posMem, posPrev;\r\n    this$static._optimumEndIndex = cur;\r\n    posMem = this$static._optimum[cur].PosPrev;\r\n    backMem = this$static._optimum[cur].BackPrev;\r\n    do {\r\n        if (this$static._optimum[cur].Prev1IsChar) {\r\n            $MakeAsChar(this$static._optimum[posMem]);\r\n            this$static._optimum[posMem].PosPrev = posMem - 1;\r\n            if (this$static._optimum[cur].Prev2) {\r\n                this$static._optimum[posMem - 1].Prev1IsChar = 0;\r\n                this$static._optimum[posMem - 1].PosPrev = this$static._optimum[cur].PosPrev2;\r\n                this$static._optimum[posMem - 1].BackPrev = this$static._optimum[cur].BackPrev2;\r\n            }\r\n        }\r\n        posPrev = posMem;\r\n        backCur = backMem;\r\n        backMem = this$static._optimum[posPrev].BackPrev;\r\n        posMem = this$static._optimum[posPrev].PosPrev;\r\n        this$static._optimum[posPrev].BackPrev = backCur;\r\n        this$static._optimum[posPrev].PosPrev = cur;\r\n        cur = posPrev;\r\n    } while (cur > 0);\r\n    this$static.backRes = this$static._optimum[0].BackPrev;\r\n    this$static._optimumCurrentIndex = this$static._optimum[0].PosPrev;\r\n    return this$static._optimumCurrentIndex;\r\n}\r\n\r\nfunction $BaseInit(this$static) {\r\n    this$static._state = 0;\r\n    this$static._previousByte = 0;\r\n    for (var i = 0; i < 4; ++i) {\r\n        this$static._repDistances[i] = 0;\r\n    }\r\n}\r\n\r\nfunction $CodeOneBlock(this$static, inSize, outSize, finished) {\r\n    var baseVal, complexState, curByte, distance, footerBits, i, len, lenToPosState, matchByte, pos, posReduced, posSlot, posState, progressPosValuePrev, subCoder;\r\n    inSize[0] = P0_longLit;\r\n    outSize[0] = P0_longLit;\r\n    finished[0] = 1;\r\n    if (this$static._inStream) {\r\n        this$static._matchFinder._stream = this$static._inStream;\r\n        $Init_5(this$static._matchFinder);\r\n        this$static._needReleaseMFStream = 1;\r\n        this$static._inStream = null;\r\n    }\r\n    if (this$static._finished) {\r\n        return;\r\n    }\r\n    this$static._finished = 1;\r\n    progressPosValuePrev = this$static.nowPos64;\r\n    if (eq(this$static.nowPos64, P0_longLit)) {\r\n        if (!$GetNumAvailableBytes(this$static._matchFinder)) {\r\n            $Flush(this$static, lowBits_0(this$static.nowPos64));\r\n            return;\r\n        }\r\n        $ReadMatchDistances(this$static);\r\n        posState = lowBits_0(this$static.nowPos64) & this$static._posStateMask;\r\n        $Encode_3(this$static._rangeEncoder, this$static._isMatch, (this$static._state << 4) + posState, 0);\r\n        this$static._state = StateUpdateChar(this$static._state);\r\n        curByte = $GetIndexByte(this$static._matchFinder, -this$static._additionalOffset);\r\n        $Encode_1($GetSubCoder(this$static._literalEncoder, lowBits_0(this$static.nowPos64), this$static._previousByte), this$static._rangeEncoder, curByte);\r\n        this$static._previousByte = curByte;\r\n        this$static._additionalOffset -= 1;\r\n        this$static.nowPos64 = add(this$static.nowPos64, P1_longLit);\r\n    }\r\n    if (!$GetNumAvailableBytes(this$static._matchFinder)) {\r\n        $Flush(this$static, lowBits_0(this$static.nowPos64));\r\n        return;\r\n    }\r\n    while (1) {\r\n        len = $GetOptimum(this$static, lowBits_0(this$static.nowPos64));\r\n        pos = this$static.backRes;\r\n        posState = lowBits_0(this$static.nowPos64) & this$static._posStateMask;\r\n        complexState = (this$static._state << 4) + posState;\r\n        if (len == 1 && pos == -1) {\r\n            $Encode_3(this$static._rangeEncoder, this$static._isMatch, complexState, 0);\r\n            curByte = $GetIndexByte(this$static._matchFinder, -this$static._additionalOffset);\r\n            subCoder = $GetSubCoder(this$static._literalEncoder, lowBits_0(this$static.nowPos64), this$static._previousByte);\r\n            if (this$static._state < 7) {\r\n                $Encode_1(subCoder, this$static._rangeEncoder, curByte);\r\n            } else {\r\n                matchByte = $GetIndexByte(this$static._matchFinder, -this$static._repDistances[0] - 1 - this$static._additionalOffset);\r\n                $EncodeMatched(subCoder, this$static._rangeEncoder, matchByte, curByte);\r\n            }\r\n            this$static._previousByte = curByte;\r\n            this$static._state = StateUpdateChar(this$static._state);\r\n        } else {\r\n            $Encode_3(this$static._rangeEncoder, this$static._isMatch, complexState, 1);\r\n            if (pos < 4) {\r\n                $Encode_3(this$static._rangeEncoder, this$static._isRep, this$static._state, 1);\r\n                if (!pos) {\r\n                    $Encode_3(this$static._rangeEncoder, this$static._isRepG0, this$static._state, 0);\r\n                    if (len == 1) {\r\n                        $Encode_3(this$static._rangeEncoder, this$static._isRep0Long, complexState, 0);\r\n                    } else {\r\n                        $Encode_3(this$static._rangeEncoder, this$static._isRep0Long, complexState, 1);\r\n                    }\r\n                } else {\r\n                    $Encode_3(this$static._rangeEncoder, this$static._isRepG0, this$static._state, 1);\r\n                    if (pos == 1) {\r\n                        $Encode_3(this$static._rangeEncoder, this$static._isRepG1, this$static._state, 0);\r\n                    } else {\r\n                        $Encode_3(this$static._rangeEncoder, this$static._isRepG1, this$static._state, 1);\r\n                        $Encode_3(this$static._rangeEncoder, this$static._isRepG2, this$static._state, pos - 2);\r\n                    }\r\n                }\r\n                if (len == 1) {\r\n                    this$static._state = this$static._state < 7?9:11;\r\n                } else {\r\n                    $Encode_0(this$static._repMatchLenEncoder, this$static._rangeEncoder, len - 2, posState);\r\n                    this$static._state = this$static._state < 7?8:11;\r\n                }\r\n                distance = this$static._repDistances[pos];\r\n                if (pos != 0) {\r\n                    for (var i = pos; i >= 1; --i) {\r\n                        this$static._repDistances[i] = this$static._repDistances[i - 1];\r\n                    }\r\n                    this$static._repDistances[0] = distance;\r\n                }\r\n            } else {\r\n                $Encode_3(this$static._rangeEncoder, this$static._isRep, this$static._state, 0);\r\n                this$static._state = this$static._state < 7?7:10;\r\n                $Encode_0(this$static._lenEncoder, this$static._rangeEncoder, len - 2, posState);\r\n                pos -= 4;\r\n                posSlot = GetPosSlot(pos);\r\n                lenToPosState = GetLenToPosState(len);\r\n                $Encode_2(this$static._posSlotEncoder[lenToPosState], this$static._rangeEncoder, posSlot);\r\n                if (posSlot >= 4) {\r\n                    footerBits = (posSlot >> 1) - 1;\r\n                    baseVal = (2 | posSlot & 1) << footerBits;\r\n                    posReduced = pos - baseVal;\r\n                    if (posSlot < 14) {\r\n                        ReverseEncode(this$static._posEncoders, baseVal - posSlot - 1, this$static._rangeEncoder, footerBits, posReduced);\r\n                    } else {\r\n                        $EncodeDirectBits(this$static._rangeEncoder, posReduced >> 4, footerBits - 4);\r\n                        $ReverseEncode(this$static._posAlignEncoder, this$static._rangeEncoder, posReduced & 15);\r\n                        this$static._alignPriceCount += 1;\r\n                    }\r\n                }\r\n                distance = pos;\r\n                for (var i = 3; i >= 1; --i) {\r\n                    this$static._repDistances[i] = this$static._repDistances[i - 1];\r\n                }\r\n                this$static._repDistances[0] = distance;\r\n                this$static._matchPriceCount += 1;\r\n            }\r\n            this$static._previousByte = $GetIndexByte(this$static._matchFinder, len - 1 - this$static._additionalOffset);\r\n        }\r\n        this$static._additionalOffset -= len;\r\n        this$static.nowPos64 = add(this$static.nowPos64, fromInt(len));\r\n        if (!this$static._additionalOffset) {\r\n            if (this$static._matchPriceCount >= 128) {\r\n                $FillDistancesPrices(this$static);\r\n            }\r\n            if (this$static._alignPriceCount >= 16) {\r\n                $FillAlignPrices(this$static);\r\n            }\r\n            inSize[0] = this$static.nowPos64;\r\n            outSize[0] = $GetProcessedSizeAdd(this$static._rangeEncoder);\r\n            if (!$GetNumAvailableBytes(this$static._matchFinder)) {\r\n                $Flush(this$static, lowBits_0(this$static.nowPos64));\r\n                return;\r\n            }\r\n            if (compare(sub(this$static.nowPos64, progressPosValuePrev), [4096, 0]) >= 0) {\r\n                this$static._finished = 0;\r\n                finished[0] = 0;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction $Create_2(this$static) {\r\n    var bt, numHashBytes;\r\n    if (!this$static._matchFinder) {\r\n        bt = {};\r\n        numHashBytes = 4;\r\n        if (!this$static._matchFinderType) {\r\n            numHashBytes = 2;\r\n        }\r\n        $SetType(bt, numHashBytes);\r\n        this$static._matchFinder = bt;\r\n    }\r\n    $Create_1(this$static._literalEncoder, this$static._numLiteralPosStateBits, this$static._numLiteralContextBits);\r\n    if (this$static._dictionarySize == this$static._dictionarySizePrev && this$static._numFastBytesPrev == this$static._numFastBytes) {\r\n        return;\r\n    }\r\n    $Create_3(this$static._matchFinder, this$static._dictionarySize, 4096, this$static._numFastBytes, 274);\r\n    this$static._dictionarySizePrev = this$static._dictionarySize;\r\n    this$static._numFastBytesPrev = this$static._numFastBytes;\r\n}\r\n\r\nfunction $Encoder(this$static) {\r\n    var i;\r\n    this$static._repDistances = initDim(4);\r\n    this$static._optimum = [];\r\n    this$static._rangeEncoder = {};\r\n    this$static._isMatch = initDim(192);\r\n    this$static._isRep = initDim(12);\r\n    this$static._isRepG0 = initDim(12);\r\n    this$static._isRepG1 = initDim(12);\r\n    this$static._isRepG2 = initDim(12);\r\n    this$static._isRep0Long = initDim(192);\r\n    this$static._posSlotEncoder = [];\r\n    this$static._posEncoders = initDim(114);\r\n    this$static._posAlignEncoder = $BitTreeEncoder({}, 4);\r\n    this$static._lenEncoder = $Encoder$LenPriceTableEncoder({});\r\n    this$static._repMatchLenEncoder = $Encoder$LenPriceTableEncoder({});\r\n    this$static._literalEncoder = {};\r\n    this$static._matchDistances = [];\r\n    this$static._posSlotPrices = [];\r\n    this$static._distancesPrices = [];\r\n    this$static._alignPrices = initDim(16);\r\n    this$static.reps = initDim(4);\r\n    this$static.repLens = initDim(4);\r\n    this$static.processedInSize = [P0_longLit];\r\n    this$static.processedOutSize = [P0_longLit];\r\n    this$static.finished = [0];\r\n    this$static.properties = initDim(5);\r\n    this$static.tempPrices = initDim(128);\r\n    this$static._longestMatchLength = 0;\r\n    this$static._matchFinderType = 1;\r\n    this$static._numDistancePairs = 0;\r\n    this$static._numFastBytesPrev = -1;\r\n    this$static.backRes = 0;\r\n    for (i = 0; i < 4096; ++i) {\r\n        this$static._optimum[i] = {};\r\n    }\r\n    for (i = 0; i < 4; ++i) {\r\n        this$static._posSlotEncoder[i] = $BitTreeEncoder({}, 6);\r\n    }\r\n    return this$static;\r\n}\r\n\r\nfunction $FillAlignPrices(this$static) {\r\n    for (var i = 0; i < 16; ++i) {\r\n        this$static._alignPrices[i] = $ReverseGetPrice(this$static._posAlignEncoder, i);\r\n    }\r\n    this$static._alignPriceCount = 0;\r\n}\r\n\r\nfunction $FillDistancesPrices(this$static) {\r\n    var baseVal, encoder, footerBits, i, lenToPosState, posSlot, st, st2;\r\n    for (i = 4; i < 128; ++i) {\r\n        posSlot = GetPosSlot(i);\r\n        footerBits = (posSlot >> 1) - 1;\r\n        baseVal = (2 | posSlot & 1) << footerBits;\r\n        this$static.tempPrices[i] = ReverseGetPrice(this$static._posEncoders, baseVal - posSlot - 1, footerBits, i - baseVal);\r\n    }\r\n    for (lenToPosState = 0; lenToPosState < 4; ++lenToPosState) {\r\n        encoder = this$static._posSlotEncoder[lenToPosState];\r\n        st = lenToPosState << 6;\r\n        for (posSlot = 0; posSlot < this$static._distTableSize; posSlot += 1) {\r\n            this$static._posSlotPrices[st + posSlot] = $GetPrice_1(encoder, posSlot);\r\n        }\r\n        for (posSlot = 14; posSlot < this$static._distTableSize; posSlot += 1) {\r\n            this$static._posSlotPrices[st + posSlot] += (posSlot >> 1) - 1 - 4 << 6;\r\n        }\r\n        st2 = lenToPosState * 128;\r\n        for (i = 0; i < 4; ++i) {\r\n            this$static._distancesPrices[st2 + i] = this$static._posSlotPrices[st + i];\r\n        }\r\n        for (; i < 128; ++i) {\r\n            this$static._distancesPrices[st2 + i] = this$static._posSlotPrices[st + GetPosSlot(i)] + this$static.tempPrices[i];\r\n        }\r\n    }\r\n    this$static._matchPriceCount = 0;\r\n}\r\n\r\nfunction $Flush(this$static, nowPos) {\r\n    $ReleaseMFStream(this$static);\r\n    $WriteEndMarker(this$static, nowPos & this$static._posStateMask);\r\n    for (var i = 0; i < 5; ++i) {\r\n        $ShiftLow(this$static._rangeEncoder);\r\n    }\r\n}\r\n\r\nfunction $GetOptimum(this$static, position) {\r\n    var cur, curAnd1Price, curAndLenCharPrice, curAndLenPrice, curBack, curPrice, currentByte, distance, i, len, lenEnd, lenMain, lenRes, lenTest, lenTest2, lenTestTemp, matchByte, matchPrice, newLen, nextIsChar, nextMatchPrice, nextOptimum, nextRepMatchPrice, normalMatchPrice, numAvailableBytes, numAvailableBytesFull, numDistancePairs, offs, offset, opt, optimum, pos, posPrev, posState, posStateNext, price_4, repIndex, repLen, repMatchPrice, repMaxIndex, shortRepPrice, startLen, state, state2, t, price, price_0, price_1, price_2, price_3;\r\n    if (this$static._optimumEndIndex != this$static._optimumCurrentIndex) {\r\n        lenRes = this$static._optimum[this$static._optimumCurrentIndex].PosPrev - this$static._optimumCurrentIndex;\r\n        this$static.backRes = this$static._optimum[this$static._optimumCurrentIndex].BackPrev;\r\n        this$static._optimumCurrentIndex = this$static._optimum[this$static._optimumCurrentIndex].PosPrev;\r\n        return lenRes;\r\n    }\r\n    this$static._optimumCurrentIndex = this$static._optimumEndIndex = 0;\r\n    if (this$static._longestMatchWasFound) {\r\n        lenMain = this$static._longestMatchLength;\r\n        this$static._longestMatchWasFound = 0;\r\n    } else {\r\n        lenMain = $ReadMatchDistances(this$static);\r\n    }\r\n    numDistancePairs = this$static._numDistancePairs;\r\n    numAvailableBytes = $GetNumAvailableBytes(this$static._matchFinder) + 1;\r\n    if (numAvailableBytes < 2) {\r\n        this$static.backRes = -1;\r\n        return 1;\r\n    }\r\n    if (numAvailableBytes > 273) {\r\n        numAvailableBytes = 273;\r\n    }\r\n    repMaxIndex = 0;\r\n    for (i = 0; i < 4; ++i) {\r\n        this$static.reps[i] = this$static._repDistances[i];\r\n        this$static.repLens[i] = $GetMatchLen(this$static._matchFinder, -1, this$static.reps[i], 273);\r\n        if (this$static.repLens[i] > this$static.repLens[repMaxIndex]) {\r\n            repMaxIndex = i;\r\n        }\r\n    }\r\n    if (this$static.repLens[repMaxIndex] >= this$static._numFastBytes) {\r\n        this$static.backRes = repMaxIndex;\r\n        lenRes = this$static.repLens[repMaxIndex];\r\n        $MovePos(this$static, lenRes - 1);\r\n        return lenRes;\r\n    }\r\n    if (lenMain >= this$static._numFastBytes) {\r\n        this$static.backRes = this$static._matchDistances[numDistancePairs - 1] + 4;\r\n        $MovePos(this$static, lenMain - 1);\r\n        return lenMain;\r\n    }\r\n    currentByte = $GetIndexByte(this$static._matchFinder, -1);\r\n    matchByte = $GetIndexByte(this$static._matchFinder, -this$static._repDistances[0] - 1 - 1);\r\n    if (lenMain < 2 && currentByte != matchByte && this$static.repLens[repMaxIndex] < 2) {\r\n        this$static.backRes = -1;\r\n        return 1;\r\n    }\r\n    this$static._optimum[0].State = this$static._state;\r\n    posState = position & this$static._posStateMask;\r\n    this$static._optimum[1].Price = ProbPrices[this$static._isMatch[(this$static._state << 4) + posState] >>> 2] + $GetPrice_0($GetSubCoder(this$static._literalEncoder, position, this$static._previousByte), this$static._state >= 7, matchByte, currentByte);\r\n    $MakeAsChar(this$static._optimum[1]);\r\n    matchPrice = ProbPrices[2048 - this$static._isMatch[(this$static._state << 4) + posState] >>> 2];\r\n    repMatchPrice = matchPrice + ProbPrices[2048 - this$static._isRep[this$static._state] >>> 2];\r\n    if (matchByte == currentByte) {\r\n        shortRepPrice = repMatchPrice + $GetRepLen1Price(this$static, this$static._state, posState);\r\n        if (shortRepPrice < this$static._optimum[1].Price) {\r\n            this$static._optimum[1].Price = shortRepPrice;\r\n            $MakeAsShortRep(this$static._optimum[1]);\r\n        }\r\n    }\r\n    lenEnd = lenMain >= this$static.repLens[repMaxIndex]?lenMain:this$static.repLens[repMaxIndex];\r\n    if (lenEnd < 2) {\r\n        this$static.backRes = this$static._optimum[1].BackPrev;\r\n        return 1;\r\n    }\r\n    this$static._optimum[1].PosPrev = 0;\r\n    this$static._optimum[0].Backs0 = this$static.reps[0];\r\n    this$static._optimum[0].Backs1 = this$static.reps[1];\r\n    this$static._optimum[0].Backs2 = this$static.reps[2];\r\n    this$static._optimum[0].Backs3 = this$static.reps[3];\r\n    len = lenEnd;\r\n    do {\r\n        this$static._optimum[len].Price = 268435455;\r\n        len -= 1;\r\n    } while (len >= 2);\r\n    for (i = 0; i < 4; ++i) {\r\n        repLen = this$static.repLens[i];\r\n        if (repLen < 2) {\r\n            continue;\r\n        }\r\n        price_4 = repMatchPrice + $GetPureRepPrice(this$static, i, this$static._state, posState);\r\n        do {\r\n            curAndLenPrice = price_4 + $GetPrice(this$static._repMatchLenEncoder, repLen - 2, posState);\r\n            optimum = this$static._optimum[repLen];\r\n            if (curAndLenPrice < optimum.Price) {\r\n                optimum.Price = curAndLenPrice;\r\n                optimum.PosPrev = 0;\r\n                optimum.BackPrev = i;\r\n                optimum.Prev1IsChar = 0;\r\n            }\r\n        } while ((repLen -= 1) >= 2);\r\n    }\r\n    normalMatchPrice = matchPrice + ProbPrices[this$static._isRep[this$static._state] >>> 2];\r\n    len = this$static.repLens[0] >= 2?this$static.repLens[0] + 1:2;\r\n    if (len <= lenMain) {\r\n        offs = 0;\r\n        while (len > this$static._matchDistances[offs]) {\r\n            offs += 2;\r\n        }\r\n        for (;; len += 1) {\r\n            distance = this$static._matchDistances[offs + 1];\r\n            curAndLenPrice = normalMatchPrice + $GetPosLenPrice(this$static, distance, len, posState);\r\n            optimum = this$static._optimum[len];\r\n            if (curAndLenPrice < optimum.Price) {\r\n                optimum.Price = curAndLenPrice;\r\n                optimum.PosPrev = 0;\r\n                optimum.BackPrev = distance + 4;\r\n                optimum.Prev1IsChar = 0;\r\n            }\r\n            if (len == this$static._matchDistances[offs]) {\r\n                offs += 2;\r\n                if (offs == numDistancePairs) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    cur = 0;\r\n    while (1) {\r\n        ++cur;\r\n        if (cur == lenEnd) {\r\n            return $Backward(this$static, cur);\r\n        }\r\n        newLen = $ReadMatchDistances(this$static);\r\n        numDistancePairs = this$static._numDistancePairs;\r\n        if (newLen >= this$static._numFastBytes) {\r\n            this$static._longestMatchLength = newLen;\r\n            this$static._longestMatchWasFound = 1;\r\n            return $Backward(this$static, cur);\r\n        }\r\n        position += 1;\r\n        posPrev = this$static._optimum[cur].PosPrev;\r\n        if (this$static._optimum[cur].Prev1IsChar) {\r\n            posPrev -= 1;\r\n            if (this$static._optimum[cur].Prev2) {\r\n                state = this$static._optimum[this$static._optimum[cur].PosPrev2].State;\r\n                if (this$static._optimum[cur].BackPrev2 < 4) {\r\n                    state = (state < 7) ? 8 : 11;\r\n                } else {\r\n                    state = (state < 7) ? 7 : 10;\r\n                }\r\n            } else {\r\n                state = this$static._optimum[posPrev].State;\r\n            }\r\n            state = StateUpdateChar(state);\r\n        } else {\r\n            state = this$static._optimum[posPrev].State;\r\n        }\r\n        if (posPrev == cur - 1) {\r\n            if (!this$static._optimum[cur].BackPrev) {\r\n                state = state < 7?9:11;\r\n            } else {\r\n                state = StateUpdateChar(state);\r\n            }\r\n        } else {\r\n            if (this$static._optimum[cur].Prev1IsChar && this$static._optimum[cur].Prev2) {\r\n                posPrev = this$static._optimum[cur].PosPrev2;\r\n                pos = this$static._optimum[cur].BackPrev2;\r\n                state = state < 7?8:11;\r\n            } else {\r\n                pos = this$static._optimum[cur].BackPrev;\r\n                if (pos < 4) {\r\n                    state = state < 7?8:11;\r\n                } else {\r\n                    state = state < 7?7:10;\r\n                }\r\n            }\r\n            opt = this$static._optimum[posPrev];\r\n            if (pos < 4) {\r\n                if (!pos) {\r\n                    this$static.reps[0] = opt.Backs0;\r\n                    this$static.reps[1] = opt.Backs1;\r\n                    this$static.reps[2] = opt.Backs2;\r\n                    this$static.reps[3] = opt.Backs3;\r\n                } else if (pos == 1) {\r\n                    this$static.reps[0] = opt.Backs1;\r\n                    this$static.reps[1] = opt.Backs0;\r\n                    this$static.reps[2] = opt.Backs2;\r\n                    this$static.reps[3] = opt.Backs3;\r\n                } else if (pos == 2) {\r\n                    this$static.reps[0] = opt.Backs2;\r\n                    this$static.reps[1] = opt.Backs0;\r\n                    this$static.reps[2] = opt.Backs1;\r\n                    this$static.reps[3] = opt.Backs3;\r\n                } else {\r\n                    this$static.reps[0] = opt.Backs3;\r\n                    this$static.reps[1] = opt.Backs0;\r\n                    this$static.reps[2] = opt.Backs1;\r\n                    this$static.reps[3] = opt.Backs2;\r\n                }\r\n            } else {\r\n                this$static.reps[0] = pos - 4;\r\n                this$static.reps[1] = opt.Backs0;\r\n                this$static.reps[2] = opt.Backs1;\r\n                this$static.reps[3] = opt.Backs2;\r\n            }\r\n        }\r\n        this$static._optimum[cur].State = state;\r\n        this$static._optimum[cur].Backs0 = this$static.reps[0];\r\n        this$static._optimum[cur].Backs1 = this$static.reps[1];\r\n        this$static._optimum[cur].Backs2 = this$static.reps[2];\r\n        this$static._optimum[cur].Backs3 = this$static.reps[3];\r\n        curPrice = this$static._optimum[cur].Price;\r\n        currentByte = $GetIndexByte(this$static._matchFinder, -1);\r\n        matchByte = $GetIndexByte(this$static._matchFinder, -this$static.reps[0] - 1 - 1);\r\n        posState = position & this$static._posStateMask;\r\n        curAnd1Price = curPrice + ProbPrices[this$static._isMatch[(state << 4) + posState] >>> 2] + $GetPrice_0($GetSubCoder(this$static._literalEncoder, position, $GetIndexByte(this$static._matchFinder, -2)), state >= 7, matchByte, currentByte);\r\n        nextOptimum = this$static._optimum[cur + 1];\r\n        nextIsChar = 0;\r\n        if (curAnd1Price < nextOptimum.Price) {\r\n            nextOptimum.Price = curAnd1Price;\r\n            nextOptimum.PosPrev = cur;\r\n            nextOptimum.BackPrev = -1;\r\n            nextOptimum.Prev1IsChar = 0;\r\n            nextIsChar = 1;\r\n        }\r\n        matchPrice = curPrice + ProbPrices[2048 - this$static._isMatch[(state << 4) + posState] >>> 2];\r\n        repMatchPrice = matchPrice + ProbPrices[2048 - this$static._isRep[state] >>> 2];\r\n        if (matchByte == currentByte && !(nextOptimum.PosPrev < cur && !nextOptimum.BackPrev)) {\r\n            shortRepPrice = repMatchPrice + (ProbPrices[this$static._isRepG0[state] >>> 2] + ProbPrices[this$static._isRep0Long[(state << 4) + posState] >>> 2]);\r\n            if (shortRepPrice <= nextOptimum.Price) {\r\n                nextOptimum.Price = shortRepPrice;\r\n                nextOptimum.PosPrev = cur;\r\n                nextOptimum.BackPrev = 0;\r\n                nextOptimum.Prev1IsChar = 0;\r\n                nextIsChar = 1;\r\n            }\r\n        }\r\n        numAvailableBytesFull = $GetNumAvailableBytes(this$static._matchFinder) + 1;\r\n        numAvailableBytesFull = 4095 - cur < numAvailableBytesFull?4095 - cur:numAvailableBytesFull;\r\n        numAvailableBytes = numAvailableBytesFull;\r\n        if (numAvailableBytes < 2) {\r\n            continue;\r\n        }\r\n        if (numAvailableBytes > this$static._numFastBytes) {\r\n            numAvailableBytes = this$static._numFastBytes;\r\n        }\r\n        if (!nextIsChar && matchByte != currentByte) {\r\n            t = Math.min(numAvailableBytesFull - 1, this$static._numFastBytes);\r\n            lenTest2 = $GetMatchLen(this$static._matchFinder, 0, this$static.reps[0], t);\r\n            if (lenTest2 >= 2) {\r\n                state2 = StateUpdateChar(state);\r\n                posStateNext = position + 1 & this$static._posStateMask;\r\n                nextRepMatchPrice = curAnd1Price + ProbPrices[2048 - this$static._isMatch[(state2 << 4) + posStateNext] >>> 2] + ProbPrices[2048 - this$static._isRep[state2] >>> 2];\r\n                offset = cur + 1 + lenTest2;\r\n                while (lenEnd < offset) {\r\n                    this$static._optimum[lenEnd += 1].Price = 268435455;\r\n                }\r\n                curAndLenPrice = nextRepMatchPrice + (price = $GetPrice(this$static._repMatchLenEncoder, lenTest2 - 2, posStateNext) , price + $GetPureRepPrice(this$static, 0, state2, posStateNext));\r\n                optimum = this$static._optimum[offset];\r\n                if (curAndLenPrice < optimum.Price) {\r\n                    optimum.Price = curAndLenPrice;\r\n                    optimum.PosPrev = cur + 1;\r\n                    optimum.BackPrev = 0;\r\n                    optimum.Prev1IsChar = 1;\r\n                    optimum.Prev2 = 0;\r\n                }\r\n            }\r\n        }\r\n        startLen = 2;\r\n        for (repIndex = 0; repIndex < 4; ++repIndex) {\r\n            lenTest = $GetMatchLen(this$static._matchFinder, -1, this$static.reps[repIndex], numAvailableBytes);\r\n            if (lenTest < 2) {\r\n                continue;\r\n            }\r\n            lenTestTemp = lenTest;\r\n            do {\r\n                while (lenEnd < cur + lenTest) {\r\n                    this$static._optimum[lenEnd += 1].Price = 268435455;\r\n                }\r\n                curAndLenPrice = repMatchPrice + (price_0 = $GetPrice(this$static._repMatchLenEncoder, lenTest - 2, posState) , price_0 + $GetPureRepPrice(this$static, repIndex, state, posState));\r\n                optimum = this$static._optimum[cur + lenTest];\r\n                if (curAndLenPrice < optimum.Price) {\r\n                    optimum.Price = curAndLenPrice;\r\n                    optimum.PosPrev = cur;\r\n                    optimum.BackPrev = repIndex;\r\n                    optimum.Prev1IsChar = 0;\r\n                }\r\n            } while ((lenTest -= 1) >= 2);\r\n            lenTest = lenTestTemp;\r\n            if (!repIndex) {\r\n                startLen = lenTest + 1;\r\n            }\r\n            if (lenTest < numAvailableBytesFull) {\r\n                t = Math.min(numAvailableBytesFull - 1 - lenTest, this$static._numFastBytes);\r\n                lenTest2 = $GetMatchLen(this$static._matchFinder, lenTest, this$static.reps[repIndex], t);\r\n                if (lenTest2 >= 2) {\r\n                    state2 = state < 7?8:11;\r\n                    posStateNext = position + lenTest & this$static._posStateMask;\r\n                    curAndLenCharPrice = repMatchPrice + (price_1 = $GetPrice(this$static._repMatchLenEncoder, lenTest - 2, posState) , price_1 + $GetPureRepPrice(this$static, repIndex, state, posState)) + ProbPrices[this$static._isMatch[(state2 << 4) + posStateNext] >>> 2] + $GetPrice_0($GetSubCoder(this$static._literalEncoder, position + lenTest, $GetIndexByte(this$static._matchFinder, lenTest - 1 - 1)), 1, $GetIndexByte(this$static._matchFinder, lenTest - 1 - (this$static.reps[repIndex] + 1)), $GetIndexByte(this$static._matchFinder, lenTest - 1));\r\n                    state2 = StateUpdateChar(state2);\r\n                    posStateNext = position + lenTest + 1 & this$static._posStateMask;\r\n                    nextMatchPrice = curAndLenCharPrice + ProbPrices[2048 - this$static._isMatch[(state2 << 4) + posStateNext] >>> 2];\r\n                    nextRepMatchPrice = nextMatchPrice + ProbPrices[2048 - this$static._isRep[state2] >>> 2];\r\n                    offset = lenTest + 1 + lenTest2;\r\n                    while (lenEnd < cur + offset) {\r\n                        this$static._optimum[lenEnd += 1].Price = 268435455;\r\n                    }\r\n                    curAndLenPrice = nextRepMatchPrice + (price_2 = $GetPrice(this$static._repMatchLenEncoder, lenTest2 - 2, posStateNext) , price_2 + $GetPureRepPrice(this$static, 0, state2, posStateNext));\r\n                    optimum = this$static._optimum[cur + offset];\r\n                    if (curAndLenPrice < optimum.Price) {\r\n                        optimum.Price = curAndLenPrice;\r\n                        optimum.PosPrev = cur + lenTest + 1;\r\n                        optimum.BackPrev = 0;\r\n                        optimum.Prev1IsChar = 1;\r\n                        optimum.Prev2 = 1;\r\n                        optimum.PosPrev2 = cur;\r\n                        optimum.BackPrev2 = repIndex;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (newLen > numAvailableBytes) {\r\n            newLen = numAvailableBytes;\r\n            for (numDistancePairs = 0; newLen > this$static._matchDistances[numDistancePairs]; numDistancePairs += 2) {}\r\n            this$static._matchDistances[numDistancePairs] = newLen;\r\n            numDistancePairs += 2;\r\n        }\r\n        if (newLen >= startLen) {\r\n        normalMatchPrice = matchPrice + ProbPrices[this$static._isRep[state] >>> 2];\r\n        while (lenEnd < cur + newLen) {\r\n            this$static._optimum[lenEnd += 1].Price = 268435455;\r\n        }\r\n        offs = 0;\r\n        while (startLen > this$static._matchDistances[offs]) {\r\n            offs += 2;\r\n        }\r\n        for (lenTest = startLen;; lenTest += 1) {\r\n            curBack = this$static._matchDistances[offs + 1];\r\n            curAndLenPrice = normalMatchPrice + $GetPosLenPrice(this$static, curBack, lenTest, posState);\r\n            optimum = this$static._optimum[cur + lenTest];\r\n            if (curAndLenPrice < optimum.Price) {\r\n                optimum.Price = curAndLenPrice;\r\n                optimum.PosPrev = cur;\r\n                optimum.BackPrev = curBack + 4;\r\n                optimum.Prev1IsChar = 0;\r\n            }\r\n            if (lenTest == this$static._matchDistances[offs]) {\r\n                if (lenTest < numAvailableBytesFull) {\r\n                    t = Math.min(numAvailableBytesFull - 1 - lenTest, this$static._numFastBytes);\r\n                    lenTest2 = $GetMatchLen(this$static._matchFinder, lenTest, curBack, t);\r\n                    if (lenTest2 >= 2) {\r\n                        state2 = state < 7?7:10;\r\n                        posStateNext = position + lenTest & this$static._posStateMask;\r\n                        curAndLenCharPrice = curAndLenPrice + ProbPrices[this$static._isMatch[(state2 << 4) + posStateNext] >>> 2] + $GetPrice_0($GetSubCoder(this$static._literalEncoder, position + lenTest, $GetIndexByte(this$static._matchFinder, lenTest - 1 - 1)), 1, $GetIndexByte(this$static._matchFinder, lenTest - (curBack + 1) - 1), $GetIndexByte(this$static._matchFinder, lenTest - 1));\r\n                        state2 = StateUpdateChar(state2);\r\n                        posStateNext = position + lenTest + 1 & this$static._posStateMask;\r\n                        nextMatchPrice = curAndLenCharPrice + ProbPrices[2048 - this$static._isMatch[(state2 << 4) + posStateNext] >>> 2];\r\n                        nextRepMatchPrice = nextMatchPrice + ProbPrices[2048 - this$static._isRep[state2] >>> 2];\r\n                        offset = lenTest + 1 + lenTest2;\r\n                        while (lenEnd < cur + offset) {\r\n                            this$static._optimum[lenEnd += 1].Price = 268435455;\r\n                        }\r\n                        curAndLenPrice = nextRepMatchPrice + (price_3 = $GetPrice(this$static._repMatchLenEncoder, lenTest2 - 2, posStateNext) , price_3 + $GetPureRepPrice(this$static, 0, state2, posStateNext));\r\n                        optimum = this$static._optimum[cur + offset];\r\n                        if (curAndLenPrice < optimum.Price) {\r\n                            optimum.Price = curAndLenPrice;\r\n                            optimum.PosPrev = cur + lenTest + 1;\r\n                            optimum.BackPrev = 0;\r\n                            optimum.Prev1IsChar = 1;\r\n                            optimum.Prev2 = 1;\r\n                            optimum.PosPrev2 = cur;\r\n                            optimum.BackPrev2 = curBack + 4;\r\n                        }\r\n                    }\r\n                }\r\n                offs += 2;\r\n                if (offs == numDistancePairs)\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction $GetPosLenPrice(this$static, pos, len, posState) {\r\n    var price, lenToPosState = GetLenToPosState(len);\r\n    if (pos < 128) {\r\n        price = this$static._distancesPrices[lenToPosState * 128 + pos];\r\n    } else {\r\n        price = this$static._posSlotPrices[(lenToPosState << 6) + GetPosSlot2(pos)] + this$static._alignPrices[pos & 15];\r\n    }\r\n    return price + $GetPrice(this$static._lenEncoder, len - 2, posState);\r\n}\r\n\r\nfunction $GetPureRepPrice(this$static, repIndex, state, posState) {\r\n    var price;\r\n    if (!repIndex) {\r\n        price = ProbPrices[this$static._isRepG0[state] >>> 2];\r\n        price += ProbPrices[2048 - this$static._isRep0Long[(state << 4) + posState] >>> 2];\r\n    } else {\r\n        price = ProbPrices[2048 - this$static._isRepG0[state] >>> 2];\r\n        if (repIndex == 1) {\r\n            price += ProbPrices[this$static._isRepG1[state] >>> 2];\r\n        } else {\r\n            price += ProbPrices[2048 - this$static._isRepG1[state] >>> 2];\r\n            price += GetPrice(this$static._isRepG2[state], repIndex - 2);\r\n        }\r\n    }\r\n    return price;\r\n}\r\n\r\nfunction $GetRepLen1Price(this$static, state, posState) {\r\n    return ProbPrices[this$static._isRepG0[state] >>> 2] + ProbPrices[this$static._isRep0Long[(state << 4) + posState] >>> 2];\r\n}\r\n\r\nfunction $Init_4(this$static) {\r\n    $BaseInit(this$static);\r\n    $Init_9(this$static._rangeEncoder);\r\n    InitBitModels(this$static._isMatch);\r\n    InitBitModels(this$static._isRep0Long);\r\n    InitBitModels(this$static._isRep);\r\n    InitBitModels(this$static._isRepG0);\r\n    InitBitModels(this$static._isRepG1);\r\n    InitBitModels(this$static._isRepG2);\r\n    InitBitModels(this$static._posEncoders);\r\n    $Init_3(this$static._literalEncoder);\r\n    for (var i = 0; i < 4; ++i) {\r\n        InitBitModels(this$static._posSlotEncoder[i].Models);\r\n    }\r\n    $Init_2(this$static._lenEncoder, 1 << this$static._posStateBits);\r\n    $Init_2(this$static._repMatchLenEncoder, 1 << this$static._posStateBits);\r\n    InitBitModels(this$static._posAlignEncoder.Models);\r\n    this$static._longestMatchWasFound = 0;\r\n    this$static._optimumEndIndex = 0;\r\n    this$static._optimumCurrentIndex = 0;\r\n    this$static._additionalOffset = 0;\r\n}\r\n\r\nfunction $MovePos(this$static, num) {\r\n    if (num > 0) {\r\n        $Skip(this$static._matchFinder, num);\r\n        this$static._additionalOffset += num;\r\n    }\r\n}\r\n\r\nfunction $ReadMatchDistances(this$static) {\r\n    var lenRes = 0;\r\n    this$static._numDistancePairs = $GetMatches(this$static._matchFinder, this$static._matchDistances);\r\n    if (this$static._numDistancePairs > 0) {\r\n        lenRes = this$static._matchDistances[this$static._numDistancePairs - 2];\r\n        if (lenRes == this$static._numFastBytes)\r\n        lenRes += $GetMatchLen(this$static._matchFinder, lenRes - 1, this$static._matchDistances[this$static._numDistancePairs - 1], 273 - lenRes);\r\n    }\r\n    this$static._additionalOffset += 1;\r\n    return lenRes;\r\n}\r\n\r\nfunction $ReleaseMFStream(this$static) {\r\n    if (this$static._matchFinder && this$static._needReleaseMFStream) {\r\n        this$static._matchFinder._stream = null;\r\n        this$static._needReleaseMFStream = 0;\r\n    }\r\n}\r\n\r\nfunction $ReleaseStreams(this$static) {\r\n    $ReleaseMFStream(this$static);\r\n    this$static._rangeEncoder.Stream = null;\r\n}\r\n\r\nfunction $SetDictionarySize_0(this$static, dictionarySize) {\r\n    this$static._dictionarySize = dictionarySize;\r\n    for (var dicLogSize = 0; dictionarySize > 1 << dicLogSize; ++dicLogSize) {}\r\n    this$static._distTableSize = dicLogSize * 2;\r\n}\r\n\r\nfunction $SetMatchFinder(this$static, matchFinderIndex) {\r\n    var matchFinderIndexPrev = this$static._matchFinderType;\r\n    this$static._matchFinderType = matchFinderIndex;\r\n    if (this$static._matchFinder && matchFinderIndexPrev != this$static._matchFinderType) {\r\n        this$static._dictionarySizePrev = -1;\r\n        this$static._matchFinder = null;\r\n    }\r\n}\r\n\r\nfunction $WriteCoderProperties(this$static, outStream) {\r\n    this$static.properties[0] = (this$static._posStateBits * 5 + this$static._numLiteralPosStateBits) * 9 + this$static._numLiteralContextBits << 24 >> 24;\r\n    for (var i = 0; i < 4; ++i) {\r\n        this$static.properties[1 + i] = this$static._dictionarySize >> 8 * i << 24 >> 24;\r\n    }\r\n    $write_0(outStream, this$static.properties, 0, 5);\r\n}\r\n\r\nfunction $WriteEndMarker(this$static, posState) {\r\n    //if (!this$static._writeEndMark) {\r\n    //    return;\r\n    //}\r\n    $Encode_3(this$static._rangeEncoder, this$static._isMatch, (this$static._state << 4) + posState, 1);\r\n    $Encode_3(this$static._rangeEncoder, this$static._isRep, this$static._state, 0);\r\n    this$static._state = this$static._state < 7?7:10;\r\n    $Encode_0(this$static._lenEncoder, this$static._rangeEncoder, 0, posState);\r\n    var lenToPosState = GetLenToPosState(2);\r\n    $Encode_2(this$static._posSlotEncoder[lenToPosState], this$static._rangeEncoder, 63);\r\n    $EncodeDirectBits(this$static._rangeEncoder, 67108863, 26);\r\n    $ReverseEncode(this$static._posAlignEncoder, this$static._rangeEncoder, 15);\r\n}\r\n\r\nfunction GetPosSlot(pos) {\r\n    if (pos < 2048) {\r\n        return g_FastPos[pos];\r\n    }\r\n    if (pos < 2097152) {\r\n        return g_FastPos[pos >> 10] + 20;\r\n    }\r\n    return g_FastPos[pos >> 20] + 40;\r\n}\r\n\r\nfunction GetPosSlot2(pos) {\r\n    if (pos < 131072) {\r\n        return g_FastPos[pos >> 6] + 12;\r\n    }\r\n    if (pos < 134217728) {\r\n        return g_FastPos[pos >> 16] + 32;\r\n    }\r\n    return g_FastPos[pos >> 26] + 52;\r\n}\r\n\r\nfunction $Encode(this$static, rangeEncoder, symbol, posState) {\r\n    if (symbol < 8) {\r\n        $Encode_3(rangeEncoder, this$static._choice, 0, 0);\r\n        $Encode_2(this$static._lowCoder[posState], rangeEncoder, symbol);\r\n    } else {\r\n        symbol -= 8;\r\n        $Encode_3(rangeEncoder, this$static._choice, 0, 1);\r\n        if (symbol < 8) {\r\n            $Encode_3(rangeEncoder, this$static._choice, 1, 0);\r\n            $Encode_2(this$static._midCoder[posState], rangeEncoder, symbol);\r\n        } else {\r\n            $Encode_3(rangeEncoder, this$static._choice, 1, 1);\r\n            $Encode_2(this$static._highCoder, rangeEncoder, symbol - 8);\r\n        }\r\n    }\r\n}\r\n\r\nfunction $Encoder$LenEncoder(this$static) {\r\n    this$static._choice = initDim(2);\r\n    this$static._lowCoder = initDim(16);\r\n    this$static._midCoder = initDim(16);\r\n    this$static._highCoder = $BitTreeEncoder({}, 8);\r\n    for (var posState = 0; posState < 16; ++posState) {\r\n        this$static._lowCoder[posState] = $BitTreeEncoder({}, 3);\r\n        this$static._midCoder[posState] = $BitTreeEncoder({}, 3);\r\n    }\r\n    return this$static;\r\n}\r\n\r\nfunction $Init_2(this$static, numPosStates) {\r\n    InitBitModels(this$static._choice);\r\n    for (var posState = 0; posState < numPosStates; ++posState) {\r\n        InitBitModels(this$static._lowCoder[posState].Models);\r\n        InitBitModels(this$static._midCoder[posState].Models);\r\n    }\r\n    InitBitModels(this$static._highCoder.Models);\r\n}\r\n\r\nfunction $SetPrices(this$static, posState, numSymbols, prices, st) {\r\n    var a0, a1, b0, b1, i;\r\n    a0 = ProbPrices[this$static._choice[0] >>> 2];\r\n    a1 = ProbPrices[2048 - this$static._choice[0] >>> 2];\r\n    b0 = a1 + ProbPrices[this$static._choice[1] >>> 2];\r\n    b1 = a1 + ProbPrices[2048 - this$static._choice[1] >>> 2];\r\n    i = 0;\r\n    for (i = 0; i < 8; ++i) {\r\n        if (i >= numSymbols)\r\n        return;\r\n        prices[st + i] = a0 + $GetPrice_1(this$static._lowCoder[posState], i);\r\n    }\r\n    for (; i < 16; ++i) {\r\n        if (i >= numSymbols)\r\n        return;\r\n        prices[st + i] = b0 + $GetPrice_1(this$static._midCoder[posState], i - 8);\r\n    }\r\n    for (; i < numSymbols; ++i) {\r\n        prices[st + i] = b1 + $GetPrice_1(this$static._highCoder, i - 8 - 8);\r\n    }\r\n}\r\n\r\nfunction $Encode_0(this$static, rangeEncoder, symbol, posState) {\r\n    $Encode(this$static, rangeEncoder, symbol, posState);\r\n    if ((this$static._counters[posState] -= 1) == 0) {\r\n        $SetPrices(this$static, posState, this$static._tableSize, this$static._prices, posState * 272);\r\n        this$static._counters[posState] = this$static._tableSize;\r\n    }\r\n}\r\n\r\nfunction $Encoder$LenPriceTableEncoder(this$static) {\r\n    $Encoder$LenEncoder(this$static);\r\n    this$static._prices = [];\r\n    this$static._counters = [];\r\n    return this$static;\r\n}\r\n\r\nfunction $GetPrice(this$static, symbol, posState) {\r\n    return this$static._prices[posState * 272 + symbol];\r\n}\r\n\r\nfunction $UpdateTables(this$static, numPosStates) {\r\n    for (var posState = 0; posState < numPosStates; ++posState) {\r\n        $SetPrices(this$static, posState, this$static._tableSize, this$static._prices, posState * 272);\r\n        this$static._counters[posState] = this$static._tableSize;\r\n    }\r\n}\r\n\r\nfunction $Create_1(this$static, numPosBits, numPrevBits) {\r\n    var i, numStates;\r\n    if (this$static.m_Coders != null && this$static.m_NumPrevBits == numPrevBits && this$static.m_NumPosBits == numPosBits) {\r\n        return;\r\n    }\r\n    this$static.m_NumPosBits = numPosBits;\r\n    this$static.m_PosMask = (1 << numPosBits) - 1;\r\n    this$static.m_NumPrevBits = numPrevBits;\r\n    numStates = 1 << this$static.m_NumPrevBits + this$static.m_NumPosBits;\r\n    this$static.m_Coders = initDim(numStates);\r\n    for (i = 0; i < numStates; ++i) {\r\n        this$static.m_Coders[i] = $Encoder$LiteralEncoder$Encoder2({});\r\n    }\r\n}\r\n\r\nfunction $GetSubCoder(this$static, pos, prevByte) {\r\n    return this$static.m_Coders[((pos & this$static.m_PosMask) << this$static.m_NumPrevBits) + ((prevByte & 255) >>> 8 - this$static.m_NumPrevBits)];\r\n}\r\n\r\nfunction $Init_3(this$static) {\r\n    var i, numStates = 1 << this$static.m_NumPrevBits + this$static.m_NumPosBits;\r\n    for (i = 0; i < numStates; ++i) {\r\n        InitBitModels(this$static.m_Coders[i].m_Encoders);\r\n    }\r\n}\r\n\r\nfunction $Encode_1(this$static, rangeEncoder, symbol) {\r\n    var bit, i, context = 1;\r\n    for (i = 7; i >= 0; --i) {\r\n        bit = symbol >> i & 1;\r\n        $Encode_3(rangeEncoder, this$static.m_Encoders, context, bit);\r\n        context = context << 1 | bit;\r\n    }\r\n}\r\n\r\nfunction $EncodeMatched(this$static, rangeEncoder, matchByte, symbol) {\r\n    var bit, i, matchBit, state, same = 1, context = 1;\r\n    for (i = 7; i >= 0; --i) {\r\n        bit = symbol >> i & 1;\r\n        state = context;\r\n        if (same) {\r\n            matchBit = matchByte >> i & 1;\r\n            state += 1 + matchBit << 8;\r\n            same = matchBit == bit;\r\n        }\r\n        $Encode_3(rangeEncoder, this$static.m_Encoders, state, bit);\r\n        context = context << 1 | bit;\r\n    }\r\n}\r\n\r\nfunction $Encoder$LiteralEncoder$Encoder2(this$static) {\r\n    this$static.m_Encoders = initDim(768);\r\n    return this$static;\r\n}\r\n\r\nfunction $GetPrice_0(this$static, matchMode, matchByte, symbol) {\r\n    var bit, context = 1, i = 7, matchBit, price = 0;\r\n    if (matchMode) {\r\n        for (; i >= 0; --i) {\r\n            matchBit = matchByte >> i & 1;\r\n            bit = symbol >> i & 1;\r\n            price += GetPrice(this$static.m_Encoders[(1 + matchBit << 8) + context], bit);\r\n            context = context << 1 | bit;\r\n            if (matchBit != bit) {\r\n                --i;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    for (; i >= 0; --i) {\r\n        bit = symbol >> i & 1;\r\n        price += GetPrice(this$static.m_Encoders[context], bit);\r\n        context = context << 1 | bit;\r\n    }\r\n    return price;\r\n}\r\n\r\nfunction $MakeAsChar(this$static) {\r\n    this$static.BackPrev = -1;\r\n    this$static.Prev1IsChar = 0;\r\n}\r\n\r\nfunction $MakeAsShortRep(this$static) {\r\n    this$static.BackPrev = 0;\r\n    this$static.Prev1IsChar = 0;\r\n}\r\n/** ce */\r\n/** ds */\r\nfunction $BitTreeDecoder(this$static, numBitLevels) {\r\n    this$static.NumBitLevels = numBitLevels;\r\n    this$static.Models = initDim(1 << numBitLevels);\r\n    return this$static;\r\n}\r\n\r\nfunction $Decode_0(this$static, rangeDecoder) {\r\n    var bitIndex, m = 1;\r\n    for (bitIndex = this$static.NumBitLevels; bitIndex != 0; bitIndex -= 1) {\r\n        m = (m << 1) + $DecodeBit(rangeDecoder, this$static.Models, m);\r\n    }\r\n    return m - (1 << this$static.NumBitLevels);\r\n}\r\n\r\nfunction $ReverseDecode(this$static, rangeDecoder) {\r\n    var bit, bitIndex, m = 1, symbol = 0;\r\n    for (bitIndex = 0; bitIndex < this$static.NumBitLevels; ++bitIndex) {\r\n        bit = $DecodeBit(rangeDecoder, this$static.Models, m);\r\n        m <<= 1;\r\n        m += bit;\r\n        symbol |= bit << bitIndex;\r\n    }\r\n    return symbol;\r\n}\r\n\r\nfunction ReverseDecode(Models, startIndex, rangeDecoder, NumBitLevels) {\r\n    var bit, bitIndex, m = 1, symbol = 0;\r\n    for (bitIndex = 0; bitIndex < NumBitLevels; ++bitIndex) {\r\n        bit = $DecodeBit(rangeDecoder, Models, startIndex + m);\r\n        m <<= 1;\r\n        m += bit;\r\n        symbol |= bit << bitIndex;\r\n    }\r\n    return symbol;\r\n}\r\n/** de */\r\n/** cs */\r\nfunction $BitTreeEncoder(this$static, numBitLevels) {\r\n    this$static.NumBitLevels = numBitLevels;\r\n    this$static.Models = initDim(1 << numBitLevels);\r\n    return this$static;\r\n}\r\n\r\nfunction $Encode_2(this$static, rangeEncoder, symbol) {\r\n    var bit, bitIndex, m = 1;\r\n    for (bitIndex = this$static.NumBitLevels; bitIndex != 0;) {\r\n        bitIndex -= 1;\r\n        bit = symbol >>> bitIndex & 1;\r\n        $Encode_3(rangeEncoder, this$static.Models, m, bit);\r\n        m = m << 1 | bit;\r\n    }\r\n}\r\n\r\nfunction $GetPrice_1(this$static, symbol) {\r\n    var bit, bitIndex, m = 1, price = 0;\r\n    for (bitIndex = this$static.NumBitLevels; bitIndex != 0;) {\r\n        bitIndex -= 1;\r\n        bit = symbol >>> bitIndex & 1;\r\n        price += GetPrice(this$static.Models[m], bit);\r\n        m = (m << 1) + bit;\r\n    }\r\n    return price;\r\n}\r\n\r\nfunction $ReverseEncode(this$static, rangeEncoder, symbol) {\r\n    var bit, i, m = 1;\r\n    for (i = 0; i < this$static.NumBitLevels; ++i) {\r\n        bit = symbol & 1;\r\n        $Encode_3(rangeEncoder, this$static.Models, m, bit);\r\n        m = m << 1 | bit;\r\n        symbol >>= 1;\r\n    }\r\n}\r\n\r\nfunction $ReverseGetPrice(this$static, symbol) {\r\n    var bit, i, m = 1, price = 0;\r\n    for (i = this$static.NumBitLevels; i != 0; i -= 1) {\r\n        bit = symbol & 1;\r\n        symbol >>>= 1;\r\n        price += GetPrice(this$static.Models[m], bit);\r\n        m = m << 1 | bit;\r\n    }\r\n    return price;\r\n}\r\n\r\nfunction ReverseEncode(Models, startIndex, rangeEncoder, NumBitLevels, symbol) {\r\n    var bit, i, m = 1;\r\n    for (i = 0; i < NumBitLevels; ++i) {\r\n        bit = symbol & 1;\r\n        $Encode_3(rangeEncoder, Models, startIndex + m, bit);\r\n        m = m << 1 | bit;\r\n        symbol >>= 1;\r\n    }\r\n}\r\n\r\nfunction ReverseGetPrice(Models, startIndex, NumBitLevels, symbol) {\r\n    var bit, i, m = 1, price = 0;\r\n    for (i = NumBitLevels; i != 0; i -= 1) {\r\n        bit = symbol & 1;\r\n        symbol >>>= 1;\r\n        price += ProbPrices[((Models[startIndex + m] - bit ^ -bit) & 2047) >>> 2];\r\n        m = m << 1 | bit;\r\n    }\r\n    return price;\r\n}\r\n/** ce */\r\n/** ds */\r\nfunction $DecodeBit(this$static, probs, index) {\r\n    var newBound, prob = probs[index];\r\n    newBound = (this$static.Range >>> 11) * prob;\r\n    if ((this$static.Code ^ -2147483648) < (newBound ^ -2147483648)) {\r\n        this$static.Range = newBound;\r\n        probs[index] = prob + (2048 - prob >>> 5) << 16 >> 16;\r\n        if (!(this$static.Range & -16777216)) {\r\n            this$static.Code = this$static.Code << 8 | $read(this$static.Stream);\r\n            this$static.Range <<= 8;\r\n        }\r\n        return 0;\r\n    } else {\r\n        this$static.Range -= newBound;\r\n        this$static.Code -= newBound;\r\n        probs[index] = prob - (prob >>> 5) << 16 >> 16;\r\n        if (!(this$static.Range & -16777216)) {\r\n            this$static.Code = this$static.Code << 8 | $read(this$static.Stream);\r\n            this$static.Range <<= 8;\r\n        }\r\n        return 1;\r\n    }\r\n}\r\n\r\nfunction $DecodeDirectBits(this$static, numTotalBits) {\r\n    var i, t, result = 0;\r\n    for (i = numTotalBits; i != 0; i -= 1) {\r\n        this$static.Range >>>= 1;\r\n        t = this$static.Code - this$static.Range >>> 31;\r\n        this$static.Code -= this$static.Range & t - 1;\r\n        result = result << 1 | 1 - t;\r\n        if (!(this$static.Range & -16777216)) {\r\n            this$static.Code = this$static.Code << 8 | $read(this$static.Stream);\r\n            this$static.Range <<= 8;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction $Init_8(this$static) {\r\n    this$static.Code = 0;\r\n    this$static.Range = -1;\r\n    for (var i = 0; i < 5; ++i) {\r\n        this$static.Code = this$static.Code << 8 | $read(this$static.Stream);\r\n    }\r\n}\r\n/** de */\r\n\r\nfunction InitBitModels(probs) {\r\n    for (var i = probs.length - 1; i >= 0; --i) {\r\n        probs[i] = 1024;\r\n    }\r\n}\r\n/** cs */\r\nvar ProbPrices = (function () {\r\n    var end, i, j, start, ProbPrices = [];\r\n    for (i = 8; i >= 0; --i) {\r\n        start = 1;\r\n        start <<= 9 - i - 1;\r\n        end = 1;\r\n        end <<= 9 - i;\r\n        for (j = start; j < end; ++j) {\r\n            ProbPrices[j] = (i << 6) + (end - j << 6 >>> 9 - i - 1);\r\n        }\r\n    }\r\n    return ProbPrices;\r\n}());\r\n\r\nfunction $Encode_3(this$static, probs, index, symbol) {\r\n    var newBound, prob = probs[index];\r\n    newBound = (this$static.Range >>> 11) * prob;\r\n    if (!symbol) {\r\n        this$static.Range = newBound;\r\n        probs[index] = prob + (2048 - prob >>> 5) << 16 >> 16;\r\n    } else {\r\n        this$static.Low = add(this$static.Low, and(fromInt(newBound), [4294967295, 0]));\r\n        this$static.Range -= newBound;\r\n        probs[index] = prob - (prob >>> 5) << 16 >> 16;\r\n    }\r\n    if (!(this$static.Range & -16777216)) {\r\n        this$static.Range <<= 8;\r\n        $ShiftLow(this$static);\r\n    }\r\n}\r\n\r\nfunction $EncodeDirectBits(this$static, v, numTotalBits) {\r\n    for (var i = numTotalBits - 1; i >= 0; i -= 1) {\r\n        this$static.Range >>>= 1;\r\n        if ((v >>> i & 1) == 1) {\r\n            this$static.Low = add(this$static.Low, fromInt(this$static.Range));\r\n        }\r\n        if (!(this$static.Range & -16777216)) {\r\n            this$static.Range <<= 8;\r\n            $ShiftLow(this$static);\r\n        }\r\n    }\r\n}\r\n\r\nfunction $GetProcessedSizeAdd(this$static) {\r\n    return add(add(fromInt(this$static._cacheSize), this$static._position), [4, 0]);\r\n}\r\n\r\nfunction $Init_9(this$static) {\r\n    this$static._position = P0_longLit;\r\n    this$static.Low = P0_longLit;\r\n    this$static.Range = -1;\r\n    this$static._cacheSize = 1;\r\n    this$static._cache = 0;\r\n}\r\n\r\nfunction $ShiftLow(this$static) {\r\n    var temp, LowHi = lowBits_0(shru(this$static.Low, 32));\r\n    if (LowHi != 0 || compare(this$static.Low, [4278190080, 0]) < 0) {\r\n        this$static._position = add(this$static._position, fromInt(this$static._cacheSize));\r\n        temp = this$static._cache;\r\n        do {\r\n            $write(this$static.Stream, temp + LowHi);\r\n            temp = 255;\r\n        } while ((this$static._cacheSize -= 1) != 0);\r\n        this$static._cache = lowBits_0(this$static.Low) >>> 24;\r\n    }\r\n    this$static._cacheSize += 1;\r\n    this$static.Low = shl(and(this$static.Low, [16777215, 0]), 8);\r\n}\r\n\r\nfunction GetPrice(Prob, symbol) {\r\n    return ProbPrices[((Prob - symbol ^ -symbol) & 2047) >>> 2];\r\n}\r\n\r\n/** ce */\r\n/** ds */\r\nfunction decode(utf) {\r\n    var i = 0, j = 0, x, y, z, l = utf.length, buf = [], charCodes = [];\r\n    for (; i < l; ++i, ++j) {\r\n        x = utf[i] & 255;\r\n        if (!(x & 128)) {\r\n            if (!x) {\r\n                /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\r\n                return utf;\r\n            }\r\n            charCodes[j] = x;\r\n        } else if ((x & 224) == 192) {\r\n            if (i + 1 >= l) {\r\n                /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\r\n                return utf;\r\n            }\r\n            y = utf[++i] & 255;\r\n            if ((y & 192) != 128) {\r\n                /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\r\n                return utf;\r\n            }\r\n            charCodes[j] = ((x & 31) << 6) | (y & 63);\r\n        } else if ((x & 240) == 224) {\r\n            if (i + 2 >= l) {\r\n                /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\r\n                return utf;\r\n            }\r\n            y = utf[++i] & 255;\r\n            if ((y & 192) != 128) {\r\n                /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\r\n                return utf;\r\n            }\r\n            z = utf[++i] & 255;\r\n            if ((z & 192) != 128) {\r\n                /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\r\n                return utf;\r\n            }\r\n            charCodes[j] = ((x & 15) << 12) | ((y & 63) << 6) | (z & 63);\r\n        } else {\r\n            /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\r\n            return utf;\r\n        }\r\n        if (j == 16383) {\r\n            buf.push(String.fromCharCode.apply(String, charCodes));\r\n            j = -1;\r\n        }\r\n    }\r\n    if (j > 0) {\r\n        charCodes.length = j;\r\n        buf.push(String.fromCharCode.apply(String, charCodes));\r\n    }\r\n    return buf.join(\"\");\r\n}\r\n/** de */\r\n/** cs */\r\nfunction encode(s) {\r\n    var ch, chars = [], data, elen = 0, i, l = s.length;\r\n    /// Be able to handle binary arrays and buffers.\r\n    if (typeof s == \"object\") {\r\n        return s;\r\n    } else {\r\n        $getChars(s, 0, l, chars, 0);\r\n    }\r\n    /// Add extra spaces in the array to break up the unicode symbols.\r\n    for (i = 0; i < l; ++i) {\r\n        ch = chars[i];\r\n        if (ch >= 1 && ch <= 127) {\r\n            ++elen;\r\n        } else if (!ch || ch >= 128 && ch <= 2047) {\r\n            elen += 2;\r\n        } else {\r\n            elen += 3;\r\n        }\r\n    }\r\n    data = [];\r\n    elen = 0;\r\n    for (i = 0; i < l; ++i) {\r\n        ch = chars[i];\r\n        if (ch >= 1 && ch <= 127) {\r\n            data[elen++] = ch << 24 >> 24;\r\n        } else if (!ch || ch >= 128 && ch <= 2047) {\r\n            data[elen++] = (192 | ch >> 6 & 31) << 24 >> 24;\r\n            data[elen++] = (128 | ch & 63) << 24 >> 24;\r\n        } else {\r\n            data[elen++] = (224 | ch >> 12 & 15) << 24 >> 24;\r\n            data[elen++] = (128 | ch >> 6 & 63) << 24 >> 24;\r\n            data[elen++] = (128 | ch & 63) << 24 >> 24;\r\n        }\r\n    }\r\n    return data;\r\n}\r\n/** ce */\r\n\r\nfunction toDouble(a) {\r\n    return a[1] + a[0];\r\n}\r\n\r\n/** cs */\r\nexport function compress(str, mode, on_finish, on_progress) {\r\n    var this$static = {},\r\n        percent,\r\n        cbn, /// A callback number should be supplied instead of on_finish() if we are using Web Workers.\r\n        sync = typeof on_finish == \"undefined\" && typeof on_progress == \"undefined\";\r\n    \r\n    if (typeof on_finish != \"function\") {\r\n        cbn = on_finish;\r\n        on_finish = on_progress = 0;\r\n    }\r\n    \r\n    on_progress = on_progress || function(percent) {\r\n        if (typeof cbn == \"undefined\")\r\n            return;\r\n        \r\n        return update_progress(percent, cbn);\r\n    };\r\n    \r\n    on_finish = on_finish || function(res, err) {\r\n        if (typeof cbn == \"undefined\")\r\n            return;\r\n        \r\n        return postMessage({\r\n            \"action\": action_compress,\r\n            \"cbn\": cbn,\r\n            \"result\": res,\r\n            \"error\": err\r\n        });\r\n    };\r\n\r\n    if (sync) {\r\n        this$static.c = $LZMAByteArrayCompressor({}, encode(str), get_mode_obj(mode));\r\n        while ($processChunkEncode(this$static.c.chunker));\r\n        return $toByteArray(this$static.c.output);\r\n    }\r\n    \r\n    try {\r\n        this$static.c = $LZMAByteArrayCompressor({}, encode(str), get_mode_obj(mode));\r\n        \r\n        on_progress(0);\r\n    } catch (err) {\r\n        return on_finish(null, err);\r\n    }\r\n    \r\n    function do_action() {\r\n        try {\r\n            var res, start = (new Date()).getTime();\r\n            \r\n            while ($processChunkEncode(this$static.c.chunker)) {\r\n                percent = toDouble(this$static.c.chunker.inBytesProcessed) / toDouble(this$static.c.length_0);\r\n                /// If about 200 miliseconds have passed, update the progress.\r\n                if ((new Date()).getTime() - start > 200) {\r\n                    on_progress(percent);\r\n                    \r\n                    wait(do_action, 0);\r\n                    return 0;\r\n                }\r\n            }\r\n            \r\n            on_progress(1);\r\n            \r\n            res = $toByteArray(this$static.c.output);\r\n            \r\n            /// delay so we donât catch errors from the on_finish handler\r\n            wait(on_finish.bind(null, res), 0);\r\n        } catch (err) {\r\n            on_finish(null, err);\r\n        }\r\n    }\r\n    \r\n    ///NOTE: We need to wait to make sure it is always async.\r\n    wait(do_action, 0);\r\n}\r\n/** ce */\r\n/** ds */\r\nexport function decompress(byte_arr, on_finish, on_progress) {\r\n    var this$static = {},\r\n        percent,\r\n        cbn, /// A callback number should be supplied instead of on_finish() if we are using Web Workers.\r\n        has_progress,\r\n        len,\r\n        sync = typeof on_finish == \"undefined\" && typeof on_progress == \"undefined\";\r\n\r\n    if (typeof on_finish != \"function\") {\r\n        cbn = on_finish;\r\n        on_finish = on_progress = 0;\r\n    }\r\n    \r\n    on_progress = on_progress || function(percent) {\r\n        if (typeof cbn == \"undefined\")\r\n            return;\r\n        \r\n        return update_progress(has_progress ? percent : -1, cbn);\r\n    };\r\n    \r\n    on_finish = on_finish || function(res, err) {\r\n        if (typeof cbn == \"undefined\")\r\n            return;\r\n        \r\n        return postMessage({\r\n            \"action\": action_decompress,\r\n            \"cbn\": cbn,\r\n            \"result\": res,\r\n            \"error\": err\r\n        });\r\n    };\r\n\r\n    if (sync) {\r\n        this$static.d = $LZMAByteArrayDecompressor({}, byte_arr);\r\n        while ($processChunkDecode(this$static.d.chunker));\r\n        return decode($toByteArray(this$static.d.output));\r\n    }\r\n    \r\n    try {\r\n        this$static.d = $LZMAByteArrayDecompressor({}, byte_arr);\r\n        \r\n        len = toDouble(this$static.d.length_0);\r\n        \r\n        ///NOTE: If the data was created via a stream, it will not have a length value, and therefore we can't calculate the progress.\r\n        has_progress = len > -1;\r\n        \r\n        on_progress(0);\r\n    } catch (err) {\r\n        return on_finish(null, err);\r\n    }\r\n    \r\n    function do_action() {\r\n        try {\r\n            var res, i = 0, start = (new Date()).getTime();\r\n            while ($processChunkDecode(this$static.d.chunker)) {\r\n                if (++i % 1000 == 0 && (new Date()).getTime() - start > 200) {\r\n                    if (has_progress) {\r\n                        percent = toDouble(this$static.d.chunker.decoder.nowPos64) / len;\r\n                        /// If about 200 miliseconds have passed, update the progress.\r\n                        on_progress(percent);\r\n                    }\r\n                    \r\n                    ///NOTE: This allows other code to run, like the browser to update.\r\n                    wait(do_action, 0);\r\n                    return 0;\r\n                }\r\n            }\r\n            \r\n            on_progress(1);\r\n            \r\n            res = decode($toByteArray(this$static.d.output));\r\n            \r\n            /// delay so we donât catch errors from the on_finish handler\r\n            wait(on_finish.bind(null, res), 0);\r\n        } catch (err) {\r\n            on_finish(null, err);\r\n        }\r\n    }\r\n    \r\n    ///NOTE: We need to wait to make sure it is always async.\r\n    wait(do_action, 0);\r\n}\r\n/** de */\r\n/** cs */\r\nvar get_mode_obj = (function () {\r\n    /// s is dictionarySize\r\n    /// f is fb\r\n    /// m is matchFinder\r\n    ///NOTE: Because some values are always the same, they have been removed.\r\n    /// lc is always 3\r\n    /// lp is always 0\r\n    /// pb is always 2\r\n    var modes = [\r\n        {s: 16, f:  64, m: 0},\r\n        {s: 20, f:  64, m: 0},\r\n        {s: 19, f:  64, m: 1},\r\n        {s: 20, f:  64, m: 1},\r\n        {s: 21, f: 128, m: 1},\r\n        {s: 22, f: 128, m: 1},\r\n        {s: 23, f: 128, m: 1},\r\n        {s: 24, f: 255, m: 1},\r\n        {s: 25, f: 255, m: 1}\r\n    ];\r\n    \r\n    return function (mode) {\r\n        return modes[mode - 1] || modes[6];\r\n    };\r\n}());\r\n/** ce */\r\n","import { decompress, action_decompress } from \"./lzma-algo\";\r\n\r\nexport { decompress };\r\n\r\nexport function LZMA() {}\r\nLZMA[\"decompress\"] = decompress;\r\nLZMA.prototype[\"decompress\"] = decompress;\r\n\r\nexport var LZMA_WORKER = LZMA;\r\n\r\nif (typeof self != \"undefined\" && 'importScripts' in self) {\r\n    addEventListener(\"message\", function (e) {\r\n        if (e[\"data\"][\"action\"] == action_decompress) {\r\n            decompress(e[\"data\"][\"data\"], e[\"data\"][\"cbn\"]);\r\n        }\r\n    });\r\n}\r\n"],"names":[],"mappings":"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"}