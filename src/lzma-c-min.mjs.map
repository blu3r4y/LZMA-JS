{"version":3,"file":"lzma-c-min.mjs","sources":["lzma-algo.mjs","lzma-c.mjs"],"sourcesContent":["/// Â© 2015 Nathan Rugg <nmrugg@gmail.com> | MIT\r\n/// See LICENSE for more details.\r\n\r\n/* jshint noarg:true, boss:true, unused:strict, strict:true, undef:true, noarg: true, forin:true, evil:true, newcap:false, -W041, -W021, worker:true, browser:true, node:true */\r\n\r\n/* global setImmediate, setTimeout, window, onmessage */\r\n\r\n/** xs */\r\n///NOTE: This is the master file that is used to generate lzma-c.js and lzma-d.js.\r\n///      Comments are used to determine which parts are to be removed.\r\n///\r\n/// cs-ce (compression start-end)\r\n/// ds-de (decompression start-end)\r\n/// xs-xe (only in this file start-end)\r\n/// co    (compression only)\r\n/// do    (decompression only)\r\n/** xe */\r\n\r\nexport var action_compress = 1;\r\nexport var action_decompress = 2;\r\nexport var action_progress = 3;\r\n\r\nvar wait = typeof setImmediate == \"function\" ? setImmediate : setTimeout,\r\n    __4294967296 = 4294967296,\r\n    N1_longLit = [4294967295, -__4294967296],\r\n    /** cs */\r\n    MIN_VALUE = [0, -9223372036854775808],\r\n    /** ce */\r\n    P0_longLit = [0, 0],\r\n    P1_longLit = [1, 0];\r\n\r\nfunction update_progress(percent, cbn) {\r\n    postMessage({\r\n        \"action\": action_progress,\r\n        \"cbn\": cbn,\r\n        \"result\": percent\r\n    });\r\n}\r\n\r\nfunction initDim(len) {\r\n    ///NOTE: This is MUCH faster than \"new Array(len)\" in newer versions of v8 (starting with Node.js 0.11.15, which uses v8 3.28.73).\r\n    var a = [];\r\n    a[len - 1] = undefined;\r\n    return a;\r\n}\r\n\r\nfunction add(a, b) {\r\n    return create(a[0] + b[0], a[1] + b[1]);\r\n}\r\n\r\n/** cs */\r\nfunction and(a, b) {\r\n    return makeFromBits(~~Math.max(Math.min(a[1] / __4294967296, 2147483647), -2147483648) & ~~Math.max(Math.min(b[1] / __4294967296, 2147483647), -2147483648), lowBits_0(a) & lowBits_0(b));\r\n}\r\n/** ce */\r\n\r\nfunction compare(a, b) {\r\n    var nega, negb;\r\n    if (a[0] == b[0] && a[1] == b[1]) {\r\n        return 0;\r\n    }\r\n    nega = a[1] < 0;\r\n    negb = b[1] < 0;\r\n    if (nega && !negb) {\r\n        return -1;\r\n    }\r\n    if (!nega && negb) {\r\n        return 1;\r\n    }\r\n    if (sub(a, b)[1] < 0) {\r\n        return -1;\r\n    }\r\n    return 1;\r\n}\r\n\r\nfunction create(valueLow, valueHigh) {\r\n    var diffHigh, diffLow;\r\n    valueHigh %= 1.8446744073709552E19;\r\n    valueLow %= 1.8446744073709552E19;\r\n    diffHigh = valueHigh % __4294967296;\r\n    diffLow = Math.floor(valueLow / __4294967296) * __4294967296;\r\n    valueHigh = valueHigh - diffHigh + diffLow;\r\n    valueLow = valueLow - diffLow + diffHigh;\r\n    while (valueLow < 0) {\r\n        valueLow += __4294967296;\r\n        valueHigh -= __4294967296;\r\n    }\r\n    while (valueLow > 4294967295) {\r\n        valueLow -= __4294967296;\r\n        valueHigh += __4294967296;\r\n    }\r\n    valueHigh = valueHigh % 1.8446744073709552E19;\r\n    while (valueHigh > 9223372032559808512) {\r\n        valueHigh -= 1.8446744073709552E19;\r\n    }\r\n    while (valueHigh < -9223372036854775808) {\r\n        valueHigh += 1.8446744073709552E19;\r\n    }\r\n    return [valueLow, valueHigh];\r\n}\r\n\r\n/** cs */\r\nfunction eq(a, b) {\r\n    return a[0] == b[0] && a[1] == b[1];\r\n}\r\n/** ce */\r\nfunction fromInt(value) {\r\n    if (value >= 0) {\r\n        return [value, 0];\r\n    } else {\r\n        return [value + __4294967296, -__4294967296];\r\n    }\r\n}\r\n\r\nfunction lowBits_0(a) {\r\n    if (a[0] >= 2147483648) {\r\n        return ~~Math.max(Math.min(a[0] - __4294967296, 2147483647), -2147483648);\r\n    } else {\r\n        return ~~Math.max(Math.min(a[0], 2147483647), -2147483648);\r\n    }\r\n}\r\n/** cs */\r\nfunction makeFromBits(highBits, lowBits) {\r\n    var high, low;\r\n    high = highBits * __4294967296;\r\n    low = lowBits;\r\n    if (lowBits < 0) {\r\n        low += __4294967296;\r\n    }\r\n    return [low, high];\r\n}\r\n\r\nfunction pwrAsDouble(n) {\r\n    if (n <= 30) {\r\n        return 1 << n;\r\n    } else {\r\n        return pwrAsDouble(30) * pwrAsDouble(n - 30);\r\n    }\r\n}\r\n\r\nfunction shl(a, n) {\r\n    var diff, newHigh, newLow, twoToN;\r\n    n &= 63;\r\n    if (eq(a, MIN_VALUE)) {\r\n        if (!n) {\r\n            return a;\r\n        }\r\n        return P0_longLit;\r\n    }\r\n    if (a[1] < 0) {\r\n        throw new Error(\"Neg\");\r\n    }\r\n    twoToN = pwrAsDouble(n);\r\n    newHigh = a[1] * twoToN % 1.8446744073709552E19;\r\n    newLow = a[0] * twoToN;\r\n    diff = newLow - newLow % __4294967296;\r\n    newHigh += diff;\r\n    newLow -= diff;\r\n    if (newHigh >= 9223372036854775807) {\r\n        newHigh -= 1.8446744073709552E19;\r\n    }\r\n    return [newLow, newHigh];\r\n}\r\n\r\nfunction shr(a, n) {\r\n    var shiftFact;\r\n    n &= 63;\r\n    shiftFact = pwrAsDouble(n);\r\n    return create(Math.floor(a[0] / shiftFact), a[1] / shiftFact);\r\n}\r\n\r\nfunction shru(a, n) {\r\n    var sr;\r\n    n &= 63;\r\n    sr = shr(a, n);\r\n    if (a[1] < 0) {\r\n        sr = add(sr, shl([2, 0], 63 - n));\r\n    }\r\n    return sr;\r\n}\r\n\r\n/** ce */\r\n\r\nfunction sub(a, b) {\r\n    return create(a[0] - b[0], a[1] - b[1]);\r\n}\r\n\r\nfunction $ByteArrayInputStream(this$static, buf) {\r\n    this$static.buf = buf;\r\n    this$static.pos = 0;\r\n    this$static.count = buf.length;\r\n    return this$static;\r\n}\r\n\r\n/** ds */\r\nfunction $read(this$static) {\r\n    if (this$static.pos >= this$static.count)\r\n        return -1;\r\n    return this$static.buf[this$static.pos++] & 255;\r\n}\r\n/** de */\r\n/** cs */\r\nfunction $read_0(this$static, buf, off, len) {\r\n    if (this$static.pos >= this$static.count)\r\n        return -1;\r\n    len = Math.min(len, this$static.count - this$static.pos);\r\n    arraycopy(this$static.buf, this$static.pos, buf, off, len);\r\n    this$static.pos += len;\r\n    return len;\r\n}\r\n/** ce */\r\n\r\nfunction $ByteArrayOutputStream(this$static) {\r\n    this$static.buf = initDim(32);\r\n    this$static.count = 0;\r\n    return this$static;\r\n}\r\n\r\nfunction $toByteArray(this$static) {\r\n    var data = this$static.buf;\r\n    data.length = this$static.count;\r\n    return data;\r\n}\r\n\r\n/** cs */\r\nfunction $write(this$static, b) {\r\n    this$static.buf[this$static.count++] = b << 24 >> 24;\r\n}\r\n/** ce */\r\n\r\nfunction $write_0(this$static, buf, off, len) {\r\n    arraycopy(buf, off, this$static.buf, this$static.count, len);\r\n    this$static.count += len;\r\n}\r\n\r\n/** cs */\r\nfunction $getChars(this$static, srcBegin, srcEnd, dst, dstBegin) {\r\n    var srcIdx;\r\n    for (srcIdx = srcBegin; srcIdx < srcEnd; ++srcIdx) {\r\n        dst[dstBegin++] = this$static.charCodeAt(srcIdx);\r\n    }\r\n}\r\n/** ce */\r\n\r\nfunction arraycopy(src, srcOfs, dest, destOfs, len) {\r\n    for (var i = 0; i < len; ++i) {\r\n        dest[destOfs + i] = src[srcOfs + i];\r\n    }\r\n}\r\n\r\n/** cs */\r\nfunction $configure(this$static, encoder) {\r\n    $SetDictionarySize_0(encoder, 1 << this$static.s);\r\n    encoder._numFastBytes = this$static.f;\r\n    $SetMatchFinder(encoder, this$static.m);\r\n    \r\n    /// lc is always 3\r\n    /// lp is always 0\r\n    /// pb is always 2\r\n    encoder._numLiteralPosStateBits = 0;\r\n    encoder._numLiteralContextBits = 3;\r\n    encoder._posStateBits = 2;\r\n    ///this$static._posStateMask = (1 << pb) - 1;\r\n    encoder._posStateMask = 3;\r\n}\r\n\r\nfunction $init(this$static, input, output, length_0, mode) {\r\n    var encoder, i;\r\n    if (compare(length_0, N1_longLit) < 0)\r\n        throw new Error(\"invalid length \" + length_0);\r\n    this$static.length_0 = length_0;\r\n    encoder = $Encoder({});\r\n    $configure(mode, encoder);\r\n    //encoder._writeEndMark = typeof LZMA.disableEndMark == \"undefined\";\r\n    $WriteCoderProperties(encoder, output);\r\n    for (i = 0; i < 64; i += 8)\r\n        $write(output, lowBits_0(shr(length_0, i)) & 255);\r\n    this$static.chunker = (encoder._needReleaseMFStream = 0 , (encoder._inStream = input , encoder._finished = 0 , $Create_2(encoder) , encoder._rangeEncoder.Stream = output , $Init_4(encoder) , $FillDistancesPrices(encoder) , $FillAlignPrices(encoder) , encoder._lenEncoder._tableSize = encoder._numFastBytes + 1 - 2 , $UpdateTables(encoder._lenEncoder, 1 << encoder._posStateBits) , encoder._repMatchLenEncoder._tableSize = encoder._numFastBytes + 1 - 2 , $UpdateTables(encoder._repMatchLenEncoder, 1 << encoder._posStateBits) , encoder.nowPos64 = P0_longLit , undefined) , $Chunker_0({}, encoder));\r\n}\r\n\r\nfunction $LZMAByteArrayCompressor(this$static, data, mode) {\r\n    this$static.output = $ByteArrayOutputStream({});\r\n    $init(this$static, $ByteArrayInputStream({}, data), this$static.output, fromInt(data.length), mode);\r\n    return this$static;\r\n}\r\n/** ce */\r\n\r\n/** ds */\r\nfunction $init_0(this$static, input, output) {\r\n    var decoder,\r\n        hex_length = \"\",\r\n        i,\r\n        properties = [],\r\n        r,\r\n        tmp_length;\r\n    \r\n    for (i = 0; i < 5; ++i) {\r\n        r = $read(input);\r\n        if (r == -1)\r\n            throw new Error(\"truncated input\");\r\n        properties[i] = r << 24 >> 24;\r\n    }\r\n    \r\n    decoder = $Decoder({});\r\n    if (!$SetDecoderProperties(decoder, properties)) {\r\n        throw new Error(\"corrupted input\");\r\n    }\r\n    for (i = 0; i < 64; i += 8) {\r\n        r = $read(input);\r\n        if (r == -1)\r\n            throw new Error(\"truncated input\");\r\n        r = r.toString(16);\r\n        if (r.length == 1) r = \"0\" + r;\r\n        hex_length = r + \"\" + hex_length;\r\n    }\r\n    \r\n    /// Was the length set in the header (if it was compressed from a stream, the length is all f\"s).\r\n    if (/^0+$|^f+$/i.test(hex_length)) {\r\n        /// The length is unknown, so set to -1.\r\n        this$static.length_0 = N1_longLit;\r\n    } else {\r\n        ///NOTE: If there is a problem with the decoder because of the length, you can always set the length to -1 (N1_longLit) which means unknown.\r\n        tmp_length = parseInt(hex_length, 16);\r\n        /// If the length is too long to handle, just set it to unknown.\r\n        if (tmp_length > 4294967295) {\r\n            this$static.length_0 = N1_longLit;\r\n        } else {\r\n            this$static.length_0 = fromInt(tmp_length);\r\n        }\r\n    }\r\n    \r\n    this$static.chunker = $CodeInChunks(decoder, input, output, this$static.length_0);\r\n}\r\n\r\nfunction $LZMAByteArrayDecompressor(this$static, data) {\r\n    this$static.output = $ByteArrayOutputStream({});\r\n    $init_0(this$static, $ByteArrayInputStream({}, data), this$static.output);\r\n    return this$static;\r\n}\r\n/** de */\r\n/** cs */\r\nfunction $Create_4(this$static, keepSizeBefore, keepSizeAfter, keepSizeReserv) {\r\n    var blockSize;\r\n    this$static._keepSizeBefore = keepSizeBefore;\r\n    this$static._keepSizeAfter = keepSizeAfter;\r\n    blockSize = keepSizeBefore + keepSizeAfter + keepSizeReserv;\r\n    if (this$static._bufferBase == null || this$static._blockSize != blockSize) {\r\n        this$static._bufferBase = null;\r\n        this$static._blockSize = blockSize;\r\n        this$static._bufferBase = initDim(this$static._blockSize);\r\n    }\r\n    this$static._pointerToLastSafePosition = this$static._blockSize - keepSizeAfter;\r\n}\r\n\r\nfunction $GetIndexByte(this$static, index) {\r\n    return this$static._bufferBase[this$static._bufferOffset + this$static._pos + index];\r\n}\r\n\r\nfunction $GetMatchLen(this$static, index, distance, limit) {\r\n    var i, pby;\r\n    if (this$static._streamEndWasReached) {\r\n        if (this$static._pos + index + limit > this$static._streamPos) {\r\n            limit = this$static._streamPos - (this$static._pos + index);\r\n        }\r\n    }\r\n    ++distance;\r\n    pby = this$static._bufferOffset + this$static._pos + index;\r\n    for (i = 0; i < limit && this$static._bufferBase[pby + i] == this$static._bufferBase[pby + i - distance]; ++i) {\r\n    }\r\n    return i;\r\n}\r\n\r\nfunction $GetNumAvailableBytes(this$static) {\r\n    return this$static._streamPos - this$static._pos;\r\n}\r\n\r\nfunction $MoveBlock(this$static) {\r\n    var i, numBytes, offset;\r\n    offset = this$static._bufferOffset + this$static._pos - this$static._keepSizeBefore;\r\n    if (offset > 0) {\r\n        --offset;\r\n    }\r\n    numBytes = this$static._bufferOffset + this$static._streamPos - offset;\r\n    for (i = 0; i < numBytes; ++i) {\r\n        this$static._bufferBase[i] = this$static._bufferBase[offset + i];\r\n    }\r\n    this$static._bufferOffset -= offset;\r\n}\r\n\r\nfunction $MovePos_1(this$static) {\r\n    var pointerToPostion;\r\n    this$static._pos += 1;\r\n    if (this$static._pos > this$static._posLimit) {\r\n        pointerToPostion = this$static._bufferOffset + this$static._pos;\r\n        if (pointerToPostion > this$static._pointerToLastSafePosition) {\r\n            $MoveBlock(this$static);\r\n        }\r\n        $ReadBlock(this$static);\r\n    }\r\n}\r\n\r\nfunction $ReadBlock(this$static) {\r\n    var numReadBytes, pointerToPostion, size;\r\n    if (this$static._streamEndWasReached)\r\n        return;\r\n    while (1) {\r\n        size = -this$static._bufferOffset + this$static._blockSize - this$static._streamPos;\r\n        if (!size)\r\n            return;\r\n        numReadBytes = $read_0(this$static._stream, this$static._bufferBase, this$static._bufferOffset + this$static._streamPos, size);\r\n        if (numReadBytes == -1) {\r\n            this$static._posLimit = this$static._streamPos;\r\n            pointerToPostion = this$static._bufferOffset + this$static._posLimit;\r\n            if (pointerToPostion > this$static._pointerToLastSafePosition) {\r\n                this$static._posLimit = this$static._pointerToLastSafePosition - this$static._bufferOffset;\r\n            }\r\n            this$static._streamEndWasReached = 1;\r\n            return;\r\n        }\r\n        this$static._streamPos += numReadBytes;\r\n        if (this$static._streamPos >= this$static._pos + this$static._keepSizeAfter) {\r\n            this$static._posLimit = this$static._streamPos - this$static._keepSizeAfter;\r\n        }\r\n    }\r\n}\r\n\r\nfunction $ReduceOffsets(this$static, subValue) {\r\n    this$static._bufferOffset += subValue;\r\n    this$static._posLimit -= subValue;\r\n    this$static._pos -= subValue;\r\n    this$static._streamPos -= subValue;\r\n}\r\n\r\nvar CrcTable = (function () {\r\n    var i, j, r, CrcTable = [];\r\n    for (i = 0; i < 256; ++i) {\r\n        r = i;\r\n        for (j = 0; j < 8; ++j)\r\n        if ((r & 1) != 0) {\r\n            r >>>= 1;\r\n            r ^= -306674912;\r\n        } else {\r\n            r >>>= 1;\r\n        }\r\n        CrcTable[i] = r;\r\n    }\r\n    return CrcTable;\r\n}());\r\n\r\nfunction $Create_3(this$static, historySize, keepAddBufferBefore, matchMaxLen, keepAddBufferAfter) {\r\n    var cyclicBufferSize, hs, windowReservSize;\r\n    if (historySize < 1073741567) {\r\n        this$static._cutValue = 16 + (matchMaxLen >> 1);\r\n        windowReservSize = ~~((historySize + keepAddBufferBefore + matchMaxLen + keepAddBufferAfter) / 2) + 256;\r\n        $Create_4(this$static, historySize + keepAddBufferBefore, matchMaxLen + keepAddBufferAfter, windowReservSize);\r\n        this$static._matchMaxLen = matchMaxLen;\r\n        cyclicBufferSize = historySize + 1;\r\n        if (this$static._cyclicBufferSize != cyclicBufferSize) {\r\n            this$static._son = initDim((this$static._cyclicBufferSize = cyclicBufferSize) * 2);\r\n        }\r\n\r\n        hs = 65536;\r\n        if (this$static.HASH_ARRAY) {\r\n            hs = historySize - 1;\r\n            hs |= hs >> 1;\r\n            hs |= hs >> 2;\r\n            hs |= hs >> 4;\r\n            hs |= hs >> 8;\r\n            hs >>= 1;\r\n            hs |= 65535;\r\n            if (hs > 16777216)\r\n            hs >>= 1;\r\n            this$static._hashMask = hs;\r\n            hs += 1;\r\n            hs += this$static.kFixHashSize;\r\n        }\r\n        \r\n        if (hs != this$static._hashSizeSum) {\r\n            this$static._hash = initDim(this$static._hashSizeSum = hs);\r\n        }\r\n    }\r\n}\r\n\r\nfunction $GetMatches(this$static, distances) {\r\n    var count, cur, curMatch, curMatch2, curMatch3, cyclicPos, delta, hash2Value, hash3Value, hashValue, len, len0, len1, lenLimit, matchMinPos, maxLen, offset, pby1, ptr0, ptr1, temp;\r\n    if (this$static._pos + this$static._matchMaxLen <= this$static._streamPos) {\r\n        lenLimit = this$static._matchMaxLen;\r\n    } else {\r\n        lenLimit = this$static._streamPos - this$static._pos;\r\n        if (lenLimit < this$static.kMinMatchCheck) {\r\n            $MovePos_0(this$static);\r\n            return 0;\r\n        }\r\n    }\r\n    offset = 0;\r\n    matchMinPos = this$static._pos > this$static._cyclicBufferSize?this$static._pos - this$static._cyclicBufferSize:0;\r\n    cur = this$static._bufferOffset + this$static._pos;\r\n    maxLen = 1;\r\n    hash2Value = 0;\r\n    hash3Value = 0;\r\n    if (this$static.HASH_ARRAY) {\r\n        temp = CrcTable[this$static._bufferBase[cur] & 255] ^ this$static._bufferBase[cur + 1] & 255;\r\n        hash2Value = temp & 1023;\r\n        temp ^= (this$static._bufferBase[cur + 2] & 255) << 8;\r\n        hash3Value = temp & 65535;\r\n        hashValue = (temp ^ CrcTable[this$static._bufferBase[cur + 3] & 255] << 5) & this$static._hashMask;\r\n    } else {\r\n        hashValue = this$static._bufferBase[cur] & 255 ^ (this$static._bufferBase[cur + 1] & 255) << 8;\r\n    }\r\n\r\n    curMatch = this$static._hash[this$static.kFixHashSize + hashValue] || 0;\r\n    if (this$static.HASH_ARRAY) {\r\n        curMatch2 = this$static._hash[hash2Value] || 0;\r\n        curMatch3 = this$static._hash[1024 + hash3Value] || 0;\r\n        this$static._hash[hash2Value] = this$static._pos;\r\n        this$static._hash[1024 + hash3Value] = this$static._pos;\r\n        if (curMatch2 > matchMinPos) {\r\n            if (this$static._bufferBase[this$static._bufferOffset + curMatch2] == this$static._bufferBase[cur]) {\r\n                distances[offset++] = maxLen = 2;\r\n                distances[offset++] = this$static._pos - curMatch2 - 1;\r\n            }\r\n        }\r\n        if (curMatch3 > matchMinPos) {\r\n            if (this$static._bufferBase[this$static._bufferOffset + curMatch3] == this$static._bufferBase[cur]) {\r\n                if (curMatch3 == curMatch2) {\r\n                    offset -= 2;\r\n                }\r\n                distances[offset++] = maxLen = 3;\r\n                distances[offset++] = this$static._pos - curMatch3 - 1;\r\n                curMatch2 = curMatch3;\r\n            }\r\n        }\r\n        if (offset != 0 && curMatch2 == curMatch) {\r\n            offset -= 2;\r\n            maxLen = 1;\r\n        }\r\n    }\r\n    this$static._hash[this$static.kFixHashSize + hashValue] = this$static._pos;\r\n    ptr0 = (this$static._cyclicBufferPos << 1) + 1;\r\n    ptr1 = this$static._cyclicBufferPos << 1;\r\n    len0 = len1 = this$static.kNumHashDirectBytes;\r\n    if (this$static.kNumHashDirectBytes != 0) {\r\n        if (curMatch > matchMinPos) {\r\n            if (this$static._bufferBase[this$static._bufferOffset + curMatch + this$static.kNumHashDirectBytes] != this$static._bufferBase[cur + this$static.kNumHashDirectBytes]) {\r\n                distances[offset++] = maxLen = this$static.kNumHashDirectBytes;\r\n                distances[offset++] = this$static._pos - curMatch - 1;\r\n            }\r\n        }\r\n    }\r\n    count = this$static._cutValue;\r\n    while (1) {\r\n        if (curMatch <= matchMinPos || count == 0) {\r\n            count -= 1;\r\n            this$static._son[ptr0] = this$static._son[ptr1] = 0;\r\n            break;\r\n        }\r\n        delta = this$static._pos - curMatch;\r\n        cyclicPos = (delta <= this$static._cyclicBufferPos?this$static._cyclicBufferPos - delta:this$static._cyclicBufferPos - delta + this$static._cyclicBufferSize) << 1;\r\n        pby1 = this$static._bufferOffset + curMatch;\r\n        len = len0 < len1?len0:len1;\r\n        if (this$static._bufferBase[pby1 + len] == this$static._bufferBase[cur + len]) {\r\n            while ((len += 1) != lenLimit) {\r\n                if (this$static._bufferBase[pby1 + len] != this$static._bufferBase[cur + len]) {\r\n                    break;\r\n                }\r\n            }\r\n            if (maxLen < len) {\r\n                distances[offset++] = maxLen = len;\r\n                distances[offset++] = delta - 1;\r\n                if (len == lenLimit) {\r\n                this$static._son[ptr1] = this$static._son[cyclicPos];\r\n                this$static._son[ptr0] = this$static._son[cyclicPos + 1];\r\n                break;\r\n                }\r\n            }\r\n        }\r\n        if ((this$static._bufferBase[pby1 + len] & 255) < (this$static._bufferBase[cur + len] & 255)) {\r\n            this$static._son[ptr1] = curMatch;\r\n            ptr1 = cyclicPos + 1;\r\n            curMatch = this$static._son[ptr1];\r\n            len1 = len;\r\n        } else {\r\n            this$static._son[ptr0] = curMatch;\r\n            ptr0 = cyclicPos;\r\n            curMatch = this$static._son[ptr0];\r\n            len0 = len;\r\n        }\r\n    }\r\n    $MovePos_0(this$static);\r\n    return offset;\r\n}\r\n\r\nfunction $Init_5(this$static) {\r\n    this$static._bufferOffset = 0;\r\n    this$static._pos = 0;\r\n    this$static._streamPos = 0;\r\n    this$static._streamEndWasReached = 0;\r\n    $ReadBlock(this$static);\r\n    this$static._cyclicBufferPos = 0;\r\n    $ReduceOffsets(this$static, -1);\r\n}\r\n\r\nfunction $MovePos_0(this$static) {\r\n    var subValue;\r\n    if ((this$static._cyclicBufferPos += 1) >= this$static._cyclicBufferSize) {\r\n        this$static._cyclicBufferPos = 0;\r\n    }\r\n    $MovePos_1(this$static);\r\n    if (this$static._pos == 1073741823) {\r\n        subValue = this$static._pos - this$static._cyclicBufferSize;\r\n        $NormalizeLinks(this$static._son, this$static._cyclicBufferSize * 2, subValue);\r\n        $NormalizeLinks(this$static._hash, this$static._hashSizeSum, subValue);\r\n        $ReduceOffsets(this$static, subValue);\r\n    }\r\n}\r\n\r\n///NOTE: This is only called after reading one whole gigabyte.\r\nfunction $NormalizeLinks(items, numItems, subValue) {\r\n    var i, value;\r\n    for (i = 0; i < numItems; ++i) {\r\n        value = items[i] || 0;\r\n        if (value <= subValue) {\r\n            value = 0;\r\n        } else {\r\n            value -= subValue;\r\n        }\r\n        items[i] = value;\r\n    }\r\n}\r\n\r\nfunction $SetType(this$static, numHashBytes) {\r\n    this$static.HASH_ARRAY = numHashBytes > 2;\r\n    if (this$static.HASH_ARRAY) {\r\n        this$static.kNumHashDirectBytes = 0;\r\n        this$static.kMinMatchCheck = 4;\r\n        this$static.kFixHashSize = 66560;\r\n    } else {\r\n        this$static.kNumHashDirectBytes = 2;\r\n        this$static.kMinMatchCheck = 3;\r\n        this$static.kFixHashSize = 0;\r\n    }\r\n}\r\n\r\nfunction $Skip(this$static, num) {\r\n    var count, cur, curMatch, cyclicPos, delta, hash2Value, hash3Value, hashValue, len, len0, len1, lenLimit, matchMinPos, pby1, ptr0, ptr1, temp;\r\n    do {\r\n        if (this$static._pos + this$static._matchMaxLen <= this$static._streamPos) {\r\n            lenLimit = this$static._matchMaxLen;\r\n        } else {\r\n            lenLimit = this$static._streamPos - this$static._pos;\r\n            if (lenLimit < this$static.kMinMatchCheck) {\r\n                $MovePos_0(this$static);\r\n                continue;\r\n            }\r\n        }\r\n        matchMinPos = this$static._pos > this$static._cyclicBufferSize?this$static._pos - this$static._cyclicBufferSize:0;\r\n        cur = this$static._bufferOffset + this$static._pos;\r\n        if (this$static.HASH_ARRAY) {\r\n            temp = CrcTable[this$static._bufferBase[cur] & 255] ^ this$static._bufferBase[cur + 1] & 255;\r\n            hash2Value = temp & 1023;\r\n            this$static._hash[hash2Value] = this$static._pos;\r\n            temp ^= (this$static._bufferBase[cur + 2] & 255) << 8;\r\n            hash3Value = temp & 65535;\r\n            this$static._hash[1024 + hash3Value] = this$static._pos;\r\n            hashValue = (temp ^ CrcTable[this$static._bufferBase[cur + 3] & 255] << 5) & this$static._hashMask;\r\n        } else {\r\n            hashValue = this$static._bufferBase[cur] & 255 ^ (this$static._bufferBase[cur + 1] & 255) << 8;\r\n        }\r\n        curMatch = this$static._hash[this$static.kFixHashSize + hashValue];\r\n        this$static._hash[this$static.kFixHashSize + hashValue] = this$static._pos;\r\n        ptr0 = (this$static._cyclicBufferPos << 1) + 1;\r\n        ptr1 = this$static._cyclicBufferPos << 1;\r\n        len0 = len1 = this$static.kNumHashDirectBytes;\r\n        count = this$static._cutValue;\r\n        while (1) {\r\n            if (curMatch <= matchMinPos || count == 0) {\r\n                count -= 1;\r\n                this$static._son[ptr0] = this$static._son[ptr1] = 0;\r\n                break;\r\n            }\r\n            delta = this$static._pos - curMatch;\r\n            cyclicPos = (delta <= this$static._cyclicBufferPos?this$static._cyclicBufferPos - delta:this$static._cyclicBufferPos - delta + this$static._cyclicBufferSize) << 1;\r\n            pby1 = this$static._bufferOffset + curMatch;\r\n            len = len0 < len1?len0:len1;\r\n            if (this$static._bufferBase[pby1 + len] == this$static._bufferBase[cur + len]) {\r\n                while ((len += 1) != lenLimit) {\r\n                    if (this$static._bufferBase[pby1 + len] != this$static._bufferBase[cur + len]) {\r\n                        break;\r\n                    }\r\n                }\r\n                if (len == lenLimit) {\r\n                    this$static._son[ptr1] = this$static._son[cyclicPos];\r\n                    this$static._son[ptr0] = this$static._son[cyclicPos + 1];\r\n                    break;\r\n                }\r\n            }\r\n            if ((this$static._bufferBase[pby1 + len] & 255) < (this$static._bufferBase[cur + len] & 255)) {\r\n                this$static._son[ptr1] = curMatch;\r\n                ptr1 = cyclicPos + 1;\r\n                curMatch = this$static._son[ptr1];\r\n                len1 = len;\r\n            } else {\r\n                this$static._son[ptr0] = curMatch;\r\n                ptr0 = cyclicPos;\r\n                curMatch = this$static._son[ptr0];\r\n                len0 = len;\r\n            }\r\n        }\r\n        $MovePos_0(this$static);\r\n    }\r\n    while ((num -= 1) != 0);\r\n}\r\n\r\n/** ce */\r\n/** ds */\r\nfunction $CopyBlock(this$static, distance, len) {\r\n    var pos = this$static._pos - distance - 1;\r\n    if (pos < 0) {\r\n        pos += this$static._windowSize;\r\n    }\r\n    for (; len != 0; len -= 1) {\r\n        if (pos >= this$static._windowSize) {\r\n            pos = 0;\r\n        }\r\n        this$static._buffer[this$static._pos] = this$static._buffer[pos];\r\n        this$static._pos += 1;\r\n        pos += 1;\r\n        if (this$static._pos >= this$static._windowSize) {\r\n            $Flush_0(this$static);\r\n        }\r\n    }\r\n}\r\n\r\nfunction $Create_5(this$static, windowSize) {\r\n    if (this$static._buffer == null || this$static._windowSize != windowSize) {\r\n        this$static._buffer = initDim(windowSize);\r\n    }\r\n    this$static._windowSize = windowSize;\r\n    this$static._pos = 0;\r\n    this$static._streamPos = 0;\r\n}\r\n\r\nfunction $Flush_0(this$static) {\r\n    var size = this$static._pos - this$static._streamPos;\r\n    if (!size) {\r\n        return;\r\n    }\r\n    $write_0(this$static._stream, this$static._buffer, this$static._streamPos, size);\r\n    if (this$static._pos >= this$static._windowSize) {\r\n        this$static._pos = 0;\r\n    }\r\n    this$static._streamPos = this$static._pos;\r\n}\r\n\r\nfunction $GetByte(this$static, distance) {\r\n    var pos = this$static._pos - distance - 1;\r\n    if (pos < 0) {\r\n        pos += this$static._windowSize;\r\n    }\r\n    return this$static._buffer[pos];\r\n}\r\n\r\nfunction $PutByte(this$static, b) {\r\n    this$static._buffer[this$static._pos] = b;\r\n    this$static._pos += 1;\r\n    if (this$static._pos >= this$static._windowSize) {\r\n        $Flush_0(this$static);\r\n    }\r\n}\r\n\r\nfunction $ReleaseStream(this$static) {\r\n    $Flush_0(this$static);\r\n    this$static._stream = null;\r\n}\r\n/** de */\r\n\r\nfunction GetLenToPosState(len) {\r\n    len -= 2;\r\n    if (len < 4) {\r\n        return len;\r\n    }\r\n    return 3;\r\n}\r\n\r\nfunction StateUpdateChar(index) {\r\n    if (index < 4) {\r\n        return 0;\r\n    }\r\n    if (index < 10) {\r\n        return index - 3;\r\n    }\r\n    return index - 6;\r\n}\r\n\r\n/** cs */\r\nfunction $Chunker_0(this$static, encoder) {\r\n    this$static.encoder = encoder;\r\n    this$static.decoder = null;\r\n    this$static.alive = 1;\r\n    return this$static;\r\n}\r\n/** ce */\r\n/** ds */\r\nfunction $Chunker(this$static, decoder) {\r\n    this$static.decoder = decoder;\r\n    this$static.encoder = null;\r\n    this$static.alive = 1;\r\n    return this$static;\r\n}\r\n/** de */\r\n\r\n/** ds */\r\nfunction $processChunkDecode(this$static) {\r\n    if (!this$static.alive) {\r\n        throw new Error(\"bad state\");\r\n    }\r\n    \r\n    if (this$static.encoder) {\r\n        throw new Error(\"No encoding\");\r\n    } else {\r\n        $processDecoderChunk(this$static);\r\n    }\r\n    return this$static.alive;\r\n}\r\n\r\nfunction $processDecoderChunk(this$static) {\r\n    var result = $CodeOneChunk(this$static.decoder);\r\n    if (result == -1) {\r\n        throw new Error(\"corrupted input\");\r\n    }\r\n    this$static.inBytesProcessed = N1_longLit;\r\n    this$static.outBytesProcessed = this$static.decoder.nowPos64;\r\n    if (result || compare(this$static.decoder.outSize, P0_longLit) >= 0 && compare(this$static.decoder.nowPos64, this$static.decoder.outSize) >= 0) {\r\n        $Flush_0(this$static.decoder.m_OutWindow);\r\n        $ReleaseStream(this$static.decoder.m_OutWindow);\r\n        this$static.decoder.m_RangeDecoder.Stream = null;\r\n        this$static.alive = 0;\r\n    }\r\n}\r\n/** de */\r\n/** cs */\r\nfunction $processChunkEncode(this$static) {\r\n    if (!this$static.alive) {\r\n        throw new Error(\"bad state\");\r\n    }\r\n    \r\n    if (this$static.encoder) {\r\n        $processEncoderChunk(this$static);\r\n    } else {\r\n        throw new Error(\"No decoding\");\r\n    }\r\n    return this$static.alive;\r\n}\r\n\r\nfunction $processEncoderChunk(this$static) {\r\n    $CodeOneBlock(this$static.encoder, this$static.encoder.processedInSize, this$static.encoder.processedOutSize, this$static.encoder.finished);\r\n    this$static.inBytesProcessed = this$static.encoder.processedInSize[0];\r\n    if (this$static.encoder.finished[0]) {\r\n        $ReleaseStreams(this$static.encoder);\r\n        this$static.alive = 0;\r\n    }\r\n}\r\n/** ce */\r\n\r\n/** ds */\r\nfunction $CodeInChunks(this$static, inStream, outStream, outSize) {\r\n    this$static.m_RangeDecoder.Stream = inStream;\r\n    $ReleaseStream(this$static.m_OutWindow);\r\n    this$static.m_OutWindow._stream = outStream;\r\n    $Init_1(this$static);\r\n    this$static.state = 0;\r\n    this$static.rep0 = 0;\r\n    this$static.rep1 = 0;\r\n    this$static.rep2 = 0;\r\n    this$static.rep3 = 0;\r\n    this$static.outSize = outSize;\r\n    this$static.nowPos64 = P0_longLit;\r\n    this$static.prevByte = 0;\r\n    return $Chunker({}, this$static);\r\n}\r\n\r\nfunction $CodeOneChunk(this$static) {\r\n    var decoder2, distance, len, numDirectBits, posSlot, posState;\r\n    posState = lowBits_0(this$static.nowPos64) & this$static.m_PosStateMask;\r\n    if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsMatchDecoders, (this$static.state << 4) + posState)) {\r\n        decoder2 = $GetDecoder(this$static.m_LiteralDecoder, lowBits_0(this$static.nowPos64), this$static.prevByte);\r\n        if (this$static.state < 7) {\r\n            this$static.prevByte = $DecodeNormal(decoder2, this$static.m_RangeDecoder);\r\n        } else {\r\n            this$static.prevByte = $DecodeWithMatchByte(decoder2, this$static.m_RangeDecoder, $GetByte(this$static.m_OutWindow, this$static.rep0));\r\n        }\r\n        $PutByte(this$static.m_OutWindow, this$static.prevByte);\r\n        this$static.state = StateUpdateChar(this$static.state);\r\n        this$static.nowPos64 = add(this$static.nowPos64, P1_longLit);\r\n    } else {\r\n        if ($DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRepDecoders, this$static.state)) {\r\n            len = 0;\r\n            if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRepG0Decoders, this$static.state)) {\r\n                if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRep0LongDecoders, (this$static.state << 4) + posState)) {\r\n                    this$static.state = this$static.state < 7?9:11;\r\n                    len = 1;\r\n                }\r\n            } else {\r\n                if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRepG1Decoders, this$static.state)) {\r\n                    distance = this$static.rep1;\r\n                } else {\r\n                    if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRepG2Decoders, this$static.state)) {\r\n                        distance = this$static.rep2;\r\n                    } else {\r\n                        distance = this$static.rep3;\r\n                        this$static.rep3 = this$static.rep2;\r\n                    }\r\n                    this$static.rep2 = this$static.rep1;\r\n                }\r\n                this$static.rep1 = this$static.rep0;\r\n                this$static.rep0 = distance;\r\n            }\r\n            if (!len) {\r\n                len = $Decode(this$static.m_RepLenDecoder, this$static.m_RangeDecoder, posState) + 2;\r\n                this$static.state = this$static.state < 7?8:11;\r\n            }\r\n        } else {\r\n            this$static.rep3 = this$static.rep2;\r\n            this$static.rep2 = this$static.rep1;\r\n            this$static.rep1 = this$static.rep0;\r\n            len = 2 + $Decode(this$static.m_LenDecoder, this$static.m_RangeDecoder, posState);\r\n            this$static.state = this$static.state < 7?7:10;\r\n            posSlot = $Decode_0(this$static.m_PosSlotDecoder[GetLenToPosState(len)], this$static.m_RangeDecoder);\r\n            if (posSlot >= 4) {\r\n                numDirectBits = (posSlot >> 1) - 1;\r\n                this$static.rep0 = (2 | posSlot & 1) << numDirectBits;\r\n                if (posSlot < 14) {\r\n                    this$static.rep0 += ReverseDecode(this$static.m_PosDecoders, this$static.rep0 - posSlot - 1, this$static.m_RangeDecoder, numDirectBits);\r\n                } else {\r\n                    this$static.rep0 += $DecodeDirectBits(this$static.m_RangeDecoder, numDirectBits - 4) << 4;\r\n                    this$static.rep0 += $ReverseDecode(this$static.m_PosAlignDecoder, this$static.m_RangeDecoder);\r\n                    if (this$static.rep0 < 0) {\r\n                        if (this$static.rep0 == -1) {\r\n                            return 1;\r\n                        }\r\n                        return -1;\r\n                    }\r\n                }\r\n            } else \r\n                this$static.rep0 = posSlot;\r\n        }\r\n        if (compare(fromInt(this$static.rep0), this$static.nowPos64) >= 0 || this$static.rep0 >= this$static.m_DictionarySizeCheck) {\r\n            return -1;\r\n        }\r\n        $CopyBlock(this$static.m_OutWindow, this$static.rep0, len);\r\n        this$static.nowPos64 = add(this$static.nowPos64, fromInt(len));\r\n        this$static.prevByte = $GetByte(this$static.m_OutWindow, 0);\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction $Decoder(this$static) {\r\n    this$static.m_OutWindow = {};\r\n    this$static.m_RangeDecoder = {};\r\n    this$static.m_IsMatchDecoders = initDim(192);\r\n    this$static.m_IsRepDecoders = initDim(12);\r\n    this$static.m_IsRepG0Decoders = initDim(12);\r\n    this$static.m_IsRepG1Decoders = initDim(12);\r\n    this$static.m_IsRepG2Decoders = initDim(12);\r\n    this$static.m_IsRep0LongDecoders = initDim(192);\r\n    this$static.m_PosSlotDecoder = initDim(4);\r\n    this$static.m_PosDecoders = initDim(114);\r\n    this$static.m_PosAlignDecoder = $BitTreeDecoder({}, 4);\r\n    this$static.m_LenDecoder = $Decoder$LenDecoder({});\r\n    this$static.m_RepLenDecoder = $Decoder$LenDecoder({});\r\n    this$static.m_LiteralDecoder = {};\r\n    for (var i = 0; i < 4; ++i) {\r\n        this$static.m_PosSlotDecoder[i] = $BitTreeDecoder({}, 6);\r\n    }\r\n    return this$static;\r\n}\r\n\r\nfunction $Init_1(this$static) {\r\n    this$static.m_OutWindow._streamPos = 0;\r\n    this$static.m_OutWindow._pos = 0;\r\n    InitBitModels(this$static.m_IsMatchDecoders);\r\n    InitBitModels(this$static.m_IsRep0LongDecoders);\r\n    InitBitModels(this$static.m_IsRepDecoders);\r\n    InitBitModels(this$static.m_IsRepG0Decoders);\r\n    InitBitModels(this$static.m_IsRepG1Decoders);\r\n    InitBitModels(this$static.m_IsRepG2Decoders);\r\n    InitBitModels(this$static.m_PosDecoders);\r\n    $Init_0(this$static.m_LiteralDecoder);\r\n    for (var i = 0; i < 4; ++i) {\r\n        InitBitModels(this$static.m_PosSlotDecoder[i].Models);\r\n    }\r\n    $Init(this$static.m_LenDecoder);\r\n    $Init(this$static.m_RepLenDecoder);\r\n    InitBitModels(this$static.m_PosAlignDecoder.Models);\r\n    $Init_8(this$static.m_RangeDecoder);\r\n}\r\n\r\nfunction $SetDecoderProperties(this$static, properties) {\r\n    var dictionarySize, i, lc, lp, pb, remainder, val;\r\n    if (properties.length < 5)\r\n        return 0;\r\n    val = properties[0] & 255;\r\n    lc = val % 9;\r\n    remainder = ~~(val / 9);\r\n    lp = remainder % 5;\r\n    pb = ~~(remainder / 5);\r\n    dictionarySize = 0;\r\n    for (i = 0; i < 4; ++i) {\r\n        dictionarySize += (properties[1 + i] & 255) << i * 8;\r\n    }\r\n    ///NOTE: If the input is bad, it might call for an insanely large dictionary size, which would crash the script.\r\n    if (dictionarySize > 99999999 || !$SetLcLpPb(this$static, lc, lp, pb)) {\r\n        return 0;\r\n    }\r\n    return $SetDictionarySize(this$static, dictionarySize);\r\n}\r\n\r\nfunction $SetDictionarySize(this$static, dictionarySize) {\r\n    if (dictionarySize < 0) {\r\n        return 0;\r\n    }\r\n    if (this$static.m_DictionarySize != dictionarySize) {\r\n        this$static.m_DictionarySize = dictionarySize;\r\n        this$static.m_DictionarySizeCheck = Math.max(this$static.m_DictionarySize, 1);\r\n        $Create_5(this$static.m_OutWindow, Math.max(this$static.m_DictionarySizeCheck, 4096));\r\n    }\r\n    return 1;\r\n}\r\n\r\nfunction $SetLcLpPb(this$static, lc, lp, pb) {\r\n    if (lc > 8 || lp > 4 || pb > 4) {\r\n        return 0;\r\n    }\r\n    $Create_0(this$static.m_LiteralDecoder, lp, lc);\r\n    var numPosStates = 1 << pb;\r\n    $Create(this$static.m_LenDecoder, numPosStates);\r\n    $Create(this$static.m_RepLenDecoder, numPosStates);\r\n    this$static.m_PosStateMask = numPosStates - 1;\r\n    return 1;\r\n}\r\n\r\nfunction $Create(this$static, numPosStates) {\r\n    for (; this$static.m_NumPosStates < numPosStates; this$static.m_NumPosStates += 1) {\r\n        this$static.m_LowCoder[this$static.m_NumPosStates] = $BitTreeDecoder({}, 3);\r\n        this$static.m_MidCoder[this$static.m_NumPosStates] = $BitTreeDecoder({}, 3);\r\n    }\r\n}\r\n\r\nfunction $Decode(this$static, rangeDecoder, posState) {\r\n    if (!$DecodeBit(rangeDecoder, this$static.m_Choice, 0)) {\r\n        return $Decode_0(this$static.m_LowCoder[posState], rangeDecoder);\r\n    }\r\n    var symbol = 8;\r\n    if (!$DecodeBit(rangeDecoder, this$static.m_Choice, 1)) {\r\n        symbol += $Decode_0(this$static.m_MidCoder[posState], rangeDecoder);\r\n    } else {\r\n        symbol += 8 + $Decode_0(this$static.m_HighCoder, rangeDecoder);\r\n    }\r\n    return symbol;\r\n}\r\n\r\nfunction $Decoder$LenDecoder(this$static) {\r\n    this$static.m_Choice = initDim(2);\r\n    this$static.m_LowCoder = initDim(16);\r\n    this$static.m_MidCoder = initDim(16);\r\n    this$static.m_HighCoder = $BitTreeDecoder({}, 8);\r\n    this$static.m_NumPosStates = 0;\r\n    return this$static;\r\n}\r\n\r\nfunction $Init(this$static) {\r\n    InitBitModels(this$static.m_Choice);\r\n    for (var posState = 0; posState < this$static.m_NumPosStates; ++posState) {\r\n        InitBitModels(this$static.m_LowCoder[posState].Models);\r\n        InitBitModels(this$static.m_MidCoder[posState].Models);\r\n    }\r\n    InitBitModels(this$static.m_HighCoder.Models);\r\n}\r\n\r\n\r\nfunction $Create_0(this$static, numPosBits, numPrevBits) {\r\n    var i, numStates;\r\n    if (this$static.m_Coders != null && this$static.m_NumPrevBits == numPrevBits && this$static.m_NumPosBits == numPosBits)\r\n        return;\r\n    this$static.m_NumPosBits = numPosBits;\r\n    this$static.m_PosMask = (1 << numPosBits) - 1;\r\n    this$static.m_NumPrevBits = numPrevBits;\r\n    numStates = 1 << this$static.m_NumPrevBits + this$static.m_NumPosBits;\r\n    this$static.m_Coders = initDim(numStates);\r\n    for (i = 0; i < numStates; ++i)\r\n        this$static.m_Coders[i] = $Decoder$LiteralDecoder$Decoder2({});\r\n}\r\n\r\nfunction $GetDecoder(this$static, pos, prevByte) {\r\n    return this$static.m_Coders[((pos & this$static.m_PosMask) << this$static.m_NumPrevBits) + ((prevByte & 255) >>> 8 - this$static.m_NumPrevBits)];\r\n}\r\n\r\nfunction $Init_0(this$static) {\r\n    var i, numStates;\r\n    numStates = 1 << this$static.m_NumPrevBits + this$static.m_NumPosBits;\r\n    for (i = 0; i < numStates; ++i) {\r\n        InitBitModels(this$static.m_Coders[i].m_Decoders);\r\n    }\r\n}\r\n\r\n\r\nfunction $DecodeNormal(this$static, rangeDecoder) {\r\n    var symbol = 1;\r\n    do {\r\n        symbol = symbol << 1 | $DecodeBit(rangeDecoder, this$static.m_Decoders, symbol);\r\n    } while (symbol < 256);\r\n    return symbol << 24 >> 24;\r\n}\r\n\r\nfunction $DecodeWithMatchByte(this$static, rangeDecoder, matchByte) {\r\n    var bit, matchBit, symbol = 1;\r\n    do {\r\n        matchBit = matchByte >> 7 & 1;\r\n        matchByte <<= 1;\r\n        bit = $DecodeBit(rangeDecoder, this$static.m_Decoders, (1 + matchBit << 8) + symbol);\r\n        symbol = symbol << 1 | bit;\r\n        if (matchBit != bit) {\r\n            while (symbol < 256) {\r\n                symbol = symbol << 1 | $DecodeBit(rangeDecoder, this$static.m_Decoders, symbol);\r\n            }\r\n        break;\r\n        }\r\n    } while (symbol < 256);\r\n    return symbol << 24 >> 24;\r\n}\r\n\r\nfunction $Decoder$LiteralDecoder$Decoder2(this$static) {\r\n    this$static.m_Decoders = initDim(768);\r\n    return this$static;\r\n}\r\n\r\n/** de */\r\n/** cs */\r\nvar g_FastPos = (function () {\r\n    var j, k, slotFast, c = 2, g_FastPos = [0, 1];\r\n    for (slotFast = 2; slotFast < 22; ++slotFast) {\r\n        //k = 1 << (slotFast >> 1) - 1;\r\n        var s = slotFast;\r\n        s >>= 1;\r\n        s -= 1;\r\n        k = 1;\r\n        k <<= s;\r\n        for (j = 0; j < k; ++j , ++c)\r\n            g_FastPos[c] = slotFast << 24 >> 24;\r\n    }\r\n    return g_FastPos;\r\n}());\r\n\r\nfunction $Backward(this$static, cur) {\r\n    var backCur, backMem, posMem, posPrev;\r\n    this$static._optimumEndIndex = cur;\r\n    posMem = this$static._optimum[cur].PosPrev;\r\n    backMem = this$static._optimum[cur].BackPrev;\r\n    do {\r\n        if (this$static._optimum[cur].Prev1IsChar) {\r\n            $MakeAsChar(this$static._optimum[posMem]);\r\n            this$static._optimum[posMem].PosPrev = posMem - 1;\r\n            if (this$static._optimum[cur].Prev2) {\r\n                this$static._optimum[posMem - 1].Prev1IsChar = 0;\r\n                this$static._optimum[posMem - 1].PosPrev = this$static._optimum[cur].PosPrev2;\r\n                this$static._optimum[posMem - 1].BackPrev = this$static._optimum[cur].BackPrev2;\r\n            }\r\n        }\r\n        posPrev = posMem;\r\n        backCur = backMem;\r\n        backMem = this$static._optimum[posPrev].BackPrev;\r\n        posMem = this$static._optimum[posPrev].PosPrev;\r\n        this$static._optimum[posPrev].BackPrev = backCur;\r\n        this$static._optimum[posPrev].PosPrev = cur;\r\n        cur = posPrev;\r\n    } while (cur > 0);\r\n    this$static.backRes = this$static._optimum[0].BackPrev;\r\n    this$static._optimumCurrentIndex = this$static._optimum[0].PosPrev;\r\n    return this$static._optimumCurrentIndex;\r\n}\r\n\r\nfunction $BaseInit(this$static) {\r\n    this$static._state = 0;\r\n    this$static._previousByte = 0;\r\n    for (var i = 0; i < 4; ++i) {\r\n        this$static._repDistances[i] = 0;\r\n    }\r\n}\r\n\r\nfunction $CodeOneBlock(this$static, inSize, outSize, finished) {\r\n    var baseVal, complexState, curByte, distance, footerBits, i, len, lenToPosState, matchByte, pos, posReduced, posSlot, posState, progressPosValuePrev, subCoder;\r\n    inSize[0] = P0_longLit;\r\n    outSize[0] = P0_longLit;\r\n    finished[0] = 1;\r\n    if (this$static._inStream) {\r\n        this$static._matchFinder._stream = this$static._inStream;\r\n        $Init_5(this$static._matchFinder);\r\n        this$static._needReleaseMFStream = 1;\r\n        this$static._inStream = null;\r\n    }\r\n    if (this$static._finished) {\r\n        return;\r\n    }\r\n    this$static._finished = 1;\r\n    progressPosValuePrev = this$static.nowPos64;\r\n    if (eq(this$static.nowPos64, P0_longLit)) {\r\n        if (!$GetNumAvailableBytes(this$static._matchFinder)) {\r\n            $Flush(this$static, lowBits_0(this$static.nowPos64));\r\n            return;\r\n        }\r\n        $ReadMatchDistances(this$static);\r\n        posState = lowBits_0(this$static.nowPos64) & this$static._posStateMask;\r\n        $Encode_3(this$static._rangeEncoder, this$static._isMatch, (this$static._state << 4) + posState, 0);\r\n        this$static._state = StateUpdateChar(this$static._state);\r\n        curByte = $GetIndexByte(this$static._matchFinder, -this$static._additionalOffset);\r\n        $Encode_1($GetSubCoder(this$static._literalEncoder, lowBits_0(this$static.nowPos64), this$static._previousByte), this$static._rangeEncoder, curByte);\r\n        this$static._previousByte = curByte;\r\n        this$static._additionalOffset -= 1;\r\n        this$static.nowPos64 = add(this$static.nowPos64, P1_longLit);\r\n    }\r\n    if (!$GetNumAvailableBytes(this$static._matchFinder)) {\r\n        $Flush(this$static, lowBits_0(this$static.nowPos64));\r\n        return;\r\n    }\r\n    while (1) {\r\n        len = $GetOptimum(this$static, lowBits_0(this$static.nowPos64));\r\n        pos = this$static.backRes;\r\n        posState = lowBits_0(this$static.nowPos64) & this$static._posStateMask;\r\n        complexState = (this$static._state << 4) + posState;\r\n        if (len == 1 && pos == -1) {\r\n            $Encode_3(this$static._rangeEncoder, this$static._isMatch, complexState, 0);\r\n            curByte = $GetIndexByte(this$static._matchFinder, -this$static._additionalOffset);\r\n            subCoder = $GetSubCoder(this$static._literalEncoder, lowBits_0(this$static.nowPos64), this$static._previousByte);\r\n            if (this$static._state < 7) {\r\n                $Encode_1(subCoder, this$static._rangeEncoder, curByte);\r\n            } else {\r\n                matchByte = $GetIndexByte(this$static._matchFinder, -this$static._repDistances[0] - 1 - this$static._additionalOffset);\r\n                $EncodeMatched(subCoder, this$static._rangeEncoder, matchByte, curByte);\r\n            }\r\n            this$static._previousByte = curByte;\r\n            this$static._state = StateUpdateChar(this$static._state);\r\n        } else {\r\n            $Encode_3(this$static._rangeEncoder, this$static._isMatch, complexState, 1);\r\n            if (pos < 4) {\r\n                $Encode_3(this$static._rangeEncoder, this$static._isRep, this$static._state, 1);\r\n                if (!pos) {\r\n                    $Encode_3(this$static._rangeEncoder, this$static._isRepG0, this$static._state, 0);\r\n                    if (len == 1) {\r\n                        $Encode_3(this$static._rangeEncoder, this$static._isRep0Long, complexState, 0);\r\n                    } else {\r\n                        $Encode_3(this$static._rangeEncoder, this$static._isRep0Long, complexState, 1);\r\n                    }\r\n                } else {\r\n                    $Encode_3(this$static._rangeEncoder, this$static._isRepG0, this$static._state, 1);\r\n                    if (pos == 1) {\r\n                        $Encode_3(this$static._rangeEncoder, this$static._isRepG1, this$static._state, 0);\r\n                    } else {\r\n                        $Encode_3(this$static._rangeEncoder, this$static._isRepG1, this$static._state, 1);\r\n                        $Encode_3(this$static._rangeEncoder, this$static._isRepG2, this$static._state, pos - 2);\r\n                    }\r\n                }\r\n                if (len == 1) {\r\n                    this$static._state = this$static._state < 7?9:11;\r\n                } else {\r\n                    $Encode_0(this$static._repMatchLenEncoder, this$static._rangeEncoder, len - 2, posState);\r\n                    this$static._state = this$static._state < 7?8:11;\r\n                }\r\n                distance = this$static._repDistances[pos];\r\n                if (pos != 0) {\r\n                    for (var i = pos; i >= 1; --i) {\r\n                        this$static._repDistances[i] = this$static._repDistances[i - 1];\r\n                    }\r\n                    this$static._repDistances[0] = distance;\r\n                }\r\n            } else {\r\n                $Encode_3(this$static._rangeEncoder, this$static._isRep, this$static._state, 0);\r\n                this$static._state = this$static._state < 7?7:10;\r\n                $Encode_0(this$static._lenEncoder, this$static._rangeEncoder, len - 2, posState);\r\n                pos -= 4;\r\n                posSlot = GetPosSlot(pos);\r\n                lenToPosState = GetLenToPosState(len);\r\n                $Encode_2(this$static._posSlotEncoder[lenToPosState], this$static._rangeEncoder, posSlot);\r\n                if (posSlot >= 4) {\r\n                    footerBits = (posSlot >> 1) - 1;\r\n                    baseVal = (2 | posSlot & 1) << footerBits;\r\n                    posReduced = pos - baseVal;\r\n                    if (posSlot < 14) {\r\n                        ReverseEncode(this$static._posEncoders, baseVal - posSlot - 1, this$static._rangeEncoder, footerBits, posReduced);\r\n                    } else {\r\n                        $EncodeDirectBits(this$static._rangeEncoder, posReduced >> 4, footerBits - 4);\r\n                        $ReverseEncode(this$static._posAlignEncoder, this$static._rangeEncoder, posReduced & 15);\r\n                        this$static._alignPriceCount += 1;\r\n                    }\r\n                }\r\n                distance = pos;\r\n                for (var i = 3; i >= 1; --i) {\r\n                    this$static._repDistances[i] = this$static._repDistances[i - 1];\r\n                }\r\n                this$static._repDistances[0] = distance;\r\n                this$static._matchPriceCount += 1;\r\n            }\r\n            this$static._previousByte = $GetIndexByte(this$static._matchFinder, len - 1 - this$static._additionalOffset);\r\n        }\r\n        this$static._additionalOffset -= len;\r\n        this$static.nowPos64 = add(this$static.nowPos64, fromInt(len));\r\n        if (!this$static._additionalOffset) {\r\n            if (this$static._matchPriceCount >= 128) {\r\n                $FillDistancesPrices(this$static);\r\n            }\r\n            if (this$static._alignPriceCount >= 16) {\r\n                $FillAlignPrices(this$static);\r\n            }\r\n            inSize[0] = this$static.nowPos64;\r\n            outSize[0] = $GetProcessedSizeAdd(this$static._rangeEncoder);\r\n            if (!$GetNumAvailableBytes(this$static._matchFinder)) {\r\n                $Flush(this$static, lowBits_0(this$static.nowPos64));\r\n                return;\r\n            }\r\n            if (compare(sub(this$static.nowPos64, progressPosValuePrev), [4096, 0]) >= 0) {\r\n                this$static._finished = 0;\r\n                finished[0] = 0;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction $Create_2(this$static) {\r\n    var bt, numHashBytes;\r\n    if (!this$static._matchFinder) {\r\n        bt = {};\r\n        numHashBytes = 4;\r\n        if (!this$static._matchFinderType) {\r\n            numHashBytes = 2;\r\n        }\r\n        $SetType(bt, numHashBytes);\r\n        this$static._matchFinder = bt;\r\n    }\r\n    $Create_1(this$static._literalEncoder, this$static._numLiteralPosStateBits, this$static._numLiteralContextBits);\r\n    if (this$static._dictionarySize == this$static._dictionarySizePrev && this$static._numFastBytesPrev == this$static._numFastBytes) {\r\n        return;\r\n    }\r\n    $Create_3(this$static._matchFinder, this$static._dictionarySize, 4096, this$static._numFastBytes, 274);\r\n    this$static._dictionarySizePrev = this$static._dictionarySize;\r\n    this$static._numFastBytesPrev = this$static._numFastBytes;\r\n}\r\n\r\nfunction $Encoder(this$static) {\r\n    var i;\r\n    this$static._repDistances = initDim(4);\r\n    this$static._optimum = [];\r\n    this$static._rangeEncoder = {};\r\n    this$static._isMatch = initDim(192);\r\n    this$static._isRep = initDim(12);\r\n    this$static._isRepG0 = initDim(12);\r\n    this$static._isRepG1 = initDim(12);\r\n    this$static._isRepG2 = initDim(12);\r\n    this$static._isRep0Long = initDim(192);\r\n    this$static._posSlotEncoder = [];\r\n    this$static._posEncoders = initDim(114);\r\n    this$static._posAlignEncoder = $BitTreeEncoder({}, 4);\r\n    this$static._lenEncoder = $Encoder$LenPriceTableEncoder({});\r\n    this$static._repMatchLenEncoder = $Encoder$LenPriceTableEncoder({});\r\n    this$static._literalEncoder = {};\r\n    this$static._matchDistances = [];\r\n    this$static._posSlotPrices = [];\r\n    this$static._distancesPrices = [];\r\n    this$static._alignPrices = initDim(16);\r\n    this$static.reps = initDim(4);\r\n    this$static.repLens = initDim(4);\r\n    this$static.processedInSize = [P0_longLit];\r\n    this$static.processedOutSize = [P0_longLit];\r\n    this$static.finished = [0];\r\n    this$static.properties = initDim(5);\r\n    this$static.tempPrices = initDim(128);\r\n    this$static._longestMatchLength = 0;\r\n    this$static._matchFinderType = 1;\r\n    this$static._numDistancePairs = 0;\r\n    this$static._numFastBytesPrev = -1;\r\n    this$static.backRes = 0;\r\n    for (i = 0; i < 4096; ++i) {\r\n        this$static._optimum[i] = {};\r\n    }\r\n    for (i = 0; i < 4; ++i) {\r\n        this$static._posSlotEncoder[i] = $BitTreeEncoder({}, 6);\r\n    }\r\n    return this$static;\r\n}\r\n\r\nfunction $FillAlignPrices(this$static) {\r\n    for (var i = 0; i < 16; ++i) {\r\n        this$static._alignPrices[i] = $ReverseGetPrice(this$static._posAlignEncoder, i);\r\n    }\r\n    this$static._alignPriceCount = 0;\r\n}\r\n\r\nfunction $FillDistancesPrices(this$static) {\r\n    var baseVal, encoder, footerBits, i, lenToPosState, posSlot, st, st2;\r\n    for (i = 4; i < 128; ++i) {\r\n        posSlot = GetPosSlot(i);\r\n        footerBits = (posSlot >> 1) - 1;\r\n        baseVal = (2 | posSlot & 1) << footerBits;\r\n        this$static.tempPrices[i] = ReverseGetPrice(this$static._posEncoders, baseVal - posSlot - 1, footerBits, i - baseVal);\r\n    }\r\n    for (lenToPosState = 0; lenToPosState < 4; ++lenToPosState) {\r\n        encoder = this$static._posSlotEncoder[lenToPosState];\r\n        st = lenToPosState << 6;\r\n        for (posSlot = 0; posSlot < this$static._distTableSize; posSlot += 1) {\r\n            this$static._posSlotPrices[st + posSlot] = $GetPrice_1(encoder, posSlot);\r\n        }\r\n        for (posSlot = 14; posSlot < this$static._distTableSize; posSlot += 1) {\r\n            this$static._posSlotPrices[st + posSlot] += (posSlot >> 1) - 1 - 4 << 6;\r\n        }\r\n        st2 = lenToPosState * 128;\r\n        for (i = 0; i < 4; ++i) {\r\n            this$static._distancesPrices[st2 + i] = this$static._posSlotPrices[st + i];\r\n        }\r\n        for (; i < 128; ++i) {\r\n            this$static._distancesPrices[st2 + i] = this$static._posSlotPrices[st + GetPosSlot(i)] + this$static.tempPrices[i];\r\n        }\r\n    }\r\n    this$static._matchPriceCount = 0;\r\n}\r\n\r\nfunction $Flush(this$static, nowPos) {\r\n    $ReleaseMFStream(this$static);\r\n    $WriteEndMarker(this$static, nowPos & this$static._posStateMask);\r\n    for (var i = 0; i < 5; ++i) {\r\n        $ShiftLow(this$static._rangeEncoder);\r\n    }\r\n}\r\n\r\nfunction $GetOptimum(this$static, position) {\r\n    var cur, curAnd1Price, curAndLenCharPrice, curAndLenPrice, curBack, curPrice, currentByte, distance, i, len, lenEnd, lenMain, lenRes, lenTest, lenTest2, lenTestTemp, matchByte, matchPrice, newLen, nextIsChar, nextMatchPrice, nextOptimum, nextRepMatchPrice, normalMatchPrice, numAvailableBytes, numAvailableBytesFull, numDistancePairs, offs, offset, opt, optimum, pos, posPrev, posState, posStateNext, price_4, repIndex, repLen, repMatchPrice, repMaxIndex, shortRepPrice, startLen, state, state2, t, price, price_0, price_1, price_2, price_3;\r\n    if (this$static._optimumEndIndex != this$static._optimumCurrentIndex) {\r\n        lenRes = this$static._optimum[this$static._optimumCurrentIndex].PosPrev - this$static._optimumCurrentIndex;\r\n        this$static.backRes = this$static._optimum[this$static._optimumCurrentIndex].BackPrev;\r\n        this$static._optimumCurrentIndex = this$static._optimum[this$static._optimumCurrentIndex].PosPrev;\r\n        return lenRes;\r\n    }\r\n    this$static._optimumCurrentIndex = this$static._optimumEndIndex = 0;\r\n    if (this$static._longestMatchWasFound) {\r\n        lenMain = this$static._longestMatchLength;\r\n        this$static._longestMatchWasFound = 0;\r\n    } else {\r\n        lenMain = $ReadMatchDistances(this$static);\r\n    }\r\n    numDistancePairs = this$static._numDistancePairs;\r\n    numAvailableBytes = $GetNumAvailableBytes(this$static._matchFinder) + 1;\r\n    if (numAvailableBytes < 2) {\r\n        this$static.backRes = -1;\r\n        return 1;\r\n    }\r\n    if (numAvailableBytes > 273) {\r\n        numAvailableBytes = 273;\r\n    }\r\n    repMaxIndex = 0;\r\n    for (i = 0; i < 4; ++i) {\r\n        this$static.reps[i] = this$static._repDistances[i];\r\n        this$static.repLens[i] = $GetMatchLen(this$static._matchFinder, -1, this$static.reps[i], 273);\r\n        if (this$static.repLens[i] > this$static.repLens[repMaxIndex]) {\r\n            repMaxIndex = i;\r\n        }\r\n    }\r\n    if (this$static.repLens[repMaxIndex] >= this$static._numFastBytes) {\r\n        this$static.backRes = repMaxIndex;\r\n        lenRes = this$static.repLens[repMaxIndex];\r\n        $MovePos(this$static, lenRes - 1);\r\n        return lenRes;\r\n    }\r\n    if (lenMain >= this$static._numFastBytes) {\r\n        this$static.backRes = this$static._matchDistances[numDistancePairs - 1] + 4;\r\n        $MovePos(this$static, lenMain - 1);\r\n        return lenMain;\r\n    }\r\n    currentByte = $GetIndexByte(this$static._matchFinder, -1);\r\n    matchByte = $GetIndexByte(this$static._matchFinder, -this$static._repDistances[0] - 1 - 1);\r\n    if (lenMain < 2 && currentByte != matchByte && this$static.repLens[repMaxIndex] < 2) {\r\n        this$static.backRes = -1;\r\n        return 1;\r\n    }\r\n    this$static._optimum[0].State = this$static._state;\r\n    posState = position & this$static._posStateMask;\r\n    this$static._optimum[1].Price = ProbPrices[this$static._isMatch[(this$static._state << 4) + posState] >>> 2] + $GetPrice_0($GetSubCoder(this$static._literalEncoder, position, this$static._previousByte), this$static._state >= 7, matchByte, currentByte);\r\n    $MakeAsChar(this$static._optimum[1]);\r\n    matchPrice = ProbPrices[2048 - this$static._isMatch[(this$static._state << 4) + posState] >>> 2];\r\n    repMatchPrice = matchPrice + ProbPrices[2048 - this$static._isRep[this$static._state] >>> 2];\r\n    if (matchByte == currentByte) {\r\n        shortRepPrice = repMatchPrice + $GetRepLen1Price(this$static, this$static._state, posState);\r\n        if (shortRepPrice < this$static._optimum[1].Price) {\r\n            this$static._optimum[1].Price = shortRepPrice;\r\n            $MakeAsShortRep(this$static._optimum[1]);\r\n        }\r\n    }\r\n    lenEnd = lenMain >= this$static.repLens[repMaxIndex]?lenMain:this$static.repLens[repMaxIndex];\r\n    if (lenEnd < 2) {\r\n        this$static.backRes = this$static._optimum[1].BackPrev;\r\n        return 1;\r\n    }\r\n    this$static._optimum[1].PosPrev = 0;\r\n    this$static._optimum[0].Backs0 = this$static.reps[0];\r\n    this$static._optimum[0].Backs1 = this$static.reps[1];\r\n    this$static._optimum[0].Backs2 = this$static.reps[2];\r\n    this$static._optimum[0].Backs3 = this$static.reps[3];\r\n    len = lenEnd;\r\n    do {\r\n        this$static._optimum[len].Price = 268435455;\r\n        len -= 1;\r\n    } while (len >= 2);\r\n    for (i = 0; i < 4; ++i) {\r\n        repLen = this$static.repLens[i];\r\n        if (repLen < 2) {\r\n            continue;\r\n        }\r\n        price_4 = repMatchPrice + $GetPureRepPrice(this$static, i, this$static._state, posState);\r\n        do {\r\n            curAndLenPrice = price_4 + $GetPrice(this$static._repMatchLenEncoder, repLen - 2, posState);\r\n            optimum = this$static._optimum[repLen];\r\n            if (curAndLenPrice < optimum.Price) {\r\n                optimum.Price = curAndLenPrice;\r\n                optimum.PosPrev = 0;\r\n                optimum.BackPrev = i;\r\n                optimum.Prev1IsChar = 0;\r\n            }\r\n        } while ((repLen -= 1) >= 2);\r\n    }\r\n    normalMatchPrice = matchPrice + ProbPrices[this$static._isRep[this$static._state] >>> 2];\r\n    len = this$static.repLens[0] >= 2?this$static.repLens[0] + 1:2;\r\n    if (len <= lenMain) {\r\n        offs = 0;\r\n        while (len > this$static._matchDistances[offs]) {\r\n            offs += 2;\r\n        }\r\n        for (;; len += 1) {\r\n            distance = this$static._matchDistances[offs + 1];\r\n            curAndLenPrice = normalMatchPrice + $GetPosLenPrice(this$static, distance, len, posState);\r\n            optimum = this$static._optimum[len];\r\n            if (curAndLenPrice < optimum.Price) {\r\n                optimum.Price = curAndLenPrice;\r\n                optimum.PosPrev = 0;\r\n                optimum.BackPrev = distance + 4;\r\n                optimum.Prev1IsChar = 0;\r\n            }\r\n            if (len == this$static._matchDistances[offs]) {\r\n                offs += 2;\r\n                if (offs == numDistancePairs) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    cur = 0;\r\n    while (1) {\r\n        ++cur;\r\n        if (cur == lenEnd) {\r\n            return $Backward(this$static, cur);\r\n        }\r\n        newLen = $ReadMatchDistances(this$static);\r\n        numDistancePairs = this$static._numDistancePairs;\r\n        if (newLen >= this$static._numFastBytes) {\r\n            this$static._longestMatchLength = newLen;\r\n            this$static._longestMatchWasFound = 1;\r\n            return $Backward(this$static, cur);\r\n        }\r\n        position += 1;\r\n        posPrev = this$static._optimum[cur].PosPrev;\r\n        if (this$static._optimum[cur].Prev1IsChar) {\r\n            posPrev -= 1;\r\n            if (this$static._optimum[cur].Prev2) {\r\n                state = this$static._optimum[this$static._optimum[cur].PosPrev2].State;\r\n                if (this$static._optimum[cur].BackPrev2 < 4) {\r\n                    state = (state < 7) ? 8 : 11;\r\n                } else {\r\n                    state = (state < 7) ? 7 : 10;\r\n                }\r\n            } else {\r\n                state = this$static._optimum[posPrev].State;\r\n            }\r\n            state = StateUpdateChar(state);\r\n        } else {\r\n            state = this$static._optimum[posPrev].State;\r\n        }\r\n        if (posPrev == cur - 1) {\r\n            if (!this$static._optimum[cur].BackPrev) {\r\n                state = state < 7?9:11;\r\n            } else {\r\n                state = StateUpdateChar(state);\r\n            }\r\n        } else {\r\n            if (this$static._optimum[cur].Prev1IsChar && this$static._optimum[cur].Prev2) {\r\n                posPrev = this$static._optimum[cur].PosPrev2;\r\n                pos = this$static._optimum[cur].BackPrev2;\r\n                state = state < 7?8:11;\r\n            } else {\r\n                pos = this$static._optimum[cur].BackPrev;\r\n                if (pos < 4) {\r\n                    state = state < 7?8:11;\r\n                } else {\r\n                    state = state < 7?7:10;\r\n                }\r\n            }\r\n            opt = this$static._optimum[posPrev];\r\n            if (pos < 4) {\r\n                if (!pos) {\r\n                    this$static.reps[0] = opt.Backs0;\r\n                    this$static.reps[1] = opt.Backs1;\r\n                    this$static.reps[2] = opt.Backs2;\r\n                    this$static.reps[3] = opt.Backs3;\r\n                } else if (pos == 1) {\r\n                    this$static.reps[0] = opt.Backs1;\r\n                    this$static.reps[1] = opt.Backs0;\r\n                    this$static.reps[2] = opt.Backs2;\r\n                    this$static.reps[3] = opt.Backs3;\r\n                } else if (pos == 2) {\r\n                    this$static.reps[0] = opt.Backs2;\r\n                    this$static.reps[1] = opt.Backs0;\r\n                    this$static.reps[2] = opt.Backs1;\r\n                    this$static.reps[3] = opt.Backs3;\r\n                } else {\r\n                    this$static.reps[0] = opt.Backs3;\r\n                    this$static.reps[1] = opt.Backs0;\r\n                    this$static.reps[2] = opt.Backs1;\r\n                    this$static.reps[3] = opt.Backs2;\r\n                }\r\n            } else {\r\n                this$static.reps[0] = pos - 4;\r\n                this$static.reps[1] = opt.Backs0;\r\n                this$static.reps[2] = opt.Backs1;\r\n                this$static.reps[3] = opt.Backs2;\r\n            }\r\n        }\r\n        this$static._optimum[cur].State = state;\r\n        this$static._optimum[cur].Backs0 = this$static.reps[0];\r\n        this$static._optimum[cur].Backs1 = this$static.reps[1];\r\n        this$static._optimum[cur].Backs2 = this$static.reps[2];\r\n        this$static._optimum[cur].Backs3 = this$static.reps[3];\r\n        curPrice = this$static._optimum[cur].Price;\r\n        currentByte = $GetIndexByte(this$static._matchFinder, -1);\r\n        matchByte = $GetIndexByte(this$static._matchFinder, -this$static.reps[0] - 1 - 1);\r\n        posState = position & this$static._posStateMask;\r\n        curAnd1Price = curPrice + ProbPrices[this$static._isMatch[(state << 4) + posState] >>> 2] + $GetPrice_0($GetSubCoder(this$static._literalEncoder, position, $GetIndexByte(this$static._matchFinder, -2)), state >= 7, matchByte, currentByte);\r\n        nextOptimum = this$static._optimum[cur + 1];\r\n        nextIsChar = 0;\r\n        if (curAnd1Price < nextOptimum.Price) {\r\n            nextOptimum.Price = curAnd1Price;\r\n            nextOptimum.PosPrev = cur;\r\n            nextOptimum.BackPrev = -1;\r\n            nextOptimum.Prev1IsChar = 0;\r\n            nextIsChar = 1;\r\n        }\r\n        matchPrice = curPrice + ProbPrices[2048 - this$static._isMatch[(state << 4) + posState] >>> 2];\r\n        repMatchPrice = matchPrice + ProbPrices[2048 - this$static._isRep[state] >>> 2];\r\n        if (matchByte == currentByte && !(nextOptimum.PosPrev < cur && !nextOptimum.BackPrev)) {\r\n            shortRepPrice = repMatchPrice + (ProbPrices[this$static._isRepG0[state] >>> 2] + ProbPrices[this$static._isRep0Long[(state << 4) + posState] >>> 2]);\r\n            if (shortRepPrice <= nextOptimum.Price) {\r\n                nextOptimum.Price = shortRepPrice;\r\n                nextOptimum.PosPrev = cur;\r\n                nextOptimum.BackPrev = 0;\r\n                nextOptimum.Prev1IsChar = 0;\r\n                nextIsChar = 1;\r\n            }\r\n        }\r\n        numAvailableBytesFull = $GetNumAvailableBytes(this$static._matchFinder) + 1;\r\n        numAvailableBytesFull = 4095 - cur < numAvailableBytesFull?4095 - cur:numAvailableBytesFull;\r\n        numAvailableBytes = numAvailableBytesFull;\r\n        if (numAvailableBytes < 2) {\r\n            continue;\r\n        }\r\n        if (numAvailableBytes > this$static._numFastBytes) {\r\n            numAvailableBytes = this$static._numFastBytes;\r\n        }\r\n        if (!nextIsChar && matchByte != currentByte) {\r\n            t = Math.min(numAvailableBytesFull - 1, this$static._numFastBytes);\r\n            lenTest2 = $GetMatchLen(this$static._matchFinder, 0, this$static.reps[0], t);\r\n            if (lenTest2 >= 2) {\r\n                state2 = StateUpdateChar(state);\r\n                posStateNext = position + 1 & this$static._posStateMask;\r\n                nextRepMatchPrice = curAnd1Price + ProbPrices[2048 - this$static._isMatch[(state2 << 4) + posStateNext] >>> 2] + ProbPrices[2048 - this$static._isRep[state2] >>> 2];\r\n                offset = cur + 1 + lenTest2;\r\n                while (lenEnd < offset) {\r\n                    this$static._optimum[lenEnd += 1].Price = 268435455;\r\n                }\r\n                curAndLenPrice = nextRepMatchPrice + (price = $GetPrice(this$static._repMatchLenEncoder, lenTest2 - 2, posStateNext) , price + $GetPureRepPrice(this$static, 0, state2, posStateNext));\r\n                optimum = this$static._optimum[offset];\r\n                if (curAndLenPrice < optimum.Price) {\r\n                    optimum.Price = curAndLenPrice;\r\n                    optimum.PosPrev = cur + 1;\r\n                    optimum.BackPrev = 0;\r\n                    optimum.Prev1IsChar = 1;\r\n                    optimum.Prev2 = 0;\r\n                }\r\n            }\r\n        }\r\n        startLen = 2;\r\n        for (repIndex = 0; repIndex < 4; ++repIndex) {\r\n            lenTest = $GetMatchLen(this$static._matchFinder, -1, this$static.reps[repIndex], numAvailableBytes);\r\n            if (lenTest < 2) {\r\n                continue;\r\n            }\r\n            lenTestTemp = lenTest;\r\n            do {\r\n                while (lenEnd < cur + lenTest) {\r\n                    this$static._optimum[lenEnd += 1].Price = 268435455;\r\n                }\r\n                curAndLenPrice = repMatchPrice + (price_0 = $GetPrice(this$static._repMatchLenEncoder, lenTest - 2, posState) , price_0 + $GetPureRepPrice(this$static, repIndex, state, posState));\r\n                optimum = this$static._optimum[cur + lenTest];\r\n                if (curAndLenPrice < optimum.Price) {\r\n                    optimum.Price = curAndLenPrice;\r\n                    optimum.PosPrev = cur;\r\n                    optimum.BackPrev = repIndex;\r\n                    optimum.Prev1IsChar = 0;\r\n                }\r\n            } while ((lenTest -= 1) >= 2);\r\n            lenTest = lenTestTemp;\r\n            if (!repIndex) {\r\n                startLen = lenTest + 1;\r\n            }\r\n            if (lenTest < numAvailableBytesFull) {\r\n                t = Math.min(numAvailableBytesFull - 1 - lenTest, this$static._numFastBytes);\r\n                lenTest2 = $GetMatchLen(this$static._matchFinder, lenTest, this$static.reps[repIndex], t);\r\n                if (lenTest2 >= 2) {\r\n                    state2 = state < 7?8:11;\r\n                    posStateNext = position + lenTest & this$static._posStateMask;\r\n                    curAndLenCharPrice = repMatchPrice + (price_1 = $GetPrice(this$static._repMatchLenEncoder, lenTest - 2, posState) , price_1 + $GetPureRepPrice(this$static, repIndex, state, posState)) + ProbPrices[this$static._isMatch[(state2 << 4) + posStateNext] >>> 2] + $GetPrice_0($GetSubCoder(this$static._literalEncoder, position + lenTest, $GetIndexByte(this$static._matchFinder, lenTest - 1 - 1)), 1, $GetIndexByte(this$static._matchFinder, lenTest - 1 - (this$static.reps[repIndex] + 1)), $GetIndexByte(this$static._matchFinder, lenTest - 1));\r\n                    state2 = StateUpdateChar(state2);\r\n                    posStateNext = position + lenTest + 1 & this$static._posStateMask;\r\n                    nextMatchPrice = curAndLenCharPrice + ProbPrices[2048 - this$static._isMatch[(state2 << 4) + posStateNext] >>> 2];\r\n                    nextRepMatchPrice = nextMatchPrice + ProbPrices[2048 - this$static._isRep[state2] >>> 2];\r\n                    offset = lenTest + 1 + lenTest2;\r\n                    while (lenEnd < cur + offset) {\r\n                        this$static._optimum[lenEnd += 1].Price = 268435455;\r\n                    }\r\n                    curAndLenPrice = nextRepMatchPrice + (price_2 = $GetPrice(this$static._repMatchLenEncoder, lenTest2 - 2, posStateNext) , price_2 + $GetPureRepPrice(this$static, 0, state2, posStateNext));\r\n                    optimum = this$static._optimum[cur + offset];\r\n                    if (curAndLenPrice < optimum.Price) {\r\n                        optimum.Price = curAndLenPrice;\r\n                        optimum.PosPrev = cur + lenTest + 1;\r\n                        optimum.BackPrev = 0;\r\n                        optimum.Prev1IsChar = 1;\r\n                        optimum.Prev2 = 1;\r\n                        optimum.PosPrev2 = cur;\r\n                        optimum.BackPrev2 = repIndex;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (newLen > numAvailableBytes) {\r\n            newLen = numAvailableBytes;\r\n            for (numDistancePairs = 0; newLen > this$static._matchDistances[numDistancePairs]; numDistancePairs += 2) {}\r\n            this$static._matchDistances[numDistancePairs] = newLen;\r\n            numDistancePairs += 2;\r\n        }\r\n        if (newLen >= startLen) {\r\n        normalMatchPrice = matchPrice + ProbPrices[this$static._isRep[state] >>> 2];\r\n        while (lenEnd < cur + newLen) {\r\n            this$static._optimum[lenEnd += 1].Price = 268435455;\r\n        }\r\n        offs = 0;\r\n        while (startLen > this$static._matchDistances[offs]) {\r\n            offs += 2;\r\n        }\r\n        for (lenTest = startLen;; lenTest += 1) {\r\n            curBack = this$static._matchDistances[offs + 1];\r\n            curAndLenPrice = normalMatchPrice + $GetPosLenPrice(this$static, curBack, lenTest, posState);\r\n            optimum = this$static._optimum[cur + lenTest];\r\n            if (curAndLenPrice < optimum.Price) {\r\n                optimum.Price = curAndLenPrice;\r\n                optimum.PosPrev = cur;\r\n                optimum.BackPrev = curBack + 4;\r\n                optimum.Prev1IsChar = 0;\r\n            }\r\n            if (lenTest == this$static._matchDistances[offs]) {\r\n                if (lenTest < numAvailableBytesFull) {\r\n                    t = Math.min(numAvailableBytesFull - 1 - lenTest, this$static._numFastBytes);\r\n                    lenTest2 = $GetMatchLen(this$static._matchFinder, lenTest, curBack, t);\r\n                    if (lenTest2 >= 2) {\r\n                        state2 = state < 7?7:10;\r\n                        posStateNext = position + lenTest & this$static._posStateMask;\r\n                        curAndLenCharPrice = curAndLenPrice + ProbPrices[this$static._isMatch[(state2 << 4) + posStateNext] >>> 2] + $GetPrice_0($GetSubCoder(this$static._literalEncoder, position + lenTest, $GetIndexByte(this$static._matchFinder, lenTest - 1 - 1)), 1, $GetIndexByte(this$static._matchFinder, lenTest - (curBack + 1) - 1), $GetIndexByte(this$static._matchFinder, lenTest - 1));\r\n                        state2 = StateUpdateChar(state2);\r\n                        posStateNext = position + lenTest + 1 & this$static._posStateMask;\r\n                        nextMatchPrice = curAndLenCharPrice + ProbPrices[2048 - this$static._isMatch[(state2 << 4) + posStateNext] >>> 2];\r\n                        nextRepMatchPrice = nextMatchPrice + ProbPrices[2048 - this$static._isRep[state2] >>> 2];\r\n                        offset = lenTest + 1 + lenTest2;\r\n                        while (lenEnd < cur + offset) {\r\n                            this$static._optimum[lenEnd += 1].Price = 268435455;\r\n                        }\r\n                        curAndLenPrice = nextRepMatchPrice + (price_3 = $GetPrice(this$static._repMatchLenEncoder, lenTest2 - 2, posStateNext) , price_3 + $GetPureRepPrice(this$static, 0, state2, posStateNext));\r\n                        optimum = this$static._optimum[cur + offset];\r\n                        if (curAndLenPrice < optimum.Price) {\r\n                            optimum.Price = curAndLenPrice;\r\n                            optimum.PosPrev = cur + lenTest + 1;\r\n                            optimum.BackPrev = 0;\r\n                            optimum.Prev1IsChar = 1;\r\n                            optimum.Prev2 = 1;\r\n                            optimum.PosPrev2 = cur;\r\n                            optimum.BackPrev2 = curBack + 4;\r\n                        }\r\n                    }\r\n                }\r\n                offs += 2;\r\n                if (offs == numDistancePairs)\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction $GetPosLenPrice(this$static, pos, len, posState) {\r\n    var price, lenToPosState = GetLenToPosState(len);\r\n    if (pos < 128) {\r\n        price = this$static._distancesPrices[lenToPosState * 128 + pos];\r\n    } else {\r\n        price = this$static._posSlotPrices[(lenToPosState << 6) + GetPosSlot2(pos)] + this$static._alignPrices[pos & 15];\r\n    }\r\n    return price + $GetPrice(this$static._lenEncoder, len - 2, posState);\r\n}\r\n\r\nfunction $GetPureRepPrice(this$static, repIndex, state, posState) {\r\n    var price;\r\n    if (!repIndex) {\r\n        price = ProbPrices[this$static._isRepG0[state] >>> 2];\r\n        price += ProbPrices[2048 - this$static._isRep0Long[(state << 4) + posState] >>> 2];\r\n    } else {\r\n        price = ProbPrices[2048 - this$static._isRepG0[state] >>> 2];\r\n        if (repIndex == 1) {\r\n            price += ProbPrices[this$static._isRepG1[state] >>> 2];\r\n        } else {\r\n            price += ProbPrices[2048 - this$static._isRepG1[state] >>> 2];\r\n            price += GetPrice(this$static._isRepG2[state], repIndex - 2);\r\n        }\r\n    }\r\n    return price;\r\n}\r\n\r\nfunction $GetRepLen1Price(this$static, state, posState) {\r\n    return ProbPrices[this$static._isRepG0[state] >>> 2] + ProbPrices[this$static._isRep0Long[(state << 4) + posState] >>> 2];\r\n}\r\n\r\nfunction $Init_4(this$static) {\r\n    $BaseInit(this$static);\r\n    $Init_9(this$static._rangeEncoder);\r\n    InitBitModels(this$static._isMatch);\r\n    InitBitModels(this$static._isRep0Long);\r\n    InitBitModels(this$static._isRep);\r\n    InitBitModels(this$static._isRepG0);\r\n    InitBitModels(this$static._isRepG1);\r\n    InitBitModels(this$static._isRepG2);\r\n    InitBitModels(this$static._posEncoders);\r\n    $Init_3(this$static._literalEncoder);\r\n    for (var i = 0; i < 4; ++i) {\r\n        InitBitModels(this$static._posSlotEncoder[i].Models);\r\n    }\r\n    $Init_2(this$static._lenEncoder, 1 << this$static._posStateBits);\r\n    $Init_2(this$static._repMatchLenEncoder, 1 << this$static._posStateBits);\r\n    InitBitModels(this$static._posAlignEncoder.Models);\r\n    this$static._longestMatchWasFound = 0;\r\n    this$static._optimumEndIndex = 0;\r\n    this$static._optimumCurrentIndex = 0;\r\n    this$static._additionalOffset = 0;\r\n}\r\n\r\nfunction $MovePos(this$static, num) {\r\n    if (num > 0) {\r\n        $Skip(this$static._matchFinder, num);\r\n        this$static._additionalOffset += num;\r\n    }\r\n}\r\n\r\nfunction $ReadMatchDistances(this$static) {\r\n    var lenRes = 0;\r\n    this$static._numDistancePairs = $GetMatches(this$static._matchFinder, this$static._matchDistances);\r\n    if (this$static._numDistancePairs > 0) {\r\n        lenRes = this$static._matchDistances[this$static._numDistancePairs - 2];\r\n        if (lenRes == this$static._numFastBytes)\r\n        lenRes += $GetMatchLen(this$static._matchFinder, lenRes - 1, this$static._matchDistances[this$static._numDistancePairs - 1], 273 - lenRes);\r\n    }\r\n    this$static._additionalOffset += 1;\r\n    return lenRes;\r\n}\r\n\r\nfunction $ReleaseMFStream(this$static) {\r\n    if (this$static._matchFinder && this$static._needReleaseMFStream) {\r\n        this$static._matchFinder._stream = null;\r\n        this$static._needReleaseMFStream = 0;\r\n    }\r\n}\r\n\r\nfunction $ReleaseStreams(this$static) {\r\n    $ReleaseMFStream(this$static);\r\n    this$static._rangeEncoder.Stream = null;\r\n}\r\n\r\nfunction $SetDictionarySize_0(this$static, dictionarySize) {\r\n    this$static._dictionarySize = dictionarySize;\r\n    for (var dicLogSize = 0; dictionarySize > 1 << dicLogSize; ++dicLogSize) {}\r\n    this$static._distTableSize = dicLogSize * 2;\r\n}\r\n\r\nfunction $SetMatchFinder(this$static, matchFinderIndex) {\r\n    var matchFinderIndexPrev = this$static._matchFinderType;\r\n    this$static._matchFinderType = matchFinderIndex;\r\n    if (this$static._matchFinder && matchFinderIndexPrev != this$static._matchFinderType) {\r\n        this$static._dictionarySizePrev = -1;\r\n        this$static._matchFinder = null;\r\n    }\r\n}\r\n\r\nfunction $WriteCoderProperties(this$static, outStream) {\r\n    this$static.properties[0] = (this$static._posStateBits * 5 + this$static._numLiteralPosStateBits) * 9 + this$static._numLiteralContextBits << 24 >> 24;\r\n    for (var i = 0; i < 4; ++i) {\r\n        this$static.properties[1 + i] = this$static._dictionarySize >> 8 * i << 24 >> 24;\r\n    }\r\n    $write_0(outStream, this$static.properties, 0, 5);\r\n}\r\n\r\nfunction $WriteEndMarker(this$static, posState) {\r\n    //if (!this$static._writeEndMark) {\r\n    //    return;\r\n    //}\r\n    $Encode_3(this$static._rangeEncoder, this$static._isMatch, (this$static._state << 4) + posState, 1);\r\n    $Encode_3(this$static._rangeEncoder, this$static._isRep, this$static._state, 0);\r\n    this$static._state = this$static._state < 7?7:10;\r\n    $Encode_0(this$static._lenEncoder, this$static._rangeEncoder, 0, posState);\r\n    var lenToPosState = GetLenToPosState(2);\r\n    $Encode_2(this$static._posSlotEncoder[lenToPosState], this$static._rangeEncoder, 63);\r\n    $EncodeDirectBits(this$static._rangeEncoder, 67108863, 26);\r\n    $ReverseEncode(this$static._posAlignEncoder, this$static._rangeEncoder, 15);\r\n}\r\n\r\nfunction GetPosSlot(pos) {\r\n    if (pos < 2048) {\r\n        return g_FastPos[pos];\r\n    }\r\n    if (pos < 2097152) {\r\n        return g_FastPos[pos >> 10] + 20;\r\n    }\r\n    return g_FastPos[pos >> 20] + 40;\r\n}\r\n\r\nfunction GetPosSlot2(pos) {\r\n    if (pos < 131072) {\r\n        return g_FastPos[pos >> 6] + 12;\r\n    }\r\n    if (pos < 134217728) {\r\n        return g_FastPos[pos >> 16] + 32;\r\n    }\r\n    return g_FastPos[pos >> 26] + 52;\r\n}\r\n\r\nfunction $Encode(this$static, rangeEncoder, symbol, posState) {\r\n    if (symbol < 8) {\r\n        $Encode_3(rangeEncoder, this$static._choice, 0, 0);\r\n        $Encode_2(this$static._lowCoder[posState], rangeEncoder, symbol);\r\n    } else {\r\n        symbol -= 8;\r\n        $Encode_3(rangeEncoder, this$static._choice, 0, 1);\r\n        if (symbol < 8) {\r\n            $Encode_3(rangeEncoder, this$static._choice, 1, 0);\r\n            $Encode_2(this$static._midCoder[posState], rangeEncoder, symbol);\r\n        } else {\r\n            $Encode_3(rangeEncoder, this$static._choice, 1, 1);\r\n            $Encode_2(this$static._highCoder, rangeEncoder, symbol - 8);\r\n        }\r\n    }\r\n}\r\n\r\nfunction $Encoder$LenEncoder(this$static) {\r\n    this$static._choice = initDim(2);\r\n    this$static._lowCoder = initDim(16);\r\n    this$static._midCoder = initDim(16);\r\n    this$static._highCoder = $BitTreeEncoder({}, 8);\r\n    for (var posState = 0; posState < 16; ++posState) {\r\n        this$static._lowCoder[posState] = $BitTreeEncoder({}, 3);\r\n        this$static._midCoder[posState] = $BitTreeEncoder({}, 3);\r\n    }\r\n    return this$static;\r\n}\r\n\r\nfunction $Init_2(this$static, numPosStates) {\r\n    InitBitModels(this$static._choice);\r\n    for (var posState = 0; posState < numPosStates; ++posState) {\r\n        InitBitModels(this$static._lowCoder[posState].Models);\r\n        InitBitModels(this$static._midCoder[posState].Models);\r\n    }\r\n    InitBitModels(this$static._highCoder.Models);\r\n}\r\n\r\nfunction $SetPrices(this$static, posState, numSymbols, prices, st) {\r\n    var a0, a1, b0, b1, i;\r\n    a0 = ProbPrices[this$static._choice[0] >>> 2];\r\n    a1 = ProbPrices[2048 - this$static._choice[0] >>> 2];\r\n    b0 = a1 + ProbPrices[this$static._choice[1] >>> 2];\r\n    b1 = a1 + ProbPrices[2048 - this$static._choice[1] >>> 2];\r\n    i = 0;\r\n    for (i = 0; i < 8; ++i) {\r\n        if (i >= numSymbols)\r\n        return;\r\n        prices[st + i] = a0 + $GetPrice_1(this$static._lowCoder[posState], i);\r\n    }\r\n    for (; i < 16; ++i) {\r\n        if (i >= numSymbols)\r\n        return;\r\n        prices[st + i] = b0 + $GetPrice_1(this$static._midCoder[posState], i - 8);\r\n    }\r\n    for (; i < numSymbols; ++i) {\r\n        prices[st + i] = b1 + $GetPrice_1(this$static._highCoder, i - 8 - 8);\r\n    }\r\n}\r\n\r\nfunction $Encode_0(this$static, rangeEncoder, symbol, posState) {\r\n    $Encode(this$static, rangeEncoder, symbol, posState);\r\n    if ((this$static._counters[posState] -= 1) == 0) {\r\n        $SetPrices(this$static, posState, this$static._tableSize, this$static._prices, posState * 272);\r\n        this$static._counters[posState] = this$static._tableSize;\r\n    }\r\n}\r\n\r\nfunction $Encoder$LenPriceTableEncoder(this$static) {\r\n    $Encoder$LenEncoder(this$static);\r\n    this$static._prices = [];\r\n    this$static._counters = [];\r\n    return this$static;\r\n}\r\n\r\nfunction $GetPrice(this$static, symbol, posState) {\r\n    return this$static._prices[posState * 272 + symbol];\r\n}\r\n\r\nfunction $UpdateTables(this$static, numPosStates) {\r\n    for (var posState = 0; posState < numPosStates; ++posState) {\r\n        $SetPrices(this$static, posState, this$static._tableSize, this$static._prices, posState * 272);\r\n        this$static._counters[posState] = this$static._tableSize;\r\n    }\r\n}\r\n\r\nfunction $Create_1(this$static, numPosBits, numPrevBits) {\r\n    var i, numStates;\r\n    if (this$static.m_Coders != null && this$static.m_NumPrevBits == numPrevBits && this$static.m_NumPosBits == numPosBits) {\r\n        return;\r\n    }\r\n    this$static.m_NumPosBits = numPosBits;\r\n    this$static.m_PosMask = (1 << numPosBits) - 1;\r\n    this$static.m_NumPrevBits = numPrevBits;\r\n    numStates = 1 << this$static.m_NumPrevBits + this$static.m_NumPosBits;\r\n    this$static.m_Coders = initDim(numStates);\r\n    for (i = 0; i < numStates; ++i) {\r\n        this$static.m_Coders[i] = $Encoder$LiteralEncoder$Encoder2({});\r\n    }\r\n}\r\n\r\nfunction $GetSubCoder(this$static, pos, prevByte) {\r\n    return this$static.m_Coders[((pos & this$static.m_PosMask) << this$static.m_NumPrevBits) + ((prevByte & 255) >>> 8 - this$static.m_NumPrevBits)];\r\n}\r\n\r\nfunction $Init_3(this$static) {\r\n    var i, numStates = 1 << this$static.m_NumPrevBits + this$static.m_NumPosBits;\r\n    for (i = 0; i < numStates; ++i) {\r\n        InitBitModels(this$static.m_Coders[i].m_Encoders);\r\n    }\r\n}\r\n\r\nfunction $Encode_1(this$static, rangeEncoder, symbol) {\r\n    var bit, i, context = 1;\r\n    for (i = 7; i >= 0; --i) {\r\n        bit = symbol >> i & 1;\r\n        $Encode_3(rangeEncoder, this$static.m_Encoders, context, bit);\r\n        context = context << 1 | bit;\r\n    }\r\n}\r\n\r\nfunction $EncodeMatched(this$static, rangeEncoder, matchByte, symbol) {\r\n    var bit, i, matchBit, state, same = 1, context = 1;\r\n    for (i = 7; i >= 0; --i) {\r\n        bit = symbol >> i & 1;\r\n        state = context;\r\n        if (same) {\r\n            matchBit = matchByte >> i & 1;\r\n            state += 1 + matchBit << 8;\r\n            same = matchBit == bit;\r\n        }\r\n        $Encode_3(rangeEncoder, this$static.m_Encoders, state, bit);\r\n        context = context << 1 | bit;\r\n    }\r\n}\r\n\r\nfunction $Encoder$LiteralEncoder$Encoder2(this$static) {\r\n    this$static.m_Encoders = initDim(768);\r\n    return this$static;\r\n}\r\n\r\nfunction $GetPrice_0(this$static, matchMode, matchByte, symbol) {\r\n    var bit, context = 1, i = 7, matchBit, price = 0;\r\n    if (matchMode) {\r\n        for (; i >= 0; --i) {\r\n            matchBit = matchByte >> i & 1;\r\n            bit = symbol >> i & 1;\r\n            price += GetPrice(this$static.m_Encoders[(1 + matchBit << 8) + context], bit);\r\n            context = context << 1 | bit;\r\n            if (matchBit != bit) {\r\n                --i;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    for (; i >= 0; --i) {\r\n        bit = symbol >> i & 1;\r\n        price += GetPrice(this$static.m_Encoders[context], bit);\r\n        context = context << 1 | bit;\r\n    }\r\n    return price;\r\n}\r\n\r\nfunction $MakeAsChar(this$static) {\r\n    this$static.BackPrev = -1;\r\n    this$static.Prev1IsChar = 0;\r\n}\r\n\r\nfunction $MakeAsShortRep(this$static) {\r\n    this$static.BackPrev = 0;\r\n    this$static.Prev1IsChar = 0;\r\n}\r\n/** ce */\r\n/** ds */\r\nfunction $BitTreeDecoder(this$static, numBitLevels) {\r\n    this$static.NumBitLevels = numBitLevels;\r\n    this$static.Models = initDim(1 << numBitLevels);\r\n    return this$static;\r\n}\r\n\r\nfunction $Decode_0(this$static, rangeDecoder) {\r\n    var bitIndex, m = 1;\r\n    for (bitIndex = this$static.NumBitLevels; bitIndex != 0; bitIndex -= 1) {\r\n        m = (m << 1) + $DecodeBit(rangeDecoder, this$static.Models, m);\r\n    }\r\n    return m - (1 << this$static.NumBitLevels);\r\n}\r\n\r\nfunction $ReverseDecode(this$static, rangeDecoder) {\r\n    var bit, bitIndex, m = 1, symbol = 0;\r\n    for (bitIndex = 0; bitIndex < this$static.NumBitLevels; ++bitIndex) {\r\n        bit = $DecodeBit(rangeDecoder, this$static.Models, m);\r\n        m <<= 1;\r\n        m += bit;\r\n        symbol |= bit << bitIndex;\r\n    }\r\n    return symbol;\r\n}\r\n\r\nfunction ReverseDecode(Models, startIndex, rangeDecoder, NumBitLevels) {\r\n    var bit, bitIndex, m = 1, symbol = 0;\r\n    for (bitIndex = 0; bitIndex < NumBitLevels; ++bitIndex) {\r\n        bit = $DecodeBit(rangeDecoder, Models, startIndex + m);\r\n        m <<= 1;\r\n        m += bit;\r\n        symbol |= bit << bitIndex;\r\n    }\r\n    return symbol;\r\n}\r\n/** de */\r\n/** cs */\r\nfunction $BitTreeEncoder(this$static, numBitLevels) {\r\n    this$static.NumBitLevels = numBitLevels;\r\n    this$static.Models = initDim(1 << numBitLevels);\r\n    return this$static;\r\n}\r\n\r\nfunction $Encode_2(this$static, rangeEncoder, symbol) {\r\n    var bit, bitIndex, m = 1;\r\n    for (bitIndex = this$static.NumBitLevels; bitIndex != 0;) {\r\n        bitIndex -= 1;\r\n        bit = symbol >>> bitIndex & 1;\r\n        $Encode_3(rangeEncoder, this$static.Models, m, bit);\r\n        m = m << 1 | bit;\r\n    }\r\n}\r\n\r\nfunction $GetPrice_1(this$static, symbol) {\r\n    var bit, bitIndex, m = 1, price = 0;\r\n    for (bitIndex = this$static.NumBitLevels; bitIndex != 0;) {\r\n        bitIndex -= 1;\r\n        bit = symbol >>> bitIndex & 1;\r\n        price += GetPrice(this$static.Models[m], bit);\r\n        m = (m << 1) + bit;\r\n    }\r\n    return price;\r\n}\r\n\r\nfunction $ReverseEncode(this$static, rangeEncoder, symbol) {\r\n    var bit, i, m = 1;\r\n    for (i = 0; i < this$static.NumBitLevels; ++i) {\r\n        bit = symbol & 1;\r\n        $Encode_3(rangeEncoder, this$static.Models, m, bit);\r\n        m = m << 1 | bit;\r\n        symbol >>= 1;\r\n    }\r\n}\r\n\r\nfunction $ReverseGetPrice(this$static, symbol) {\r\n    var bit, i, m = 1, price = 0;\r\n    for (i = this$static.NumBitLevels; i != 0; i -= 1) {\r\n        bit = symbol & 1;\r\n        symbol >>>= 1;\r\n        price += GetPrice(this$static.Models[m], bit);\r\n        m = m << 1 | bit;\r\n    }\r\n    return price;\r\n}\r\n\r\nfunction ReverseEncode(Models, startIndex, rangeEncoder, NumBitLevels, symbol) {\r\n    var bit, i, m = 1;\r\n    for (i = 0; i < NumBitLevels; ++i) {\r\n        bit = symbol & 1;\r\n        $Encode_3(rangeEncoder, Models, startIndex + m, bit);\r\n        m = m << 1 | bit;\r\n        symbol >>= 1;\r\n    }\r\n}\r\n\r\nfunction ReverseGetPrice(Models, startIndex, NumBitLevels, symbol) {\r\n    var bit, i, m = 1, price = 0;\r\n    for (i = NumBitLevels; i != 0; i -= 1) {\r\n        bit = symbol & 1;\r\n        symbol >>>= 1;\r\n        price += ProbPrices[((Models[startIndex + m] - bit ^ -bit) & 2047) >>> 2];\r\n        m = m << 1 | bit;\r\n    }\r\n    return price;\r\n}\r\n/** ce */\r\n/** ds */\r\nfunction $DecodeBit(this$static, probs, index) {\r\n    var newBound, prob = probs[index];\r\n    newBound = (this$static.Range >>> 11) * prob;\r\n    if ((this$static.Code ^ -2147483648) < (newBound ^ -2147483648)) {\r\n        this$static.Range = newBound;\r\n        probs[index] = prob + (2048 - prob >>> 5) << 16 >> 16;\r\n        if (!(this$static.Range & -16777216)) {\r\n            this$static.Code = this$static.Code << 8 | $read(this$static.Stream);\r\n            this$static.Range <<= 8;\r\n        }\r\n        return 0;\r\n    } else {\r\n        this$static.Range -= newBound;\r\n        this$static.Code -= newBound;\r\n        probs[index] = prob - (prob >>> 5) << 16 >> 16;\r\n        if (!(this$static.Range & -16777216)) {\r\n            this$static.Code = this$static.Code << 8 | $read(this$static.Stream);\r\n            this$static.Range <<= 8;\r\n        }\r\n        return 1;\r\n    }\r\n}\r\n\r\nfunction $DecodeDirectBits(this$static, numTotalBits) {\r\n    var i, t, result = 0;\r\n    for (i = numTotalBits; i != 0; i -= 1) {\r\n        this$static.Range >>>= 1;\r\n        t = this$static.Code - this$static.Range >>> 31;\r\n        this$static.Code -= this$static.Range & t - 1;\r\n        result = result << 1 | 1 - t;\r\n        if (!(this$static.Range & -16777216)) {\r\n            this$static.Code = this$static.Code << 8 | $read(this$static.Stream);\r\n            this$static.Range <<= 8;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction $Init_8(this$static) {\r\n    this$static.Code = 0;\r\n    this$static.Range = -1;\r\n    for (var i = 0; i < 5; ++i) {\r\n        this$static.Code = this$static.Code << 8 | $read(this$static.Stream);\r\n    }\r\n}\r\n/** de */\r\n\r\nfunction InitBitModels(probs) {\r\n    for (var i = probs.length - 1; i >= 0; --i) {\r\n        probs[i] = 1024;\r\n    }\r\n}\r\n/** cs */\r\nvar ProbPrices = (function () {\r\n    var end, i, j, start, ProbPrices = [];\r\n    for (i = 8; i >= 0; --i) {\r\n        start = 1;\r\n        start <<= 9 - i - 1;\r\n        end = 1;\r\n        end <<= 9 - i;\r\n        for (j = start; j < end; ++j) {\r\n            ProbPrices[j] = (i << 6) + (end - j << 6 >>> 9 - i - 1);\r\n        }\r\n    }\r\n    return ProbPrices;\r\n}());\r\n\r\nfunction $Encode_3(this$static, probs, index, symbol) {\r\n    var newBound, prob = probs[index];\r\n    newBound = (this$static.Range >>> 11) * prob;\r\n    if (!symbol) {\r\n        this$static.Range = newBound;\r\n        probs[index] = prob + (2048 - prob >>> 5) << 16 >> 16;\r\n    } else {\r\n        this$static.Low = add(this$static.Low, and(fromInt(newBound), [4294967295, 0]));\r\n        this$static.Range -= newBound;\r\n        probs[index] = prob - (prob >>> 5) << 16 >> 16;\r\n    }\r\n    if (!(this$static.Range & -16777216)) {\r\n        this$static.Range <<= 8;\r\n        $ShiftLow(this$static);\r\n    }\r\n}\r\n\r\nfunction $EncodeDirectBits(this$static, v, numTotalBits) {\r\n    for (var i = numTotalBits - 1; i >= 0; i -= 1) {\r\n        this$static.Range >>>= 1;\r\n        if ((v >>> i & 1) == 1) {\r\n            this$static.Low = add(this$static.Low, fromInt(this$static.Range));\r\n        }\r\n        if (!(this$static.Range & -16777216)) {\r\n            this$static.Range <<= 8;\r\n            $ShiftLow(this$static);\r\n        }\r\n    }\r\n}\r\n\r\nfunction $GetProcessedSizeAdd(this$static) {\r\n    return add(add(fromInt(this$static._cacheSize), this$static._position), [4, 0]);\r\n}\r\n\r\nfunction $Init_9(this$static) {\r\n    this$static._position = P0_longLit;\r\n    this$static.Low = P0_longLit;\r\n    this$static.Range = -1;\r\n    this$static._cacheSize = 1;\r\n    this$static._cache = 0;\r\n}\r\n\r\nfunction $ShiftLow(this$static) {\r\n    var temp, LowHi = lowBits_0(shru(this$static.Low, 32));\r\n    if (LowHi != 0 || compare(this$static.Low, [4278190080, 0]) < 0) {\r\n        this$static._position = add(this$static._position, fromInt(this$static._cacheSize));\r\n        temp = this$static._cache;\r\n        do {\r\n            $write(this$static.Stream, temp + LowHi);\r\n            temp = 255;\r\n        } while ((this$static._cacheSize -= 1) != 0);\r\n        this$static._cache = lowBits_0(this$static.Low) >>> 24;\r\n    }\r\n    this$static._cacheSize += 1;\r\n    this$static.Low = shl(and(this$static.Low, [16777215, 0]), 8);\r\n}\r\n\r\nfunction GetPrice(Prob, symbol) {\r\n    return ProbPrices[((Prob - symbol ^ -symbol) & 2047) >>> 2];\r\n}\r\n\r\n/** ce */\r\n/** ds */\r\nfunction decode(utf) {\r\n    var i = 0, j = 0, x, y, z, l = utf.length, buf = [], charCodes = [];\r\n    for (; i < l; ++i, ++j) {\r\n        x = utf[i] & 255;\r\n        if (!(x & 128)) {\r\n            if (!x) {\r\n                /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\r\n                return utf;\r\n            }\r\n            charCodes[j] = x;\r\n        } else if ((x & 224) == 192) {\r\n            if (i + 1 >= l) {\r\n                /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\r\n                return utf;\r\n            }\r\n            y = utf[++i] & 255;\r\n            if ((y & 192) != 128) {\r\n                /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\r\n                return utf;\r\n            }\r\n            charCodes[j] = ((x & 31) << 6) | (y & 63);\r\n        } else if ((x & 240) == 224) {\r\n            if (i + 2 >= l) {\r\n                /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\r\n                return utf;\r\n            }\r\n            y = utf[++i] & 255;\r\n            if ((y & 192) != 128) {\r\n                /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\r\n                return utf;\r\n            }\r\n            z = utf[++i] & 255;\r\n            if ((z & 192) != 128) {\r\n                /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\r\n                return utf;\r\n            }\r\n            charCodes[j] = ((x & 15) << 12) | ((y & 63) << 6) | (z & 63);\r\n        } else {\r\n            /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\r\n            return utf;\r\n        }\r\n        if (j == 16383) {\r\n            buf.push(String.fromCharCode.apply(String, charCodes));\r\n            j = -1;\r\n        }\r\n    }\r\n    if (j > 0) {\r\n        charCodes.length = j;\r\n        buf.push(String.fromCharCode.apply(String, charCodes));\r\n    }\r\n    return buf.join(\"\");\r\n}\r\n/** de */\r\n/** cs */\r\nfunction encode(s) {\r\n    var ch, chars = [], data, elen = 0, i, l = s.length;\r\n    /// Be able to handle binary arrays and buffers.\r\n    if (typeof s == \"object\") {\r\n        return s;\r\n    } else {\r\n        $getChars(s, 0, l, chars, 0);\r\n    }\r\n    /// Add extra spaces in the array to break up the unicode symbols.\r\n    for (i = 0; i < l; ++i) {\r\n        ch = chars[i];\r\n        if (ch >= 1 && ch <= 127) {\r\n            ++elen;\r\n        } else if (!ch || ch >= 128 && ch <= 2047) {\r\n            elen += 2;\r\n        } else {\r\n            elen += 3;\r\n        }\r\n    }\r\n    data = [];\r\n    elen = 0;\r\n    for (i = 0; i < l; ++i) {\r\n        ch = chars[i];\r\n        if (ch >= 1 && ch <= 127) {\r\n            data[elen++] = ch << 24 >> 24;\r\n        } else if (!ch || ch >= 128 && ch <= 2047) {\r\n            data[elen++] = (192 | ch >> 6 & 31) << 24 >> 24;\r\n            data[elen++] = (128 | ch & 63) << 24 >> 24;\r\n        } else {\r\n            data[elen++] = (224 | ch >> 12 & 15) << 24 >> 24;\r\n            data[elen++] = (128 | ch >> 6 & 63) << 24 >> 24;\r\n            data[elen++] = (128 | ch & 63) << 24 >> 24;\r\n        }\r\n    }\r\n    return data;\r\n}\r\n/** ce */\r\n\r\nfunction toDouble(a) {\r\n    return a[1] + a[0];\r\n}\r\n\r\n/** cs */\r\nexport function compress(str, mode, on_finish, on_progress) {\r\n    var this$static = {},\r\n        percent,\r\n        cbn, /// A callback number should be supplied instead of on_finish() if we are using Web Workers.\r\n        sync = typeof on_finish == \"undefined\" && typeof on_progress == \"undefined\";\r\n    \r\n    if (typeof on_finish != \"function\") {\r\n        cbn = on_finish;\r\n        on_finish = on_progress = 0;\r\n    }\r\n    \r\n    on_progress = on_progress || function(percent) {\r\n        if (typeof cbn == \"undefined\")\r\n            return;\r\n        \r\n        return update_progress(percent, cbn);\r\n    };\r\n    \r\n    on_finish = on_finish || function(res, err) {\r\n        if (typeof cbn == \"undefined\")\r\n            return;\r\n        \r\n        return postMessage({\r\n            \"action\": action_compress,\r\n            \"cbn\": cbn,\r\n            \"result\": res,\r\n            \"error\": err\r\n        });\r\n    };\r\n\r\n    if (sync) {\r\n        this$static.c = $LZMAByteArrayCompressor({}, encode(str), get_mode_obj(mode));\r\n        while ($processChunkEncode(this$static.c.chunker));\r\n        return $toByteArray(this$static.c.output);\r\n    }\r\n    \r\n    try {\r\n        this$static.c = $LZMAByteArrayCompressor({}, encode(str), get_mode_obj(mode));\r\n        \r\n        on_progress(0);\r\n    } catch (err) {\r\n        return on_finish(null, err);\r\n    }\r\n    \r\n    function do_action() {\r\n        try {\r\n            var res, start = (new Date()).getTime();\r\n            \r\n            while ($processChunkEncode(this$static.c.chunker)) {\r\n                percent = toDouble(this$static.c.chunker.inBytesProcessed) / toDouble(this$static.c.length_0);\r\n                /// If about 200 miliseconds have passed, update the progress.\r\n                if ((new Date()).getTime() - start > 200) {\r\n                    on_progress(percent);\r\n                    \r\n                    wait(do_action, 0);\r\n                    return 0;\r\n                }\r\n            }\r\n            \r\n            on_progress(1);\r\n            \r\n            res = $toByteArray(this$static.c.output);\r\n            \r\n            /// delay so we donât catch errors from the on_finish handler\r\n            wait(on_finish.bind(null, res), 0);\r\n        } catch (err) {\r\n            on_finish(null, err);\r\n        }\r\n    }\r\n    \r\n    ///NOTE: We need to wait to make sure it is always async.\r\n    wait(do_action, 0);\r\n}\r\n/** ce */\r\n/** ds */\r\nexport function decompress(byte_arr, on_finish, on_progress) {\r\n    var this$static = {},\r\n        percent,\r\n        cbn, /// A callback number should be supplied instead of on_finish() if we are using Web Workers.\r\n        has_progress,\r\n        len,\r\n        sync = typeof on_finish == \"undefined\" && typeof on_progress == \"undefined\";\r\n\r\n    if (typeof on_finish != \"function\") {\r\n        cbn = on_finish;\r\n        on_finish = on_progress = 0;\r\n    }\r\n    \r\n    on_progress = on_progress || function(percent) {\r\n        if (typeof cbn == \"undefined\")\r\n            return;\r\n        \r\n        return update_progress(has_progress ? percent : -1, cbn);\r\n    };\r\n    \r\n    on_finish = on_finish || function(res, err) {\r\n        if (typeof cbn == \"undefined\")\r\n            return;\r\n        \r\n        return postMessage({\r\n            \"action\": action_decompress,\r\n            \"cbn\": cbn,\r\n            \"result\": res,\r\n            \"error\": err\r\n        });\r\n    };\r\n\r\n    if (sync) {\r\n        this$static.d = $LZMAByteArrayDecompressor({}, byte_arr);\r\n        while ($processChunkDecode(this$static.d.chunker));\r\n        return decode($toByteArray(this$static.d.output));\r\n    }\r\n    \r\n    try {\r\n        this$static.d = $LZMAByteArrayDecompressor({}, byte_arr);\r\n        \r\n        len = toDouble(this$static.d.length_0);\r\n        \r\n        ///NOTE: If the data was created via a stream, it will not have a length value, and therefore we can't calculate the progress.\r\n        has_progress = len > -1;\r\n        \r\n        on_progress(0);\r\n    } catch (err) {\r\n        return on_finish(null, err);\r\n    }\r\n    \r\n    function do_action() {\r\n        try {\r\n            var res, i = 0, start = (new Date()).getTime();\r\n            while ($processChunkDecode(this$static.d.chunker)) {\r\n                if (++i % 1000 == 0 && (new Date()).getTime() - start > 200) {\r\n                    if (has_progress) {\r\n                        percent = toDouble(this$static.d.chunker.decoder.nowPos64) / len;\r\n                        /// If about 200 miliseconds have passed, update the progress.\r\n                        on_progress(percent);\r\n                    }\r\n                    \r\n                    ///NOTE: This allows other code to run, like the browser to update.\r\n                    wait(do_action, 0);\r\n                    return 0;\r\n                }\r\n            }\r\n            \r\n            on_progress(1);\r\n            \r\n            res = decode($toByteArray(this$static.d.output));\r\n            \r\n            /// delay so we donât catch errors from the on_finish handler\r\n            wait(on_finish.bind(null, res), 0);\r\n        } catch (err) {\r\n            on_finish(null, err);\r\n        }\r\n    }\r\n    \r\n    ///NOTE: We need to wait to make sure it is always async.\r\n    wait(do_action, 0);\r\n}\r\n/** de */\r\n/** cs */\r\nvar get_mode_obj = (function () {\r\n    /// s is dictionarySize\r\n    /// f is fb\r\n    /// m is matchFinder\r\n    ///NOTE: Because some values are always the same, they have been removed.\r\n    /// lc is always 3\r\n    /// lp is always 0\r\n    /// pb is always 2\r\n    var modes = [\r\n        {s: 16, f:  64, m: 0},\r\n        {s: 20, f:  64, m: 0},\r\n        {s: 19, f:  64, m: 1},\r\n        {s: 20, f:  64, m: 1},\r\n        {s: 21, f: 128, m: 1},\r\n        {s: 22, f: 128, m: 1},\r\n        {s: 23, f: 128, m: 1},\r\n        {s: 24, f: 255, m: 1},\r\n        {s: 25, f: 255, m: 1}\r\n    ];\r\n    \r\n    return function (mode) {\r\n        return modes[mode - 1] || modes[6];\r\n    };\r\n}());\r\n/** ce */\r\n","import { compress, action_compress } from \"./lzma-algo\";\r\n\r\nexport { compress };\r\n\r\nexport function LZMA() {}\r\nLZMA[\"compress\"] = compress;\r\nLZMA.prototype[\"compress\"] = compress;\r\n\r\nexport var LZMA_WORKER = LZMA;\r\n\r\nif (typeof self != \"undefined\" && 'importScripts' in self) {\r\n    addEventListener(\"message\", function (e) {\r\n        if (e[\"data\"][\"action\"] == action_compress) {\r\n            compress(e[\"data\"][\"data\"], e[\"data\"][\"mode\"], e[\"data\"][\"cbn\"]);\r\n        }\r\n    });\r\n}\r\n"],"names":["wait","setImmediate","setTimeout","N1_longLit","MIN_VALUE","P0_longLit","P1_longLit","initDim","len","a","undefined","add","b","create","and","highBits","lowBits","low","makeFromBits","Math","max","min","lowBits_0","compare","nega","negb","sub","valueLow","valueHigh","diffHigh","diffLow","floor","eq","fromInt","value","pwrAsDouble","n","shl","diff","newHigh","newLow","twoToN","Error","shr","shiftFact","$read_0","this$static","buf","off","count","pos","arraycopy","$toByteArray","data","length","$write","src","srcOfs","dest","destOfs","i","$init","input","output","length_0","mode","encoder","dictionarySize","_dictionarySize","dicLogSize","_distTableSize","$SetDictionarySize_0","s","_numFastBytes","f","matchFinderIndex","matchFinderIndexPrev","_matchFinderType","_matchFinder","_dictionarySizePrev","$SetMatchFinder","m","_numLiteralPosStateBits","_numLiteralContextBits","_posStateBits","_posStateMask","$configure","_repDistances","_optimum","_rangeEncoder","_isMatch","_isRep","_isRepG0","_isRepG1","_isRepG2","_isRep0Long","_posSlotEncoder","_posEncoders","_posAlignEncoder","$BitTreeEncoder","_lenEncoder","$Encoder$LenPriceTableEncoder","_repMatchLenEncoder","_literalEncoder","_matchDistances","_posSlotPrices","_distancesPrices","_alignPrices","reps","repLens","processedInSize","processedOutSize","finished","properties","tempPrices","_longestMatchLength","_numDistancePairs","_numFastBytesPrev","backRes","$Encoder","outStream","$write_0","$WriteCoderProperties","chunker","_needReleaseMFStream","_inStream","_finished","bt","numHashBytes","HASH_ARRAY","kNumHashDirectBytes","kMinMatchCheck","kFixHashSize","$SetType","numPosBits","numPrevBits","numStates","m_Coders","m_NumPrevBits","m_NumPosBits","m_PosMask","$Encoder$LiteralEncoder$Encoder2","$Create_1","historySize","keepAddBufferBefore","matchMaxLen","keepAddBufferAfter","cyclicBufferSize","hs","_cutValue","keepSizeBefore","keepSizeAfter","keepSizeReserv","blockSize","_keepSizeBefore","_keepSizeAfter","_bufferBase","_blockSize","_pointerToLastSafePosition","$Create_4","_matchMaxLen","_cyclicBufferSize","_son","_hashMask","_hashSizeSum","_hash","$Create_3","$Create_2","Stream","_state","_previousByte","$BaseInit","_position","Low","Range","_cacheSize","_cache","$Init_9","InitBitModels","m_Encoders","$Init_3","Models","$Init_2","_longestMatchWasFound","_optimumEndIndex","_optimumCurrentIndex","_additionalOffset","$Init_4","$FillDistancesPrices","$FillAlignPrices","_tableSize","$UpdateTables","nowPos64","decoder","alive","$Chunker_0","$LZMAByteArrayCompressor","$ByteArrayOutputStream","$ByteArrayInputStream","$GetIndexByte","index","_bufferOffset","_pos","$GetMatchLen","distance","limit","pby","_streamEndWasReached","_streamPos","$GetNumAvailableBytes","$ReadBlock","numReadBytes","size","_stream","_posLimit","$ReduceOffsets","subValue","CrcTable","j","r","$MovePos_0","_cyclicBufferPos","numBytes","offset","$MoveBlock","$MovePos_1","$NormalizeLinks","items","numItems","GetLenToPosState","StateUpdateChar","$processChunkEncode","inSize","outSize","baseVal","complexState","curByte","footerBits","lenToPosState","matchByte","posReduced","posSlot","posState","progressPosValuePrev","subCoder","$Init_5","$Flush","$ReadMatchDistances","$Encode_3","$Encode_1","$GetSubCoder","$GetOptimum","$EncodeMatched","$Encode_0","GetPosSlot","$Encode_2","ReverseEncode","$EncodeDirectBits","$ReverseEncode","_alignPriceCount","_matchPriceCount","$GetProcessedSizeAdd","$CodeOneBlock","inBytesProcessed","$ReleaseMFStream","$ReleaseStreams","$processEncoderChunk","g_FastPos","k","slotFast","c","$Backward","cur","backCur","backMem","posMem","posPrev","PosPrev","BackPrev","Prev1IsChar","$MakeAsChar","Prev2","PosPrev2","BackPrev2","$ReverseGetPrice","st","st2","ReverseGetPrice","$GetPrice_1","nowPos","$WriteEndMarker","$ShiftLow","position","curAnd1Price","curAndLenCharPrice","curAndLenPrice","curBack","curPrice","currentByte","lenEnd","lenMain","lenRes","lenTest","lenTest2","lenTestTemp","matchPrice","newLen","nextIsChar","nextOptimum","nextRepMatchPrice","normalMatchPrice","numAvailableBytes","numAvailableBytesFull","numDistancePairs","offs","opt","optimum","posStateNext","price_4","repIndex","repLen","repMatchPrice","repMaxIndex","shortRepPrice","startLen","state","state2","$MovePos","State","Price","ProbPrices","$GetPrice_0","$GetRepLen1Price","$MakeAsShortRep","Backs0","Backs1","Backs2","Backs3","$GetPureRepPrice","$GetPrice","$GetPosLenPrice","GetPosSlot2","price","GetPrice","num","curMatch","cyclicPos","delta","hashValue","len0","len1","lenLimit","matchMinPos","pby1","ptr0","ptr1","temp","$Skip","distances","curMatch2","curMatch3","hash2Value","hash3Value","maxLen","$GetMatches","numPosStates","_choice","_lowCoder","_midCoder","_highCoder","$SetPrices","numSymbols","prices","a0","a1","b0","b1","rangeEncoder","symbol","$Encode","_counters","_prices","$Encoder$LenEncoder","prevByte","bit","context","matchBit","same","matchMode","numBitLevels","NumBitLevels","bitIndex","startIndex","probs","end","start","newBound","prob","v","numTotalBits","sr","LowHi","Prob","encode","ch","chars","elen","l","srcBegin","srcEnd","dst","dstBegin","srcIdx","charCodeAt","$getChars","toDouble","compress","str","on_finish","on_progress","percent","cbn","sync","postMessage","action","result","update_progress","res","err","error","get_mode_obj","do_action","Date","getTime","bind","modes","p","LZMA","prototype","LZMA_WORKER","self","addEventListener","e"],"mappings":"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"}